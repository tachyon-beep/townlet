[
  {
    "classes": [],
    "constants": [
      {
        "name": "DEFAULT_VERSIONS_PATH",
        "value": "Path('data/bc_datasets/versions.json')"
      },
      {
        "name": "REQUIRED_VERSION_KEYS",
        "value": "{'manifest', 'checksums', 'captures_dir'}"
      }
    ],
    "docstring": "Audit behaviour cloning datasets for checksum and metadata freshness.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 16,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 32,
        "name": "load_versions",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "Mapping[str, Mapping[str, object]]",
        "signature": "(path: Path) -> Mapping[str, Mapping[str, object]]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 41,
        "name": "audit_dataset",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "name"
          },
          {
            "annotation": "Mapping[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "payload"
          }
        ],
        "return_type": "dict[str, object]",
        "signature": "(name: str, payload: Mapping[str, object]) -> dict[str, object]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 129,
        "name": "audit_catalog",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "versions_path"
          }
        ],
        "return_type": "dict[str, object]",
        "signature": "(versions_path: Path) -> dict[str, object]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 152,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [],
      "stdlib": [
        "__future__",
        "argparse",
        "datetime",
        "hashlib",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 161,
    "module_name": "scripts.audit_bc_datasets",
    "path": "scripts/audit_bc_datasets.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Summarise behaviour cloning evaluation metrics.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 17,
        "name": "load_metrics",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "list[dict[str, float]]",
        "signature": "(path: Path) -> list[dict[str, float]]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 26,
        "name": "summarise",
        "params": [
          {
            "annotation": "list[dict[str, float]]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "metrics"
          }
        ],
        "return_type": "dict[str, float]",
        "signature": "(metrics: list[dict[str, float]]) -> dict[str, float]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 37,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib"
      ]
    },
    "lines": 52,
    "module_name": "scripts.bc_metrics_summary",
    "path": "scripts/bc_metrics_summary.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Simple benchmark to estimate average tick duration.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 12,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 20,
        "name": "benchmark",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config_path"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "ticks"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "enforce"
          }
        ],
        "return_type": "float",
        "signature": "(config_path: Path, ticks: int, enforce: bool) -> float"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 31,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "pathlib",
        "time"
      ]
    },
    "lines": 38,
    "module_name": "scripts.benchmark_tick",
    "path": "scripts/benchmark_tick.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "CLI to capture Townlet rollout trajectories into replay samples.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 19,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 59,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config.loader",
        "townlet.core.sim_loop",
        "townlet.policy.metrics",
        "townlet.policy.replay",
        "townlet.policy.scenario_utils"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "datetime",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 140,
    "module_name": "scripts.capture_rollout",
    "path": "scripts/capture_rollout.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Run rollout capture across a suite of configs.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 58,
        "name": "run_capture",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "ticks"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "output"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "auto_seed"
          },
          {
            "annotation": "str | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "agent_filter"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "compress"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "retries"
          }
        ],
        "return_type": "None",
        "signature": "(config: Path, ticks: int, output: Path, auto_seed: bool, agent_filter: str | None, compress: bool, retries: int) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 95,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "subprocess",
        "sys"
      ],
      "internal": [
        "townlet.config.loader"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "pathlib",
        "typing"
      ]
    },
    "lines": 112,
    "module_name": "scripts.capture_rollout_suite",
    "path": "scripts/capture_rollout_suite.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Capture scripted trajectories for behaviour cloning datasets.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 20,
        "name": "parse_args",
        "params": [
          {
            "annotation": "List[str] | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "argv"
          }
        ],
        "return_type": "argparse.Namespace",
        "signature": "(argv: List[str] | None = None) -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 35,
        "name": "_build_frame",
        "params": [
          {
            "annotation": "ScriptedPolicyAdapter",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "adapter"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "agent_id"
          },
          {
            "annotation": "Dict[str, np.ndarray]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "observation"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "reward"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "terminated"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "trajectory_id"
          }
        ],
        "return_type": "Dict[str, object]",
        "signature": "(adapter: ScriptedPolicyAdapter, agent_id: str, observation: Dict[str, np.ndarray], reward: float, terminated: bool, trajectory_id: str) -> Dict[str, object]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 65,
        "name": "main",
        "params": [
          {
            "annotation": "List[str] | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "argv"
          }
        ],
        "return_type": "None",
        "signature": "(argv: List[str] | None = None) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.policy.replay",
        "townlet.policy.scenario_utils",
        "townlet.policy.scripted"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "collections",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 131,
    "module_name": "scripts.capture_scripted",
    "path": "scripts/capture_scripted.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Employment console dry-run harness.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 15,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "tempfile"
      ],
      "internal": [
        "townlet.config",
        "townlet.console.handlers",
        "townlet.core.sim_loop",
        "townlet.snapshots",
        "townlet.snapshots.state",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 126,
    "module_name": "scripts.console_dry_run",
    "path": "scripts/console_dry_run.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "Path",
            "default": null,
            "name": "sample_path",
            "visibility": "public"
          },
          {
            "annotation": "Path",
            "default": null,
            "name": "meta_path",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, float]",
            "default": null,
            "name": "metrics",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": null,
            "name": "accepted",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "lineno": 17,
        "methods": [],
        "name": "EvaluationResult"
      }
    ],
    "constants": [],
    "docstring": "Filter and summarise behaviour-cloning trajectories.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 24,
        "name": "parse_args",
        "params": [
          {
            "annotation": "List[str] | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "argv"
          }
        ],
        "return_type": "argparse.Namespace",
        "signature": "(argv: List[str] | None = None) -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 33,
        "name": "_pair_files",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "directory"
          }
        ],
        "return_type": "Iterable[tuple[Path, Path]]",
        "signature": "(directory: Path) -> Iterable[tuple[Path, Path]]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 40,
        "name": "evaluate_sample",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "npz_path"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "json_path"
          }
        ],
        "return_type": "EvaluationResult",
        "signature": "(npz_path: Path, json_path: Path) -> EvaluationResult"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 57,
        "name": "curate",
        "params": [
          {
            "annotation": "EvaluationResult",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "result"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "keyword_only",
            "name": "min_timesteps"
          },
          {
            "annotation": "float | None",
            "default": null,
            "kind": "keyword_only",
            "name": "min_reward"
          }
        ],
        "return_type": "EvaluationResult",
        "signature": "(result: EvaluationResult, *, min_timesteps: int, min_reward: float | None) -> EvaluationResult"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 65,
        "name": "write_manifest",
        "params": [
          {
            "annotation": "Iterable[EvaluationResult]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "results"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "output"
          }
        ],
        "return_type": "None",
        "signature": "(results: Iterable[EvaluationResult], output: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 79,
        "name": "summarise",
        "params": [
          {
            "annotation": "Iterable[EvaluationResult]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "results"
          }
        ],
        "return_type": "Mapping[str, float]",
        "signature": "(results: Iterable[EvaluationResult]) -> Mapping[str, float]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 89,
        "name": "main",
        "params": [
          {
            "annotation": "List[str] | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "argv"
          }
        ],
        "return_type": "None",
        "signature": "(argv: List[str] | None = None) -> None"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.policy.replay"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "dataclasses",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 104,
    "module_name": "scripts.curate_trajectories",
    "path": "scripts/curate_trajectories.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "VALID_STAGES",
        "value": "{'OFF', 'C1', 'C2', 'C3'}"
      }
    ],
    "docstring": "Helper script to toggle Phase C social reward stages in configs.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 70,
        "name": "load_config",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "Dict[str, Any]",
        "signature": "(path: Path) -> Dict[str, Any]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 79,
        "name": "ensure_nested",
        "params": [
          {
            "annotation": "Dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "mapping"
          },
          {
            "annotation": "List[str]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "keys"
          }
        ],
        "return_type": "Dict[str, Any]",
        "signature": "(mapping: Dict[str, Any], keys: List[str]) -> Dict[str, Any]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 90,
        "name": "write_config",
        "params": [
          {
            "annotation": "Dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "data"
          },
          {
            "annotation": "Path | None",
            "default": null,
            "kind": "keyword_only",
            "name": "output"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "keyword_only",
            "name": "in_place"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "keyword_only",
            "name": "source"
          }
        ],
        "return_type": "None",
        "signature": "(data: Dict[str, Any], *, output: Path | None, in_place: bool, source: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 104,
        "name": "handle_set_stage",
        "params": [
          {
            "annotation": "argparse.Namespace",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "args"
          }
        ],
        "return_type": "None",
        "signature": "(args: argparse.Namespace) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 111,
        "name": "parse_schedule_entries",
        "params": [
          {
            "annotation": "List[str]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "entries"
          }
        ],
        "return_type": "List[Dict[str, Any]]",
        "signature": "(entries: List[str]) -> List[Dict[str, Any]]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 130,
        "name": "handle_schedule",
        "params": [
          {
            "annotation": "argparse.Namespace",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "args"
          }
        ],
        "return_type": "None",
        "signature": "(args: argparse.Namespace) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 153,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "yaml"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "argparse",
        "pathlib",
        "typing"
      ]
    },
    "lines": 164,
    "module_name": "scripts.manage_phase_c",
    "path": "scripts/manage_phase_c.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "DEFAULT_GOLDEN_PATH",
        "value": "Path('docs/samples/rollout_scenario_stats.json')"
      },
      {
        "name": "METRICS_FILENAME",
        "value": "'rollout_sample_metrics.json'"
      }
    ],
    "docstring": "Merge captured rollout metrics into the golden stats JSON.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 12,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 55,
        "name": "_load_metrics_from_dir",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "scenario_dir"
          }
        ],
        "return_type": "dict[str, dict[str, float]] | None",
        "signature": "(scenario_dir: Path) -> dict[str, dict[str, float]] | None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 68,
        "name": "_collect_input_metrics",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "root"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "allow_template"
          }
        ],
        "return_type": "dict[str, dict[str, dict[str, float]]]",
        "signature": "(root: Path, allow_template: bool) -> dict[str, dict[str, dict[str, float]]]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 85,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib"
      ]
    },
    "lines": 132,
    "module_name": "scripts.merge_rollout_metrics",
    "path": "scripts/merge_rollout_metrics.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Launch the Townlet observer dashboard against a local simulation.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 46,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet_ui.dashboard"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "pathlib"
      ]
    },
    "lines": 62,
    "module_name": "scripts.observer_ui",
    "path": "scripts/observer_ui.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Quick-look plotting utility for PPO telemetry JSONL logs.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 33,
        "name": "load_entries",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "log_path"
          }
        ],
        "return_type": "list[dict[str, Any]]",
        "signature": "(log_path: Path) -> list[dict[str, Any]]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 48,
        "name": "summarise",
        "params": [
          {
            "annotation": "list[dict[str, Any]]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "entries"
          }
        ],
        "return_type": "None",
        "signature": "(entries: list[dict[str, Any]]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 57,
        "name": "plot",
        "params": [
          {
            "annotation": "list[dict[str, Any]]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "entries"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "show"
          },
          {
            "annotation": "Path | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "output"
          }
        ],
        "return_type": "None",
        "signature": "(entries: list[dict[str, Any]], show: bool, output: Path | None) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 93,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "matplotlib.pyplot"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 101,
    "module_name": "scripts.ppo_telemetry_plot",
    "path": "scripts/ppo_telemetry_plot.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Profile observation tensor dimensions for a given config.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 16,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 25,
        "name": "bootstrap_world",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config_path"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "agent_count"
          }
        ],
        "return_type": "tuple[WorldState, ObservationBuilder]",
        "signature": "(config_path: Path, agent_count: int) -> tuple[WorldState, ObservationBuilder]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 41,
        "name": "profile",
        "params": [
          {
            "annotation": "WorldState",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "world"
          },
          {
            "annotation": "ObservationBuilder",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "builder"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "ticks"
          }
        ],
        "return_type": "dict[str, object]",
        "signature": "(world: WorldState, builder: ObservationBuilder, ticks: int) -> dict[str, object]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 74,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config",
        "townlet.observations.builder",
        "townlet.world"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib",
        "statistics"
      ]
    },
    "lines": 86,
    "module_name": "scripts.profile_observation_tensor",
    "path": "scripts/profile_observation_tensor.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Run a scripted promotion/rollback drill and capture artefacts.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 16,
        "name": "_ensure_candidate_ready",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "loop"
          }
        ],
        "return_type": "None",
        "signature": "(loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 31,
        "name": "run_drill",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config_path"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "output_dir"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "checkpoint"
          }
        ],
        "return_type": "dict[str, Any]",
        "signature": "(config_path: Path, output_dir: Path, checkpoint: Path) -> dict[str, Any]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 80,
        "name": "main",
        "params": [
          {
            "annotation": "list[str] | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "argv"
          }
        ],
        "return_type": "int",
        "signature": "(argv: list[str] | None = None) -> int"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.console.handlers",
        "townlet.core.sim_loop"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 107,
    "module_name": "scripts.promotion_drill",
    "path": "scripts/promotion_drill.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "DEFAULT_INPUT_PATH",
        "value": "Path('artifacts/m7/anneal_results.json')"
      }
    ],
    "docstring": "Evaluate promotion readiness from anneal results payloads.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 15,
        "name": "parse_args",
        "params": [
          {
            "annotation": "list[str] | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "argv"
          }
        ],
        "return_type": "argparse.Namespace",
        "signature": "(argv: list[str] | None = None) -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 50,
        "name": "_load_payload",
        "params": [
          {
            "annotation": "Path | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "Dict[str, Any]",
        "signature": "(path: Path | None) -> Dict[str, Any]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 60,
        "name": "_derive_status",
        "params": [
          {
            "annotation": "List[Dict[str, Any]]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "results"
          }
        ],
        "return_type": "str",
        "signature": "(results: List[Dict[str, Any]]) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 75,
        "name": "_collect_reasons",
        "params": [
          {
            "annotation": "List[Dict[str, Any]]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "results"
          }
        ],
        "return_type": "List[str]",
        "signature": "(results: List[Dict[str, Any]]) -> List[str]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 91,
        "name": "evaluate",
        "params": [
          {
            "annotation": "Dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "payload"
          }
        ],
        "return_type": "Dict[str, Any]",
        "signature": "(payload: Dict[str, Any]) -> Dict[str, Any]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 147,
        "name": "_print_human",
        "params": [
          {
            "annotation": "Dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "summary"
          }
        ],
        "return_type": "None",
        "signature": "(summary: Dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 167,
        "name": "main",
        "params": [
          {
            "annotation": "list[str] | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "argv"
          }
        ],
        "return_type": "int",
        "signature": "(argv: list[str] | None = None) -> int"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "sys"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 190,
    "module_name": "scripts.promotion_evaluate",
    "path": "scripts/promotion_evaluate.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "0",
            "name": "count",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "total",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "float('inf')",
            "name": "minimum",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "float('-inf')",
            "name": "maximum",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "lineno": 16,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 22,
            "name": "update",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "float",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "value"
              }
            ],
            "return_type": "None",
            "signature": "(self, value: float) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 30,
            "name": "mean",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "float",
            "signature": "(self) -> float"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 35,
            "name": "as_dict",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, float | int]",
            "signature": "(self) -> dict[str, float | int]"
          }
        ],
        "name": "ComponentStats"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Aggregate reward breakdowns from telemetry payloads.",
        "lineno": 46,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 49,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 58,
            "name": "add_payload",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "source"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: Mapping[str, object], source: str) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 85,
            "name": "summary",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          }
        ],
        "name": "RewardAggregator"
      }
    ],
    "constants": [],
    "docstring": "Summarise reward breakdown telemetry for operations teams.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 108,
        "name": "_is_number",
        "params": [
          {
            "annotation": "object",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          }
        ],
        "return_type": "bool",
        "signature": "(value: object) -> bool"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 112,
        "name": "iter_payloads",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "Iterator[tuple[Mapping[str, object], str]]",
        "signature": "(path: Path) -> Iterator[tuple[Mapping[str, object], str]]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 138,
        "name": "collect_statistics",
        "params": [
          {
            "annotation": "Sequence[Path]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "paths"
          }
        ],
        "return_type": "RewardAggregator",
        "signature": "(paths: Sequence[Path]) -> RewardAggregator"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 146,
        "name": "render_text",
        "params": [
          {
            "annotation": "Mapping[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "summary"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "keyword_only",
            "name": "top"
          },
          {
            "annotation": "set[str] | None",
            "default": null,
            "kind": "keyword_only",
            "name": "agent_filters"
          }
        ],
        "return_type": "str",
        "signature": "(summary: Mapping[str, object], *, top: int, agent_filters: set[str] | None) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 218,
        "name": "render_markdown",
        "params": [
          {
            "annotation": "Mapping[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "summary"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "keyword_only",
            "name": "top"
          },
          {
            "annotation": "set[str] | None",
            "default": null,
            "kind": "keyword_only",
            "name": "agent_filters"
          }
        ],
        "return_type": "str",
        "signature": "(summary: Mapping[str, object], *, top: int, agent_filters: set[str] | None) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 273,
        "name": "render_json",
        "params": [
          {
            "annotation": "Mapping[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "summary"
          }
        ],
        "return_type": "str",
        "signature": "(summary: Mapping[str, object]) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 277,
        "name": "parse_args",
        "params": [
          {
            "annotation": "Sequence[str] | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "argv"
          }
        ],
        "return_type": "argparse.Namespace",
        "signature": "(argv: Sequence[str] | None = None) -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 301,
        "name": "main",
        "params": [
          {
            "annotation": "Sequence[str] | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "argv"
          }
        ],
        "return_type": "int",
        "signature": "(argv: Sequence[str] | None = None) -> int"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "sys"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "argparse",
        "collections",
        "dataclasses",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 323,
    "module_name": "scripts.reward_summary",
    "path": "scripts/reward_summary.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "DEFAULT_CONFIG",
        "value": "Path('artifacts/m5/acceptance/config_idle_v1.yaml')"
      },
      {
        "name": "DEFAULT_MANIFEST",
        "value": "Path('data/bc_datasets/manifests/idle_v1.json')"
      },
      {
        "name": "DEFAULT_LOG_DIR",
        "value": "Path('artifacts/m5/acceptance/logs')"
      }
    ],
    "docstring": "Run BC + anneal rehearsal using production manifests and capture artefacts.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 20,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 49,
        "name": "run_rehearsal",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config_path"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "manifest_path"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "log_dir"
          }
        ],
        "return_type": "Dict[str, object]",
        "signature": "(config_path: Path, manifest_path: Path, log_dir: Path) -> Dict[str, object]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 76,
        "name": "evaluate_summary",
        "params": [
          {
            "annotation": "Dict[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "summary"
          }
        ],
        "return_type": "Dict[str, object]",
        "signature": "(summary: Dict[str, object]) -> Dict[str, object]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 100,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "importlib.util",
        "sys"
      ],
      "internal": [
        "scripts",
        "townlet.config",
        "townlet.policy.replay",
        "townlet.policy.runner"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 111,
    "module_name": "scripts.run_anneal_rehearsal",
    "path": "scripts/run_anneal_rehearsal.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Employment loop smoke test runner for R2 mitigation.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 36,
        "name": "run_smoke",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config_path"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "ticks"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "enforce"
          }
        ],
        "return_type": "Dict[str, Any]",
        "signature": "(config_path: Path, ticks: int, enforce: bool) -> Dict[str, Any]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 73,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 81,
    "module_name": "scripts.run_employment_smoke",
    "path": "scripts/run_employment_smoke.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "ROOT",
        "value": "Path(__file__).resolve().parents[1]"
      },
      {
        "name": "SRC",
        "value": "ROOT / 'src'"
      }
    ],
    "docstring": "Run alternating replay/rollout PPO cycles for soak testing.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 18,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 72,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "sys"
      ],
      "internal": [
        "townlet.config.loader",
        "townlet.policy.replay",
        "townlet.policy.runner"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "pathlib"
      ]
    },
    "lines": 110,
    "module_name": "scripts.run_mixed_soak",
    "path": "scripts/run_mixed_soak.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Utility to replay observation/telemetry samples for analysis or tutorials.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 14,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 41,
        "name": "render_observation",
        "params": [
          {
            "annotation": "Dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample"
          }
        ],
        "return_type": "None",
        "signature": "(sample: Dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 54,
        "name": "inspect_telemetry",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "None",
        "signature": "(path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 71,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.policy.replay"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 84,
    "module_name": "scripts.run_replay",
    "path": "scripts/run_replay.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Run a headless Townlet simulation loop for debugging.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 11,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 23,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config.loader",
        "townlet.core.sim_loop"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "pathlib"
      ]
    },
    "lines": 31,
    "module_name": "scripts.run_simulation",
    "path": "scripts/run_simulation.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "CLI entry point for training Townlet policies.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 14,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 224,
        "name": "_collect_ppo_overrides",
        "params": [
          {
            "annotation": "argparse.Namespace",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "args"
          }
        ],
        "return_type": "dict[str, object]",
        "signature": "(args: argparse.Namespace) -> dict[str, object]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 247,
        "name": "_apply_ppo_overrides",
        "params": [
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config"
          },
          {
            "annotation": "dict[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "overrides"
          }
        ],
        "return_type": "None",
        "signature": "(config, overrides: dict[str, object]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 253,
        "name": "_build_dataset_config_from_args",
        "params": [
          {
            "annotation": "argparse.Namespace",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "args"
          },
          {
            "annotation": "Path | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "default_manifest"
          }
        ],
        "return_type": "ReplayDatasetConfig | None",
        "signature": "(args: argparse.Namespace, default_manifest: Path | None) -> ReplayDatasetConfig | None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 279,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.config.loader",
        "townlet.policy.replay",
        "townlet.policy.runner"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib"
      ]
    },
    "lines": 466,
    "module_name": "scripts.run_training",
    "path": "scripts/run_training.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "SUPPORTED_SCHEMAS",
        "value": "{'0.2.0': {'employment_keys': {'pending', 'pending_count', 'exits_today', 'daily_exit_cap', 'queue_limit', 'review_window'}, 'job_required_keys': {'job_id', 'on_shift', 'wallet', 'shift_state', 'attendance_ratio', 'late_ticks_today', 'wages_withheld'}}}"
      }
    ],
    "docstring": "Validate Townlet telemetry payloads against known schema versions.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 32,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 43,
        "name": "load_payload",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "Dict[str, Any]",
        "signature": "(path: Path) -> Dict[str, Any]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 50,
        "name": "validate",
        "params": [
          {
            "annotation": "Dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "payload"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "schema_version"
          }
        ],
        "return_type": "None",
        "signature": "(payload: Dict[str, Any], schema_version: str) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 73,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 84,
    "module_name": "scripts.telemetry_check",
    "path": "scripts/telemetry_check.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Produce summaries for PPO telemetry logs.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 33,
        "name": "load_records",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "list[dict[str, object]]",
        "signature": "(path: Path) -> list[dict[str, object]]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 50,
        "name": "load_baseline",
        "params": [
          {
            "annotation": "Path | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "dict[str, float] | None",
        "signature": "(path: Path | None) -> dict[str, float] | None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 59,
        "name": "summarise",
        "params": [
          {
            "annotation": "Sequence[dict[str, object]]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "records"
          },
          {
            "annotation": "dict[str, float] | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "baseline"
          }
        ],
        "return_type": "dict[str, object]",
        "signature": "(records: Sequence[dict[str, object]], baseline: dict[str, float] | None) -> dict[str, object]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 183,
        "name": "_format_optional_float",
        "params": [
          {
            "annotation": "object",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "int",
            "default": "3",
            "kind": "positional_or_keyword",
            "name": "precision"
          }
        ],
        "return_type": "str",
        "signature": "(value: object, precision: int = 3) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 192,
        "name": "render_text",
        "params": [
          {
            "annotation": "dict[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "summary"
          }
        ],
        "return_type": "str",
        "signature": "(summary: dict[str, object]) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 263,
        "name": "render_markdown",
        "params": [
          {
            "annotation": "dict[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "summary"
          }
        ],
        "return_type": "str",
        "signature": "(summary: dict[str, object]) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 319,
        "name": "render",
        "params": [
          {
            "annotation": "dict[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "summary"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "fmt"
          }
        ],
        "return_type": "str",
        "signature": "(summary: dict[str, object], fmt: str) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 327,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 338,
    "module_name": "scripts.telemetry_summary",
    "path": "scripts/telemetry_summary.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "REQUIRED_KEYS",
        "value": "{'epoch', 'loss_total', 'kl_divergence', 'grad_norm', 'batch_entropy_mean', 'reward_advantage_corr', 'log_stream_offset', 'data_mode', 'queue_conflict_events', 'queue_conflict_intensity_sum', 'shared_meal_events', 'late_help_events', 'shift_takeover_events', 'chat_success_events', 'chat_failure_events', 'chat_quality_mean'}"
      },
      {
        "name": "OPTIONAL_NUMERIC_KEYS",
        "value": "{'anneal_cycle', 'anneal_bc_accuracy', 'anneal_bc_threshold', 'anneal_loss_baseline', 'anneal_queue_baseline', 'anneal_intensity_baseline'}"
      },
      {
        "name": "OPTIONAL_BOOL_KEYS",
        "value": "{'anneal_bc_passed', 'anneal_loss_flag', 'anneal_queue_flag', 'anneal_intensity_flag'}"
      },
      {
        "name": "OPTIONAL_TEXT_KEYS",
        "value": "{'anneal_stage', 'anneal_dataset'}"
      },
      {
        "name": "OPTIONAL_EVENT_KEYS",
        "value": "{'utility_outage_events', 'shower_complete_events', 'sleep_complete_events'}"
      }
    ],
    "docstring": "Tail PPO telemetry logs and alert on metric thresholds.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 58,
        "name": "build_parser",
        "params": [],
        "return_type": "argparse.ArgumentParser",
        "signature": "() -> argparse.ArgumentParser"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 184,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 188,
        "name": "parse_args_from_list",
        "params": [
          {
            "annotation": "list[str]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "argv"
          }
        ],
        "return_type": "argparse.Namespace",
        "signature": "(argv: list[str]) -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 192,
        "name": "stream_records",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "follow"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "interval"
          }
        ],
        "return_type": "Iterator[dict[str, float]]",
        "signature": "(path: Path, follow: bool, interval: float) -> Iterator[dict[str, float]]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 239,
        "name": "check_thresholds",
        "params": [
          {
            "annotation": "dict[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "record"
          },
          {
            "annotation": "argparse.Namespace",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "args"
          }
        ],
        "return_type": "None",
        "signature": "(record: dict[str, object], args: argparse.Namespace) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 343,
        "name": "main",
        "params": [
          {
            "annotation": "list[str] | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "args"
          }
        ],
        "return_type": "None",
        "signature": "(args: list[str] | None = None) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "sys"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "pathlib",
        "time",
        "typing"
      ]
    },
    "lines": 381,
    "module_name": "scripts.telemetry_watch",
    "path": "scripts/telemetry_watch.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "DEFAULT_SEARCH_ROOT",
        "value": "Path('configs/affordances')"
      }
    ],
    "docstring": "Validate affordance manifest files for schema compliance.\n\nThis CLI loads each supplied YAML manifest using the Townlet affordance manifest\nloader, reporting checksums and entry counts. Non-compliant manifests cause a\nnon-zero exit status so the script can run in CI.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 27,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 48,
        "name": "discover_manifests",
        "params": [
          {
            "annotation": "Iterable[str]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "inputs"
          }
        ],
        "return_type": "List[Path]",
        "signature": "(inputs: Iterable[str]) -> List[Path]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 74,
        "name": "validate_manifest",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "AffordanceManifest",
        "signature": "(path: Path) -> AffordanceManifest"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 93,
        "name": "main",
        "params": [],
        "return_type": "int",
        "signature": "() -> int"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "sys"
      ],
      "internal": [
        "townlet.config.affordance_manifest",
        "townlet.world.preconditions"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "pathlib",
        "typing"
      ]
    },
    "lines": 126,
    "module_name": "scripts.validate_affordances",
    "path": "scripts/validate_affordances.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "BASE_REQUIRED_KEYS",
        "value": "{'epoch', 'updates', 'transitions', 'loss_policy', 'loss_value', 'loss_entropy', 'loss_total', 'clip_fraction', 'clip_fraction_max', 'clip_triggered_minibatches', 'adv_mean', 'adv_std', 'adv_zero_std_batches', 'adv_min_std', 'grad_norm', 'kl_divergence', 'telemetry_version', 'lr', 'steps'}"
      },
      {
        "name": "CONFLICT_KEYS",
        "value": "{'conflict.rivalry_max_mean_avg', 'conflict.rivalry_max_max_avg', 'conflict.rivalry_avoid_count_mean_avg', 'conflict.rivalry_avoid_count_max_avg'}"
      },
      {
        "name": "BASELINE_KEYS",
        "value": "{'baseline_sample_count', 'baseline_reward_mean', 'baseline_reward_sum', 'baseline_reward_sum_mean'}"
      },
      {
        "name": "REQUIRED_V1_1_NUMERIC_KEYS",
        "value": "{'epoch_duration_sec', 'cycle_id', 'batch_entropy_mean', 'batch_entropy_std', 'grad_norm_max', 'kl_divergence_max', 'reward_advantage_corr', 'rollout_ticks', 'log_stream_offset', 'queue_conflict_events', 'queue_conflict_intensity_sum'}"
      },
      {
        "name": "REQUIRED_V1_1_STRING_KEYS",
        "value": "{'data_mode'}"
      }
    ],
    "docstring": "Validate PPO telemetry NDJSON logs and report baseline drift.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 47,
        "name": "parse_args",
        "params": [],
        "return_type": "argparse.Namespace",
        "signature": "() -> argparse.Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 69,
        "name": "_ensure_numeric",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "key"
          },
          {
            "annotation": "object",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          }
        ],
        "return_type": "None",
        "signature": "(key: str, value: object) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 74,
        "name": "_load_records",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "List[dict[str, object]]",
        "signature": "(path: Path) -> List[dict[str, object]]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 108,
        "name": "_validate_record",
        "params": [
          {
            "annotation": "dict[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "record"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "source"
          }
        ],
        "return_type": "None",
        "signature": "(record: dict[str, object], source: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 157,
        "name": "_load_baseline",
        "params": [
          {
            "annotation": "Path | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "dict[str, float] | None",
        "signature": "(path: Path | None) -> dict[str, float] | None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 174,
        "name": "_relative_delta",
        "params": [
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "delta"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_value"
          }
        ],
        "return_type": "float | None",
        "signature": "(delta: float, base_value: float) -> float | None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 180,
        "name": "_report_drift",
        "params": [
          {
            "annotation": "list[dict[str, object]]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "records"
          },
          {
            "annotation": "dict[str, float]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "baseline"
          },
          {
            "annotation": "float | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "threshold"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "include_relative"
          }
        ],
        "return_type": "None",
        "signature": "(records: list[dict[str, object]], baseline: dict[str, float], threshold: float | None, include_relative: bool) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 226,
        "name": "validate_logs",
        "params": [
          {
            "annotation": "Iterable[Path]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "paths"
          },
          {
            "annotation": "Path | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "baseline_path"
          },
          {
            "annotation": "float | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "drift_threshold"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "include_relative"
          }
        ],
        "return_type": "None",
        "signature": "(paths: Iterable[Path], baseline_path: Path | None, drift_threshold: float | None, include_relative: bool) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 242,
        "name": "main",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [],
      "stdlib": [
        "__future__",
        "argparse",
        "json",
        "math",
        "pathlib",
        "typing"
      ]
    },
    "lines": 248,
    "module_name": "scripts.validate_ppo_telemetry",
    "path": "scripts/validate_ppo_telemetry.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Townlet simulation package.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 9,
    "module_name": "townlet",
    "path": "src/townlet/__init__.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Agent state models.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.agents.models",
        "townlet.agents.relationship_modifiers"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 19,
    "module_name": "townlet.agents",
    "path": "src/townlet/agents/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "float",
            "default": null,
            "name": "extroversion",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "forgiveness",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "ambition",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "lineno": 9,
        "methods": [],
        "name": "Personality"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "other_id",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "trust",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "familiarity",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "rivalry",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "lineno": 16,
        "methods": [],
        "name": "RelationshipEdge"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "agent_id",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, float]",
            "default": null,
            "name": "needs",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "wallet",
            "visibility": "public"
          },
          {
            "annotation": "Personality",
            "default": null,
            "name": "personality",
            "visibility": "public"
          },
          {
            "annotation": "list[RelationshipEdge]",
            "default": "field(default_factory=list)",
            "name": "relationships",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Canonical agent state used across modules.",
        "lineno": 24,
        "methods": [],
        "name": "AgentState"
      }
    ],
    "constants": [],
    "docstring": "Agent-related dataclasses and helpers.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [],
      "stdlib": [
        "__future__",
        "dataclasses"
      ]
    },
    "lines": 31,
    "module_name": "townlet.agents.models",
    "path": "src/townlet/agents/models.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "float",
            "default": "0.0",
            "name": "trust",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "familiarity",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "rivalry",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": "Represents trust/familiarity/rivalry deltas for a single event.",
        "lineno": 23,
        "methods": [],
        "name": "RelationshipDelta"
      }
    ],
    "constants": [],
    "docstring": "Relationship delta adjustment helpers respecting personality flags.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Adjust ``delta`` based on personality traits when enabled.\n\nWhen ``enabled`` is ``False`` the input delta is returned unchanged so tests\ncan assert parity with the pre-personality behaviour. This hook allows the\nrelationship system to opt-in once the feature flag is flipped.",
        "is_async": false,
        "lineno": 31,
        "name": "apply_personality_modifiers",
        "params": [
          {
            "annotation": "RelationshipDelta",
            "default": null,
            "kind": "keyword_only",
            "name": "delta"
          },
          {
            "annotation": "Personality",
            "default": null,
            "kind": "keyword_only",
            "name": "personality"
          },
          {
            "annotation": "RelationshipEvent",
            "default": null,
            "kind": "keyword_only",
            "name": "event"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "keyword_only",
            "name": "enabled"
          }
        ],
        "return_type": "RelationshipDelta",
        "signature": "(*, delta: RelationshipDelta, personality: Personality, event: RelationshipEvent, enabled: bool) -> RelationshipDelta"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 68,
        "name": "_apply_forgiveness",
        "params": [
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "forgiveness"
          }
        ],
        "return_type": "float",
        "signature": "(value: float, forgiveness: float) -> float"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 79,
        "name": "_apply_extroversion",
        "params": [
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "extroversion"
          }
        ],
        "return_type": "float",
        "signature": "(value: float, extroversion: float) -> float"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 84,
        "name": "_apply_ambition",
        "params": [
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "ambition"
          }
        ],
        "return_type": "float",
        "signature": "(value: float, ambition: float) -> float"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 94,
        "name": "_clamp",
        "params": [
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "low"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "high"
          }
        ],
        "return_type": "float",
        "signature": "(value: float, low: float, high: float) -> float"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.agents.models"
      ],
      "stdlib": [
        "__future__",
        "dataclasses",
        "typing"
      ]
    },
    "lines": 102,
    "module_name": "townlet.agents.relationship_modifiers",
    "path": "src/townlet/agents/relationship_modifiers.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Config utilities for Townlet.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config.loader"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 97,
    "module_name": "townlet.config",
    "path": "src/townlet/config/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "object_id",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "object_type",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, int]",
            "default": null,
            "name": "stock",
            "visibility": "public"
          },
          {
            "annotation": "tuple[int, int] | None",
            "default": "None",
            "name": "position",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": "Represents an interactive object entry from the manifest.",
        "lineno": 17,
        "methods": [],
        "name": "ManifestObject"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "affordance_id",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "object_type",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "duration",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, float]",
            "default": null,
            "name": "effects",
            "visibility": "public"
          },
          {
            "annotation": "list[str]",
            "default": null,
            "name": "preconditions",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, list[str]]",
            "default": null,
            "name": "hooks",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": "Represents an affordance definition with preconditions and hooks.",
        "lineno": 27,
        "methods": [],
        "name": "ManifestAffordance"
      },
      {
        "attributes": [
          {
            "annotation": "Path",
            "default": null,
            "name": "path",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "checksum",
            "visibility": "public"
          },
          {
            "annotation": "list[ManifestObject]",
            "default": null,
            "name": "objects",
            "visibility": "public"
          },
          {
            "annotation": "list[ManifestAffordance]",
            "default": null,
            "name": "affordances",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": "Normalised manifest contents and checksum metadata.",
        "lineno": 39,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 48,
            "name": "object_count",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "int",
            "signature": "(self) -> int"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 52,
            "name": "affordance_count",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "int",
            "signature": "(self) -> int"
          }
        ],
        "name": "AffordanceManifest"
      },
      {
        "attributes": [],
        "bases": [
          "ValueError"
        ],
        "decorators": [],
        "docstring": "Raised when an affordance manifest fails validation.",
        "lineno": 56,
        "methods": [],
        "name": "AffordanceManifestError"
      }
    ],
    "constants": [
      {
        "name": "_ALLOWED_HOOK_KEYS",
        "value": "{'before', 'after', 'fail'}"
      }
    ],
    "docstring": "Utilities for validating affordance manifest files.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Load and validate an affordance manifest, returning structured entries.\n\nArgs:\n    path: Path to the YAML manifest file.\n\nRaises:\n    FileNotFoundError: If the manifest does not exist.\n    AffordanceManifestError: If schema validation or duplicate detection fails.",
        "is_async": false,
        "lineno": 63,
        "name": "load_affordance_manifest",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "AffordanceManifest",
        "signature": "(path: Path) -> AffordanceManifest"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 123,
        "name": "_parse_object_entry",
        "params": [
          {
            "annotation": "Mapping[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "entry"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "index"
          }
        ],
        "return_type": "ManifestObject",
        "signature": "(entry: Mapping[str, object], path: Path, index: int) -> ManifestObject"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 161,
        "name": "_parse_affordance_entry",
        "params": [
          {
            "annotation": "Mapping[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "entry"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "index"
          }
        ],
        "return_type": "ManifestAffordance",
        "signature": "(entry: Mapping[str, object], path: Path, index: int) -> ManifestAffordance"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 240,
        "name": "_parse_position",
        "params": [
          {
            "annotation": "object",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "keyword_only",
            "name": "path"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "keyword_only",
            "name": "index"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "keyword_only",
            "name": "entry_id"
          }
        ],
        "return_type": "tuple[int, int] | None",
        "signature": "(value: object, *, path: Path, index: int, entry_id: str) -> tuple[int, int] | None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 263,
        "name": "_parse_string_list",
        "params": [
          {
            "annotation": "object",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "keyword_only",
            "name": "field"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "keyword_only",
            "name": "path"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "keyword_only",
            "name": "index"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "keyword_only",
            "name": "entry_id"
          }
        ],
        "return_type": "list[str]",
        "signature": "(value: object, *, field: str, path: Path, index: int, entry_id: str) -> list[str]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 293,
        "name": "_require_string",
        "params": [
          {
            "annotation": "Mapping[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "entry"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "field"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "index"
          }
        ],
        "return_type": "str",
        "signature": "(entry: Mapping[str, object], field: str, path: Path, index: int) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 311,
        "name": "_ensure_unique",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "entry_id"
          },
          {
            "annotation": "set[str]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "seen"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "index"
          }
        ],
        "return_type": "None",
        "signature": "(entry_id: str, seen: set[str], path: Path, index: int) -> None"
      }
    ],
    "has_dataclasses": true,
    "has_logging": true,
    "has_type_hints": true,
    "imports": {
      "external": [
        "yaml"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "collections.abc",
        "dataclasses",
        "hashlib",
        "logging",
        "pathlib"
      ]
    },
    "lines": 316,
    "module_name": "townlet.config.affordance_manifest",
    "path": "src/townlet/config/affordance_manifest.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "RelationshipStage",
            "default": "'OFF'",
            "name": "relationships",
            "visibility": "public"
          },
          {
            "annotation": "SocialRewardStage",
            "default": "'OFF'",
            "name": "social_rewards",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 30,
        "methods": [],
        "name": "StageFlags"
      },
      {
        "attributes": [
          {
            "annotation": "LifecycleToggle",
            "default": "'on'",
            "name": "lifecycle",
            "visibility": "public"
          },
          {
            "annotation": "ObservationVariant",
            "default": "'hybrid'",
            "name": "observations",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 35,
        "methods": [],
        "name": "SystemFlags"
      },
      {
        "attributes": [
          {
            "annotation": "CuriosityToggle",
            "default": "'phase_A'",
            "name": "curiosity",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 40,
        "methods": [],
        "name": "TrainingFlags"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(15, ge=0, le=100000)",
            "name": "option_commit_ticks",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 44,
        "methods": [],
        "name": "PolicyRuntimeConfig"
      },
      {
        "attributes": [
          {
            "annotation": "ConsoleMode",
            "default": "'viewer'",
            "name": "mode",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 48,
        "methods": [],
        "name": "ConsoleFlags"
      },
      {
        "attributes": [
          {
            "annotation": "StageFlags",
            "default": null,
            "name": "stages",
            "visibility": "public"
          },
          {
            "annotation": "SystemFlags",
            "default": null,
            "name": "systems",
            "visibility": "public"
          },
          {
            "annotation": "TrainingFlags",
            "default": null,
            "name": "training",
            "visibility": "public"
          },
          {
            "annotation": "ConsoleFlags",
            "default": null,
            "name": "console",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "relationship_modifiers",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 52,
        "methods": [],
        "name": "FeatureFlags"
      },
      {
        "attributes": [
          {
            "annotation": "float",
            "default": "Field(1.0, ge=0.5, le=2.0)",
            "name": "hunger",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.6, ge=0.2, le=1.0)",
            "name": "hygiene",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.8, ge=0.4, le=1.5)",
            "name": "energy",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 60,
        "methods": [],
        "name": "NeedsWeights"
      },
      {
        "attributes": [
          {
            "annotation": "float",
            "default": "Field(0.01, ge=0.0, le=0.05)",
            "name": "C1_chat_base",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.3, ge=0.0, le=1.0)",
            "name": "C1_coeff_trust",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.2, ge=0.0, le=1.0)",
            "name": "C1_coeff_fam",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.005, ge=0.0, le=0.02)",
            "name": "C2_avoid_conflict",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 66,
        "methods": [],
        "name": "SocialRewardWeights"
      },
      {
        "attributes": [
          {
            "annotation": "float",
            "default": "Field(0.2, ge=0.01, le=1.0)",
            "name": "clip_per_tick",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(50, ge=1, le=200)",
            "name": "clip_per_episode",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(10, ge=0, le=200)",
            "name": "no_positive_within_death_ticks",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 73,
        "methods": [],
        "name": "RewardClips"
      },
      {
        "attributes": [
          {
            "annotation": "NeedsWeights",
            "default": null,
            "name": "needs_weights",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, float]",
            "default": "Field(default_factory=lambda: {'hunger': 0.01, 'hygiene': 0.005, 'energy': 0.008})",
            "name": "decay_rates",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.05, ge=0.0, le=0.1)",
            "name": "punctuality_bonus",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.01, ge=0.0, le=0.05)",
            "name": "wage_rate",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.002, ge=0.0, le=0.01)",
            "name": "survival_tick",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(-1.0, ge=-5.0, le=0.0)",
            "name": "faint_penalty",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(-2.0, ge=-5.0, le=0.0)",
            "name": "eviction_penalty",
            "visibility": "public"
          },
          {
            "annotation": "SocialRewardWeights",
            "default": "SocialRewardWeights()",
            "name": "social",
            "visibility": "public"
          },
          {
            "annotation": "RewardClips",
            "default": "RewardClips()",
            "name": "clip",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 79,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 97,
            "name": "_sanity_check_punctuality",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'RewardsConfig'",
            "signature": "(self) -> 'RewardsConfig'"
          }
        ],
        "name": "RewardsConfig"
      },
      {
        "attributes": [
          {
            "annotation": "bool",
            "default": "True",
            "name": "use_potential",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 105,
        "methods": [],
        "name": "ShapingConfig"
      },
      {
        "attributes": [
          {
            "annotation": "float",
            "default": "Field(0.02, ge=0.0, le=0.1)",
            "name": "phase_A_weight",
            "visibility": "public"
          },
          {
            "annotation": "Literal['M2', 'never']",
            "default": "'M2'",
            "name": "decay_by_milestone",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 109,
        "methods": [],
        "name": "CuriosityConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(60, ge=0, le=600)",
            "name": "cooldown_ticks",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(3, ge=0, le=100)",
            "name": "ghost_step_after",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.1, ge=0.0, le=1.0)",
            "name": "age_priority_weight",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": "Queue fairness tuning parameters (see REQUIREMENTS#5).",
        "lineno": 114,
        "methods": [],
        "name": "QueueFairnessConfig"
      },
      {
        "attributes": [
          {
            "annotation": "float",
            "default": "Field(0.15, ge=0.0, le=1.0)",
            "name": "increment_per_conflict",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.005, ge=0.0, le=1.0)",
            "name": "decay_per_tick",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.0, ge=0.0, le=1.0)",
            "name": "min_value",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(1.0, ge=0.0, le=1.0)",
            "name": "max_value",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.7, ge=0.0, le=1.0)",
            "name": "avoid_threshold",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.05, ge=0.0, le=1.0)",
            "name": "eviction_threshold",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(6, ge=1, le=32)",
            "name": "max_edges",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(1.5, ge=0.0, le=5.0)",
            "name": "ghost_step_boost",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.4, ge=0.0, le=5.0)",
            "name": "handover_boost",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.25, ge=0.0, le=2.0)",
            "name": "queue_length_boost",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": "Conflict/rivalry tuning knobs (see REQUIREMENTS#5).",
        "lineno": 122,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 137,
            "name": "_validate_ranges",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'RivalryConfig'",
            "signature": "(self) -> 'RivalryConfig'"
          }
        ],
        "name": "RivalryConfig"
      },
      {
        "attributes": [
          {
            "annotation": "RivalryConfig",
            "default": "RivalryConfig()",
            "name": "rivalry",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 147,
        "methods": [],
        "name": "ConflictConfig"
      },
      {
        "attributes": [
          {
            "annotation": "float",
            "default": "Field(0.0003, gt=0.0)",
            "name": "learning_rate",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.2, ge=0.0, le=1.0)",
            "name": "clip_param",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.5, ge=0.0)",
            "name": "value_loss_coef",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.01, ge=0.0)",
            "name": "entropy_coef",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(4, ge=1, le=64)",
            "name": "num_epochs",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(32, ge=1)",
            "name": "mini_batch_size",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.95, ge=0.0, le=1.0)",
            "name": "gae_lambda",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.99, ge=0.0, le=1.0)",
            "name": "gamma",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.5, ge=0.0)",
            "name": "max_grad_norm",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.2, ge=0.0, le=1.0)",
            "name": "value_clip",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "True",
            "name": "advantage_normalization",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(4, ge=1, le=1024)",
            "name": "num_mini_batches",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": "Config for PPO training hyperparameters.",
        "lineno": 151,
        "methods": [],
        "name": "PPOConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(2000, ge=0, le=10000)",
            "name": "cooldown_ticks",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.05, ge=0.0, le=0.5)",
            "name": "reuse_warning_threshold",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "True",
            "name": "log_forced_reuse",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(64, ge=1, le=256)",
            "name": "max_slots",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": "Embedding slot reuse guardrails (see REQUIREMENTS#3).",
        "lineno": 168,
        "methods": [],
        "name": "EmbeddingAllocatorConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(11, ge=3)",
            "name": "local_window",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "include_targets",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(1440, ge=1)",
            "name": "time_ticks_per_day",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 177,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 183,
            "name": "_validate_window",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'HybridObservationConfig'",
            "signature": "(self) -> 'HybridObservationConfig'"
          }
        ],
        "name": "HybridObservationConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(2, ge=0, le=8)",
            "name": "top_friends",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(2, ge=0, le=8)",
            "name": "top_rivals",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(8, ge=1, le=32)",
            "name": "embed_dim",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "True",
            "name": "include_aggregates",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 189,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 196,
            "name": "_validate_totals",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'SocialSnippetConfig'",
            "signature": "(self) -> 'SocialSnippetConfig'"
          }
        ],
        "name": "SocialSnippetConfig"
      },
      {
        "attributes": [
          {
            "annotation": "HybridObservationConfig",
            "default": "HybridObservationConfig()",
            "name": "hybrid",
            "visibility": "public"
          },
          {
            "annotation": "SocialSnippetConfig",
            "default": "SocialSnippetConfig()",
            "name": "social_snippet",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 204,
        "methods": [],
        "name": "ObservationsConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(1000, ge=1, le=100000)",
            "name": "window_ticks",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(0, ge=0, le=10000)",
            "name": "max_incidents",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.05, ge=0.0, le=1.0)",
            "name": "hunger_threshold",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(30, ge=1, le=10000)",
            "name": "min_duration_ticks",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 209,
        "methods": [],
        "name": "StarvationCanaryConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(1000, ge=1, le=100000)",
            "name": "window_ticks",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.25, ge=0.0)",
            "name": "max_variance",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(20, ge=1, le=100000)",
            "name": "min_samples",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 216,
        "methods": [],
        "name": "RewardVarianceCanaryConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(600, ge=1, le=100000)",
            "name": "window_ticks",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.25, ge=0.0, le=10.0)",
            "name": "max_switch_rate",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(10, ge=1, le=100000)",
            "name": "min_samples",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 222,
        "methods": [],
        "name": "OptionThrashCanaryConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(2, ge=1, le=10)",
            "name": "required_passes",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(1000, ge=1, le=100000)",
            "name": "window_ticks",
            "visibility": "public"
          },
          {
            "annotation": "tuple[str, ...]",
            "default": "()",
            "name": "allowed_alerts",
            "visibility": "public"
          },
          {
            "annotation": null,
            "default": "ConfigDict(extra='forbid')",
            "name": "model_config",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 228,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 236,
            "name": "_coerce_allowed",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cls"
              },
              {
                "annotation": "object",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "value"
              }
            ],
            "return_type": "object",
            "signature": "(cls, value: object) -> object"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 246,
            "name": "_normalise",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'PromotionGateConfig'",
            "signature": "(self) -> 'PromotionGateConfig'"
          }
        ],
        "name": "PromotionGateConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(0, ge=0, le=100000)",
            "name": "respawn_delay_ticks",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 251,
        "methods": [],
        "name": "LifecycleConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(5, ge=0, le=100)",
            "name": "affordance_fail_threshold",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(3, ge=0, le=100)",
            "name": "lateness_threshold",
            "visibility": "public"
          },
          {
            "annotation": "StarvationCanaryConfig",
            "default": "StarvationCanaryConfig()",
            "name": "starvation",
            "visibility": "public"
          },
          {
            "annotation": "RewardVarianceCanaryConfig",
            "default": "RewardVarianceCanaryConfig()",
            "name": "reward_variance",
            "visibility": "public"
          },
          {
            "annotation": "OptionThrashCanaryConfig",
            "default": "OptionThrashCanaryConfig()",
            "name": "option_thrash",
            "visibility": "public"
          },
          {
            "annotation": "PromotionGateConfig",
            "default": "PromotionGateConfig()",
            "name": "promotion",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 255,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 263,
            "name": "as_dict",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          }
        ],
        "name": "StabilityConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(ge=0)",
            "name": "min",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(ge=0)",
            "name": "max",
            "visibility": "public"
          },
          {
            "annotation": null,
            "default": "ConfigDict(extra='forbid')",
            "name": "model_config",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 274,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 281,
            "name": "_coerce",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cls"
              },
              {
                "annotation": "object",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "value"
              }
            ],
            "return_type": "dict[str, int]",
            "signature": "(cls, value: object) -> dict[str, int]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 297,
            "name": "_validate_bounds",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'IntRange'",
            "signature": "(self) -> 'IntRange'"
          }
        ],
        "name": "IntRange"
      },
      {
        "attributes": [
          {
            "annotation": "float",
            "default": null,
            "name": "min",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "max",
            "visibility": "public"
          },
          {
            "annotation": null,
            "default": "ConfigDict(extra='forbid')",
            "name": "model_config",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 303,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 310,
            "name": "_coerce",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cls"
              },
              {
                "annotation": "object",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "value"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(cls, value: object) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 326,
            "name": "_validate_bounds",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'FloatRange'",
            "signature": "(self) -> 'FloatRange'"
          }
        ],
        "name": "FloatRange"
      },
      {
        "attributes": [
          {
            "annotation": null,
            "default": "'price_spike'",
            "name": "PRICE_SPIKE",
            "visibility": "public"
          },
          {
            "annotation": null,
            "default": "'blackout'",
            "name": "BLACKOUT",
            "visibility": "public"
          },
          {
            "annotation": null,
            "default": "'outage'",
            "name": "OUTAGE",
            "visibility": "public"
          },
          {
            "annotation": null,
            "default": "'arranged_meet'",
            "name": "ARRANGED_MEET",
            "visibility": "public"
          }
        ],
        "bases": [
          "str",
          "Enum"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 332,
        "methods": [],
        "name": "PerturbationKind"
      },
      {
        "attributes": [
          {
            "annotation": "PerturbationKind",
            "default": null,
            "name": "kind",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.0, ge=0.0, alias='prob_per_day')",
            "name": "probability_per_day",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(0, ge=0)",
            "name": "cooldown_ticks",
            "visibility": "public"
          },
          {
            "annotation": "IntRange",
            "default": "Field(default_factory=lambda: IntRange(min=0, max=0))",
            "name": "duration",
            "visibility": "public"
          },
          {
            "annotation": null,
            "default": "ConfigDict(extra='forbid', populate_by_name=True)",
            "name": "model_config",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 339,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 348,
            "name": "_normalise_duration",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cls"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "values"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(cls, values: dict[str, object]) -> dict[str, object]"
          }
        ],
        "name": "BasePerturbationEventConfig"
      },
      {
        "attributes": [
          {
            "annotation": "Literal[PerturbationKind.PRICE_SPIKE]",
            "default": "PerturbationKind.PRICE_SPIKE",
            "name": "kind",
            "visibility": "public"
          },
          {
            "annotation": "FloatRange",
            "default": "Field(default_factory=lambda: FloatRange(min=1.0, max=1.0))",
            "name": "magnitude",
            "visibility": "public"
          },
          {
            "annotation": "list[str]",
            "default": "Field(default_factory=list)",
            "name": "targets",
            "visibility": "public"
          }
        ],
        "bases": [
          "BasePerturbationEventConfig"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 354,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 360,
            "name": "_normalise_magnitude",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cls"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "values"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(cls, values: dict[str, object]) -> dict[str, object]"
          }
        ],
        "name": "PriceSpikeEventConfig"
      },
      {
        "attributes": [
          {
            "annotation": "Literal[PerturbationKind.BLACKOUT]",
            "default": "PerturbationKind.BLACKOUT",
            "name": "kind",
            "visibility": "public"
          },
          {
            "annotation": "Literal['power']",
            "default": "'power'",
            "name": "utility",
            "visibility": "public"
          }
        ],
        "bases": [
          "BasePerturbationEventConfig"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 366,
        "methods": [],
        "name": "BlackoutEventConfig"
      },
      {
        "attributes": [
          {
            "annotation": "Literal[PerturbationKind.OUTAGE]",
            "default": "PerturbationKind.OUTAGE",
            "name": "kind",
            "visibility": "public"
          },
          {
            "annotation": "Literal['water']",
            "default": "'water'",
            "name": "utility",
            "visibility": "public"
          }
        ],
        "bases": [
          "BasePerturbationEventConfig"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 371,
        "methods": [],
        "name": "OutageEventConfig"
      },
      {
        "attributes": [
          {
            "annotation": "Literal[PerturbationKind.ARRANGED_MEET]",
            "default": "PerturbationKind.ARRANGED_MEET",
            "name": "kind",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": "Field(default='top_rivals')",
            "name": "target",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": "Field(default='cafe')",
            "name": "location",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(2, ge=2)",
            "name": "max_participants",
            "visibility": "public"
          }
        ],
        "bases": [
          "BasePerturbationEventConfig"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 376,
        "methods": [],
        "name": "ArrangedMeetEventConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(1, ge=1)",
            "name": "max_concurrent_events",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(0, ge=0)",
            "name": "global_cooldown_ticks",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(0, ge=0)",
            "name": "per_agent_cooldown_ticks",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(60, ge=0)",
            "name": "grace_window_ticks",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(1440, ge=1)",
            "name": "window_ticks",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(1, ge=0)",
            "name": "max_events_per_window",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, PerturbationEventConfig]",
            "default": "Field(default_factory=dict)",
            "name": "events",
            "visibility": "public"
          },
          {
            "annotation": null,
            "default": "ConfigDict(extra='allow', populate_by_name=True)",
            "name": "model_config",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 389,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 401,
            "name": "event_list",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[PerturbationEventConfig]",
            "signature": "(self) -> list[PerturbationEventConfig]"
          }
        ],
        "name": "PerturbationSchedulerConfig"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": "Field('configs/affordances/core.yaml')",
            "name": "affordances_file",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 405,
        "methods": [],
        "name": "AffordanceConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(5, ge=0, le=120)",
            "name": "grace_ticks",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(30, ge=0, le=600)",
            "name": "absent_cutoff",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(20, ge=0, le=600)",
            "name": "absence_slack",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.005, ge=0.0, le=1.0)",
            "name": "late_tick_penalty",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.2, ge=0.0, le=5.0)",
            "name": "absence_penalty",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(3, ge=0, le=20)",
            "name": "max_absent_shifts",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(3, ge=1, le=14)",
            "name": "attendance_window",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(2, ge=0, le=50)",
            "name": "daily_exit_cap",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(8, ge=0, le=100)",
            "name": "exit_queue_limit",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(1440, ge=1, le=100000)",
            "name": "exit_review_window",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "enforce_job_loop",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 409,
        "methods": [],
        "name": "EmploymentConfig"
      },
      {
        "attributes": [
          {
            "annotation": "float",
            "default": "Field(0.4, ge=0.0, le=1.0)",
            "name": "hunger_threshold",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.4, ge=0.0, le=1.0)",
            "name": "hygiene_threshold",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.4, ge=0.0, le=1.0)",
            "name": "energy_threshold",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(20, ge=0)",
            "name": "job_arrival_buffer",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 423,
        "methods": [],
        "name": "BehaviorConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(0, ge=0)",
            "name": "cycle",
            "visibility": "public"
          },
          {
            "annotation": "SocialRewardStage",
            "default": null,
            "name": "stage",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 430,
        "methods": [],
        "name": "SocialRewardScheduleEntry"
      },
      {
        "attributes": [
          {
            "annotation": "Path | None",
            "default": "None",
            "name": "manifest",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.001, gt=0.0)",
            "name": "learning_rate",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(64, ge=1)",
            "name": "batch_size",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(10, ge=1)",
            "name": "epochs",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.0, ge=0.0)",
            "name": "weight_decay",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": "'cpu'",
            "name": "device",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 435,
        "methods": [],
        "name": "BCTrainingSettings"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(0, ge=0)",
            "name": "cycle",
            "visibility": "public"
          },
          {
            "annotation": "Literal['bc', 'ppo']",
            "default": "'ppo'",
            "name": "mode",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(1, ge=1)",
            "name": "epochs",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(1.0, ge=0.0, le=1.0)",
            "name": "bc_weight",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 444,
        "methods": [],
        "name": "AnnealStage"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(30, ge=0, le=10000)",
            "name": "global_cooldown_ticks",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, int]",
            "default": "Field(default_factory=dict)",
            "name": "category_cooldown_ticks",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(20, ge=0, le=10000)",
            "name": "dedupe_window_ticks",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(600, ge=1, le=10000)",
            "name": "global_window_ticks",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(10, ge=1, le=1000)",
            "name": "global_window_limit",
            "visibility": "public"
          },
          {
            "annotation": "list[str]",
            "default": "Field(default_factory=list)",
            "name": "priority_categories",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 451,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 459,
            "name": "get_category_cooldown",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "category"
              }
            ],
            "return_type": "int",
            "signature": "(self, category: str) -> int"
          }
        ],
        "name": "NarrationThrottleConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(default=3, ge=0, le=10)",
            "name": "max_attempts",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(default=0.5, ge=0.0, le=30.0)",
            "name": "backoff_seconds",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 463,
        "methods": [],
        "name": "TelemetryRetryPolicy"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "Field(default=32, ge=1, le=500)",
            "name": "max_batch_size",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(default=256000, ge=1024, le=16777216)",
            "name": "max_buffer_bytes",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(default=1, ge=1, le=10000)",
            "name": "flush_interval_ticks",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 468,
        "methods": [],
        "name": "TelemetryBufferConfig"
      },
      {
        "attributes": [
          {
            "annotation": "TelemetryTransportType",
            "default": "'stdout'",
            "name": "type",
            "visibility": "public"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "name": "endpoint",
            "visibility": "public"
          },
          {
            "annotation": "Path | None",
            "default": "None",
            "name": "file_path",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(default=5.0, ge=0.0, le=60.0)",
            "name": "connect_timeout_seconds",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(default=1.0, ge=0.0, le=60.0)",
            "name": "send_timeout_seconds",
            "visibility": "public"
          },
          {
            "annotation": "TelemetryRetryPolicy",
            "default": "TelemetryRetryPolicy()",
            "name": "retry",
            "visibility": "public"
          },
          {
            "annotation": "TelemetryBufferConfig",
            "default": "TelemetryBufferConfig()",
            "name": "buffer",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 474,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 484,
            "name": "_validate_transport",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'TelemetryTransportConfig'",
            "signature": "(self) -> 'TelemetryTransportConfig'"
          }
        ],
        "name": "TelemetryTransportConfig"
      },
      {
        "attributes": [
          {
            "annotation": "NarrationThrottleConfig",
            "default": "NarrationThrottleConfig()",
            "name": "narration",
            "visibility": "public"
          },
          {
            "annotation": "TelemetryTransportConfig",
            "default": "TelemetryTransportConfig()",
            "name": "transport",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 512,
        "methods": [],
        "name": "TelemetryConfig"
      },
      {
        "attributes": [
          {
            "annotation": "Path",
            "default": "Field(default=Path('snapshots'))",
            "name": "root",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 517,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 521,
            "name": "_validate_root",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'SnapshotStorageConfig'",
            "signature": "(self) -> 'SnapshotStorageConfig'"
          }
        ],
        "name": "SnapshotStorageConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int | None",
            "default": "Field(default=None, ge=1)",
            "name": "cadence_ticks",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(default=3, ge=1, le=1000)",
            "name": "retain",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 527,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 532,
            "name": "_validate_cadence",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'SnapshotAutosaveConfig'",
            "signature": "(self) -> 'SnapshotAutosaveConfig'"
          }
        ],
        "name": "SnapshotAutosaveConfig"
      },
      {
        "attributes": [
          {
            "annotation": "str | None",
            "default": "None",
            "name": "policy_hash",
            "visibility": "public"
          },
          {
            "annotation": "Path | None",
            "default": "None",
            "name": "policy_artifact",
            "visibility": "public"
          },
          {
            "annotation": "ObservationVariant | Literal['infer']",
            "default": "'infer'",
            "name": "observation_variant",
            "visibility": "public"
          },
          {
            "annotation": "float | None",
            "default": "Field(default=None, ge=0.0, le=1.0)",
            "name": "anneal_ratio",
            "visibility": "public"
          },
          {
            "annotation": null,
            "default": "re.compile('^[0-9a-fA-F]{40}$')",
            "name": "_HEX40",
            "visibility": "private"
          },
          {
            "annotation": null,
            "default": "re.compile('^[0-9a-fA-F]{64}$')",
            "name": "_HEX64",
            "visibility": "private"
          },
          {
            "annotation": null,
            "default": "re.compile('^[A-Za-z0-9+/=]{32,88}$')",
            "name": "_BASE64",
            "visibility": "private"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 540,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 551,
            "name": "_validate_policy_hash",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'SnapshotIdentityConfig'",
            "signature": "(self) -> 'SnapshotIdentityConfig'"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 569,
            "name": "_validate_variant",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'SnapshotIdentityConfig'",
            "signature": "(self) -> 'SnapshotIdentityConfig'"
          }
        ],
        "name": "SnapshotIdentityConfig"
      },
      {
        "attributes": [
          {
            "annotation": "dict[str, str]",
            "default": "Field(default_factory=dict)",
            "name": "handlers",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "auto_apply",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "allow_minor",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 581,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 587,
            "name": "_validate_handlers",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'SnapshotMigrationsConfig'",
            "signature": "(self) -> 'SnapshotMigrationsConfig'"
          }
        ],
        "name": "SnapshotMigrationsConfig"
      },
      {
        "attributes": [
          {
            "annotation": "bool",
            "default": "True",
            "name": "require_exact_config",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "allow_downgrade",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 596,
        "methods": [],
        "name": "SnapshotGuardrailsConfig"
      },
      {
        "attributes": [
          {
            "annotation": "SnapshotStorageConfig",
            "default": "SnapshotStorageConfig()",
            "name": "storage",
            "visibility": "public"
          },
          {
            "annotation": "SnapshotAutosaveConfig",
            "default": "SnapshotAutosaveConfig()",
            "name": "autosave",
            "visibility": "public"
          },
          {
            "annotation": "SnapshotIdentityConfig",
            "default": "SnapshotIdentityConfig()",
            "name": "identity",
            "visibility": "public"
          },
          {
            "annotation": "SnapshotMigrationsConfig",
            "default": "SnapshotMigrationsConfig()",
            "name": "migrations",
            "visibility": "public"
          },
          {
            "annotation": "SnapshotGuardrailsConfig",
            "default": "SnapshotGuardrailsConfig()",
            "name": "guardrails",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 601,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 609,
            "name": "_validate_observation_override",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'SnapshotConfig'",
            "signature": "(self) -> 'SnapshotConfig'"
          }
        ],
        "name": "SnapshotConfig"
      },
      {
        "attributes": [
          {
            "annotation": "TrainingSource",
            "default": "'replay'",
            "name": "source",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "Field(100, ge=0)",
            "name": "rollout_ticks",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "rollout_auto_seed_agents",
            "visibility": "public"
          },
          {
            "annotation": "Path | None",
            "default": "None",
            "name": "replay_manifest",
            "visibility": "public"
          },
          {
            "annotation": "SocialRewardStage | None",
            "default": "None",
            "name": "social_reward_stage_override",
            "visibility": "public"
          },
          {
            "annotation": "list['SocialRewardScheduleEntry']",
            "default": "Field(default_factory=list)",
            "name": "social_reward_schedule",
            "visibility": "public"
          },
          {
            "annotation": "BCTrainingSettings",
            "default": "BCTrainingSettings()",
            "name": "bc",
            "visibility": "public"
          },
          {
            "annotation": "list[AnnealStage]",
            "default": "Field(default_factory=list)",
            "name": "anneal_schedule",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "Field(0.9, ge=0.0, le=1.0)",
            "name": "anneal_accuracy_threshold",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "anneal_enable_policy_blend",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 621,
        "methods": [],
        "name": "TrainingConfig"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "0",
            "name": "start_tick",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "0",
            "name": "end_tick",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "wage_rate",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "lateness_penalty",
            "visibility": "public"
          },
          {
            "annotation": "tuple[int, int] | None",
            "default": "None",
            "name": "location",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 634,
        "methods": [],
        "name": "JobSpec"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "config_id",
            "visibility": "public"
          },
          {
            "annotation": "FeatureFlags",
            "default": null,
            "name": "features",
            "visibility": "public"
          },
          {
            "annotation": "RewardsConfig",
            "default": null,
            "name": "rewards",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, float]",
            "default": "Field(default_factory=lambda: {'meal_cost': 0.4, 'cook_energy_cost': 0.05, 'cook_hygiene_cost': 0.02, 'wage_income': 0.02, 'ingredients_cost': 0.15, 'stove_stock_replenish': 2})",
            "name": "economy",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, JobSpec]",
            "default": "Field(default_factory=lambda: {'grocer': JobSpec(start_tick=180, end_tick=360, wage_rate=0.02, lateness_penalty=0.1, location=(0, 0)), 'barista': JobSpec(start_tick=400, end_tick=560, wage_rate=0.025, lateness_penalty=0.12, location=(1, 0))})",
            "name": "jobs",
            "visibility": "public"
          },
          {
            "annotation": "ShapingConfig | None",
            "default": "None",
            "name": "shaping",
            "visibility": "public"
          },
          {
            "annotation": "CuriosityConfig | None",
            "default": "None",
            "name": "curiosity",
            "visibility": "public"
          },
          {
            "annotation": "QueueFairnessConfig",
            "default": "QueueFairnessConfig()",
            "name": "queue_fairness",
            "visibility": "public"
          },
          {
            "annotation": "ConflictConfig",
            "default": "ConflictConfig()",
            "name": "conflict",
            "visibility": "public"
          },
          {
            "annotation": "PPOConfig | None",
            "default": "None",
            "name": "ppo",
            "visibility": "public"
          },
          {
            "annotation": "TrainingConfig",
            "default": "TrainingConfig()",
            "name": "training",
            "visibility": "public"
          },
          {
            "annotation": "EmbeddingAllocatorConfig",
            "default": "EmbeddingAllocatorConfig()",
            "name": "embedding_allocator",
            "visibility": "public"
          },
          {
            "annotation": "ObservationsConfig",
            "default": "ObservationsConfig()",
            "name": "observations_config",
            "visibility": "public"
          },
          {
            "annotation": "AffordanceConfig",
            "default": "AffordanceConfig()",
            "name": "affordances",
            "visibility": "public"
          },
          {
            "annotation": "StabilityConfig",
            "default": "StabilityConfig()",
            "name": "stability",
            "visibility": "public"
          },
          {
            "annotation": "BehaviorConfig",
            "default": "BehaviorConfig()",
            "name": "behavior",
            "visibility": "public"
          },
          {
            "annotation": "PolicyRuntimeConfig",
            "default": "PolicyRuntimeConfig()",
            "name": "policy_runtime",
            "visibility": "public"
          },
          {
            "annotation": "EmploymentConfig",
            "default": "EmploymentConfig()",
            "name": "employment",
            "visibility": "public"
          },
          {
            "annotation": "TelemetryConfig",
            "default": "TelemetryConfig()",
            "name": "telemetry",
            "visibility": "public"
          },
          {
            "annotation": "SnapshotConfig",
            "default": "SnapshotConfig()",
            "name": "snapshot",
            "visibility": "public"
          },
          {
            "annotation": "PerturbationSchedulerConfig",
            "default": "PerturbationSchedulerConfig()",
            "name": "perturbations",
            "visibility": "public"
          },
          {
            "annotation": "LifecycleConfig",
            "default": "LifecycleConfig()",
            "name": "lifecycle",
            "visibility": "public"
          },
          {
            "annotation": null,
            "default": "ConfigDict(extra='allow')",
            "name": "model_config",
            "visibility": "public"
          }
        ],
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 642,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 695,
            "name": "_validate_observation_variant",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'SimulationConfig'",
            "signature": "(self) -> 'SimulationConfig'"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 706,
            "name": "observation_variant",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "ObservationVariant",
            "signature": "(self) -> ObservationVariant"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 709,
            "name": "require_observation_variant",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ObservationVariant",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "expected"
              }
            ],
            "return_type": "None",
            "signature": "(self, expected: ObservationVariant) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 719,
            "name": "snapshot_root",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "Path",
            "signature": "(self) -> Path"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 723,
            "name": "build_snapshot_identity",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str | None",
                "default": null,
                "kind": "keyword_only",
                "name": "policy_hash"
              },
              {
                "annotation": "ObservationVariant | None",
                "default": null,
                "kind": "keyword_only",
                "name": "runtime_observation_variant"
              },
              {
                "annotation": "float | None",
                "default": null,
                "kind": "keyword_only",
                "name": "runtime_anneal_ratio"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self, *, policy_hash: str | None, runtime_observation_variant: ObservationVariant | None, runtime_anneal_ratio: float | None) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 756,
            "name": "register_snapshot_migrations",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          }
        ],
        "name": "SimulationConfig"
      }
    ],
    "constants": [],
    "docstring": "Configuration loader and validation layer.\n\nThis module reflects the expectations in docs/REQUIREMENTS.md#1 and related\nsections. It centralises config parsing, feature flag handling, and sanity\nchecks such as observation variant validation and reward guardrails.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Load and validate a Townlet YAML configuration file.",
        "is_async": false,
        "lineno": 783,
        "name": "load_config",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          }
        ],
        "return_type": "SimulationConfig",
        "signature": "(path: Path) -> SimulationConfig"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "importlib",
        "pydantic",
        "re",
        "yaml"
      ],
      "internal": [
        "townlet.snapshots"
      ],
      "stdlib": [
        "__future__",
        "collections.abc",
        "enum",
        "pathlib",
        "typing"
      ]
    },
    "lines": 793,
    "module_name": "townlet.config.loader",
    "path": "src/townlet/config/loader.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Console command handling exports.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 11,
        "name": "__getattr__",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "name"
          }
        ],
        "return_type": "Any",
        "signature": "(name: str) -> Any"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "importlib"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "typing"
      ]
    },
    "lines": 15,
    "module_name": "townlet.console",
    "path": "src/townlet/console/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [
          "RuntimeError"
        ],
        "decorators": [],
        "docstring": "Raised by handlers when a command should return an error response.",
        "lineno": 10,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 13,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "code"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "message"
              },
              {
                "annotation": "Mapping[str, Any] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "details"
              }
            ],
            "return_type": "None",
            "signature": "(self, code: str, message: str, *, details: Mapping[str, Any] | None = None) -> None"
          }
        ],
        "name": "ConsoleCommandError"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "name",
            "visibility": "public"
          },
          {
            "annotation": "list[Any]",
            "default": "field(default_factory=list)",
            "name": "args",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, Any]",
            "default": "field(default_factory=dict)",
            "name": "kwargs",
            "visibility": "public"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "name": "cmd_id",
            "visibility": "public"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "name": "issuer",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": "'viewer'",
            "name": "mode",
            "visibility": "public"
          },
          {
            "annotation": "int | None",
            "default": "None",
            "name": "timestamp_ms",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, Any]",
            "default": "field(default_factory=dict)",
            "name": "metadata",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, Any] | None",
            "default": "None",
            "name": "raw",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": "Normalised representation of an incoming console command payload.",
        "lineno": 21,
        "methods": [
          {
            "docstring": "Parse a payload emitted by the console transport.",
            "is_async": false,
            "lineno": 35,
            "name": "from_payload",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cls"
              },
              {
                "annotation": "object",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "'ConsoleCommandEnvelope'",
            "signature": "(cls, payload: object) -> 'ConsoleCommandEnvelope'"
          }
        ],
        "name": "ConsoleCommandEnvelope"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "name",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "status",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, Any] | None",
            "default": "None",
            "name": "result",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, Any] | None",
            "default": "None",
            "name": "error",
            "visibility": "public"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "name": "cmd_id",
            "visibility": "public"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "name": "issuer",
            "visibility": "public"
          },
          {
            "annotation": "int | None",
            "default": "None",
            "name": "tick",
            "visibility": "public"
          },
          {
            "annotation": "int | None",
            "default": "None",
            "name": "latency_ms",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Standard response emitted after processing a console command.",
        "lineno": 117,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 130,
            "name": "ok",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cls"
              },
              {
                "annotation": "ConsoleCommandEnvelope",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "envelope"
              },
              {
                "annotation": "Mapping[str, Any] | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "payload"
              },
              {
                "annotation": "int | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "tick"
              },
              {
                "annotation": "int | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "latency_ms"
              }
            ],
            "return_type": "'ConsoleCommandResult'",
            "signature": "(cls, envelope: ConsoleCommandEnvelope, payload: Mapping[str, Any] | None = None, *, tick: int | None = None, latency_ms: int | None = None) -> 'ConsoleCommandResult'"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 150,
            "name": "from_error",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cls"
              },
              {
                "annotation": "ConsoleCommandEnvelope",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "envelope"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "code"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "message"
              },
              {
                "annotation": "Mapping[str, Any] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "details"
              },
              {
                "annotation": "int | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "tick"
              },
              {
                "annotation": "int | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "latency_ms"
              }
            ],
            "return_type": "'ConsoleCommandResult'",
            "signature": "(cls, envelope: ConsoleCommandEnvelope, code: str, message: str, *, details: Mapping[str, Any] | None = None, tick: int | None = None, latency_ms: int | None = None) -> 'ConsoleCommandResult'"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 173,
            "name": "clone",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "'ConsoleCommandResult'",
            "signature": "(self) -> 'ConsoleCommandResult'"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 185,
            "name": "to_dict",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, Any]",
            "signature": "(self) -> dict[str, Any]"
          }
        ],
        "name": "ConsoleCommandResult"
      }
    ],
    "constants": [
      {
        "name": "_VALID_MODES",
        "value": "{'viewer', 'admin'}"
      }
    ],
    "docstring": "Console command envelope and result helpers.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [],
      "stdlib": [
        "__future__",
        "dataclasses",
        "typing"
      ]
    },
    "lines": 201,
    "module_name": "townlet.console.command",
    "path": "src/townlet/console/command.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "name",
            "visibility": "public"
          },
          {
            "annotation": "tuple[object, ...]",
            "default": null,
            "name": "args",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, object]",
            "default": null,
            "name": "kwargs",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Represents a parsed console command ready for execution.",
        "lineno": 26,
        "methods": [],
        "name": "ConsoleCommand"
      },
      {
        "attributes": [],
        "bases": [
          "Protocol"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 34,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 35,
            "name": "__call__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommand",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "command"
              }
            ],
            "return_type": "object",
            "signature": "(self, command: ConsoleCommand) -> object"
          }
        ],
        "name": "ConsoleHandler"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Routes validated commands to subsystem handlers.",
        "lineno": 38,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 41,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 44,
            "name": "register",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "name"
              },
              {
                "annotation": "ConsoleHandler",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "handler"
              }
            ],
            "return_type": "None",
            "signature": "(self, name: str, handler: ConsoleHandler) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 47,
            "name": "dispatch",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommand",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "command"
              }
            ],
            "return_type": "object",
            "signature": "(self, command: ConsoleCommand) -> object"
          }
        ],
        "name": "ConsoleRouter"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Simple subscriber that records the latest simulation events.",
        "lineno": 54,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 57,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 60,
            "name": "connect",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "TelemetryPublisher",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "publisher"
              }
            ],
            "return_type": "None",
            "signature": "(self, publisher: TelemetryPublisher) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 63,
            "name": "_record",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "list[dict[str, object]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "events"
              }
            ],
            "return_type": "None",
            "signature": "(self, events: list[dict[str, object]]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 66,
            "name": "latest",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[dict[str, object]]",
            "signature": "(self) -> list[dict[str, object]]"
          }
        ],
        "name": "EventStream"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Provides access to the latest telemetry snapshots for console consumers.",
        "lineno": 70,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 73,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "TelemetryPublisher",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "publisher"
              }
            ],
            "return_type": "None",
            "signature": "(self, publisher: TelemetryPublisher) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 76,
            "name": "snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, dict[str, object]]",
            "signature": "(self) -> dict[str, dict[str, object]]"
          }
        ],
        "name": "TelemetryBridge"
      }
    ],
    "constants": [
      {
        "name": "SUPPORTED_SCHEMA_PREFIX",
        "value": "'0.9'"
      },
      {
        "name": "SUPPORTED_SCHEMA_LABEL",
        "value": "f'{SUPPORTED_SCHEMA_PREFIX}.x'"
      }
    ],
    "docstring": "Console validation scaffolding.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 112,
        "name": "create_console_router",
        "params": [
          {
            "annotation": "TelemetryPublisher",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "publisher"
          },
          {
            "annotation": "WorldState | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "world"
          },
          {
            "annotation": "PerturbationScheduler | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "scheduler"
          },
          {
            "annotation": "PromotionManager | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "promotion"
          },
          {
            "annotation": "PolicyRuntime | None",
            "default": "None",
            "kind": "keyword_only",
            "name": "policy"
          },
          {
            "annotation": "str",
            "default": "'viewer'",
            "kind": "keyword_only",
            "name": "mode"
          },
          {
            "annotation": "SimulationConfig | None",
            "default": "None",
            "kind": "keyword_only",
            "name": "config"
          },
          {
            "annotation": "'LifecycleManager' | None",
            "default": "None",
            "kind": "keyword_only",
            "name": "lifecycle"
          }
        ],
        "return_type": "ConsoleRouter",
        "signature": "(publisher: TelemetryPublisher, world: WorldState | None = None, scheduler: PerturbationScheduler | None = None, promotion: PromotionManager | None = None, *, policy: PolicyRuntime | None = None, mode: str = 'viewer', config: SimulationConfig | None = None, lifecycle: 'LifecycleManager' | None = None) -> ConsoleRouter"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 870,
        "name": "_schema_metadata",
        "params": [
          {
            "annotation": "TelemetryPublisher",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "publisher"
          }
        ],
        "return_type": "tuple[str, str | None]",
        "signature": "(publisher: TelemetryPublisher) -> tuple[str, str | None]"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.lifecycle.manager",
        "townlet.policy.runner",
        "townlet.scheduler.perturbations",
        "townlet.snapshots",
        "townlet.stability.promotion",
        "townlet.telemetry.publisher",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "dataclasses",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 878,
    "module_name": "townlet.console.handlers",
    "path": "src/townlet/console/handlers.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Core orchestration utilities.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.core.sim_loop"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 7,
    "module_name": "townlet.core",
    "path": "src/townlet/core/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "dict[str, object]",
            "default": null,
            "name": "observations",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, float]",
            "default": null,
            "name": "rewards",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Collects per-tick data for logging and testing.",
        "lineno": 36,
        "methods": [],
        "name": "TickArtifacts"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Orchestrates the Townlet simulation tick-by-tick.",
        "lineno": 43,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 46,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 51,
            "name": "_build_components",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": "Reset the simulation loop to its initial state.",
            "is_async": false,
            "lineno": 74,
            "name": "reset",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 78,
            "name": "set_anneal_ratio",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "float | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "ratio"
              }
            ],
            "return_type": "None",
            "signature": "(self, ratio: float | None) -> None"
          },
          {
            "docstring": "Persist the current world relationships and tick to ``root``.",
            "is_async": false,
            "lineno": 84,
            "name": "save_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Path | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "root"
              }
            ],
            "return_type": "Path",
            "signature": "(self, root: Path | None = None) -> Path"
          },
          {
            "docstring": "Restore world relationships and tick from the snapshot at ``path``.",
            "is_async": false,
            "lineno": 112,
            "name": "load_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Path",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "path"
              }
            ],
            "return_type": "None",
            "signature": "(self, path: Path) -> None"
          },
          {
            "docstring": "Run the loop until `max_ticks` or indefinitely.",
            "is_async": false,
            "lineno": 157,
            "name": "run",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "max_ticks"
              }
            ],
            "return_type": "Iterable[TickArtifacts]",
            "signature": "(self, max_ticks: int | None = None) -> Iterable[TickArtifacts]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 163,
            "name": "step",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "TickArtifacts",
            "signature": "(self) -> TickArtifacts"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 240,
            "name": "_derive_seed",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "stream"
              }
            ],
            "return_type": "int",
            "signature": "(self, stream: str) -> int"
          }
        ],
        "name": "SimulationLoop"
      }
    ],
    "constants": [],
    "docstring": "Top-level simulation loop wiring.\n\nThe loop follows the order defined in docs/HIGH_LEVEL_DESIGN.md and delegates to\nfeature-specific subsystems. Each dependency is a thin fa\u00e7ade around the actual\nimplementation, allowing tests to substitute stubs while the real code evolves.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.lifecycle.manager",
        "townlet.observations.builder",
        "townlet.policy.runner",
        "townlet.rewards.engine",
        "townlet.scheduler.perturbations",
        "townlet.snapshots",
        "townlet.stability.monitor",
        "townlet.stability.promotion",
        "townlet.telemetry.publisher",
        "townlet.utils",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "collections.abc",
        "dataclasses",
        "hashlib",
        "pathlib",
        "random"
      ]
    },
    "lines": 242,
    "module_name": "townlet.core.sim_loop",
    "path": "src/townlet/core/sim_loop.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Lifecycle management utilities.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.lifecycle.manager"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 7,
    "module_name": "townlet.lifecycle",
    "path": "src/townlet/lifecycle/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "agent_id",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "scheduled_tick",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "name": "blueprint",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "lineno": 13,
        "methods": [],
        "name": "_RespawnTicket"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Centralises lifecycle checks as outlined in the conceptual design snapshot.",
        "lineno": 19,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 22,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig) -> None"
          },
          {
            "docstring": "Return a map of agent_id -> terminated flag.",
            "is_async": false,
            "lineno": 31,
            "name": "evaluate",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "dict[str, bool]",
            "signature": "(self, world: WorldState, tick: int) -> dict[str, bool]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 47,
            "name": "finalize",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              },
              {
                "annotation": "dict[str, bool]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "terminated"
              }
            ],
            "return_type": "None",
            "signature": "(self, world: WorldState, tick: int, terminated: dict[str, bool]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 68,
            "name": "process_respawns",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, world: WorldState, tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 79,
            "name": "set_respawn_delay",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "ticks"
              }
            ],
            "return_type": "None",
            "signature": "(self, ticks: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 83,
            "name": "set_mortality_enabled",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "bool",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "enabled"
              }
            ],
            "return_type": "None",
            "signature": "(self, enabled: bool) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 86,
            "name": "export_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, int]",
            "signature": "(self) -> dict[str, int]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 92,
            "name": "import_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: dict[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 96,
            "name": "reset_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": "Return termination reasons captured during the last evaluation.",
            "is_async": false,
            "lineno": 101,
            "name": "termination_reasons",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, str]",
            "signature": "(self) -> dict[str, str]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 105,
            "name": "_evaluate_employment",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "dict[str, bool]",
            "signature": "(self, world: WorldState, tick: int) -> dict[str, bool]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 141,
            "name": "_employment_execute_exit",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "reason"
              }
            ],
            "return_type": "bool",
            "signature": "(self, world: WorldState, agent_id: str, tick: int, *, reason: str) -> bool"
          }
        ],
        "name": "LifecycleManager"
      }
    ],
    "constants": [],
    "docstring": "Agent lifecycle enforcement (exits, spawns, cooldowns).",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "dataclasses",
        "typing"
      ]
    },
    "lines": 167,
    "module_name": "townlet.lifecycle.manager",
    "path": "src/townlet/lifecycle/manager.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Observation builders and utilities.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.observations.builder"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 7,
    "module_name": "townlet.observations",
    "path": "src/townlet/observations/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": null,
            "default": "('self', 'agents', 'objects', 'reservations')",
            "name": "MAP_CHANNELS",
            "visibility": "public"
          },
          {
            "annotation": null,
            "default": "('pre_shift', 'on_time', 'late', 'absent', 'post_shift')",
            "name": "SHIFT_STATES",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [],
        "docstring": "Constructs per-agent observation payloads.",
        "lineno": 18,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 24,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig) -> None"
          },
          {
            "docstring": "Return a mapping from agent_id to observation payloads.",
            "is_async": false,
            "lineno": 133,
            "name": "build_batch",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "'WorldState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "dict[str, bool]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "terminated"
              }
            ],
            "return_type": "dict[str, dict[str, np.ndarray]]",
            "signature": "(self, world: 'WorldState', terminated: dict[str, bool]) -> dict[str, dict[str, np.ndarray]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 152,
            "name": "_encode_common_features",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "np.ndarray",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "features"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "keyword_only",
                "name": "context"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "slot"
              },
              {
                "annotation": "'AgentSnapshot'",
                "default": null,
                "kind": "keyword_only",
                "name": "snapshot"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "world_tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, features: np.ndarray, *, context: dict[str, object], slot: int, snapshot: 'AgentSnapshot', world_tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 217,
            "name": "_encode_rivalry",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "np.ndarray",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "features"
              },
              {
                "annotation": "'WorldState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "'AgentSnapshot'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "None",
            "signature": "(self, features: np.ndarray, world: 'WorldState', snapshot: 'AgentSnapshot') -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 232,
            "name": "_encode_environmental_flags",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "np.ndarray",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "features"
              },
              {
                "annotation": "'WorldState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "'AgentSnapshot'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "None",
            "signature": "(self, features: np.ndarray, world: 'WorldState', snapshot: 'AgentSnapshot') -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 254,
            "name": "_encode_path_hint",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "np.ndarray",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "features"
              },
              {
                "annotation": "'WorldState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "'AgentSnapshot'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "None",
            "signature": "(self, features: np.ndarray, world: 'WorldState', snapshot: 'AgentSnapshot') -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 281,
            "name": "_build_single",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "'WorldState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "'AgentSnapshot'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "slot"
              }
            ],
            "return_type": "dict[str, np.ndarray | dict[str, object]]",
            "signature": "(self, world: 'WorldState', snapshot: 'AgentSnapshot', slot: int) -> dict[str, np.ndarray | dict[str, object]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 300,
            "name": "_map_from_view",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "tuple[str, ...]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "channels"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "local_view"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "window"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "center"
              },
              {
                "annotation": "'AgentSnapshot'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "np.ndarray",
            "signature": "(self, channels: tuple[str, ...], local_view: dict[str, object], window: int, center: int, snapshot: 'AgentSnapshot') -> np.ndarray"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 338,
            "name": "_build_hybrid",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "'WorldState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "'AgentSnapshot'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "slot"
              }
            ],
            "return_type": "dict[str, np.ndarray | dict[str, object]]",
            "signature": "(self, world: 'WorldState', snapshot: 'AgentSnapshot', slot: int) -> dict[str, np.ndarray | dict[str, object]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 391,
            "name": "_build_full",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "'WorldState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "'AgentSnapshot'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "slot"
              }
            ],
            "return_type": "dict[str, np.ndarray | dict[str, object]]",
            "signature": "(self, world: 'WorldState', snapshot: 'AgentSnapshot', slot: int) -> dict[str, np.ndarray | dict[str, object]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 444,
            "name": "_build_compact",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "'WorldState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "'AgentSnapshot'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "slot"
              }
            ],
            "return_type": "dict[str, np.ndarray | dict[str, object]]",
            "signature": "(self, world: 'WorldState', snapshot: 'AgentSnapshot', slot: int) -> dict[str, np.ndarray | dict[str, object]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 493,
            "name": "_build_social_vector",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "'WorldState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "'AgentSnapshot'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "np.ndarray",
            "signature": "(self, world: 'WorldState', snapshot: 'AgentSnapshot') -> np.ndarray"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 525,
            "name": "_collect_social_slots",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "'WorldState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "'AgentSnapshot'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "list[dict[str, float]]",
            "signature": "(self, world: 'WorldState', snapshot: 'AgentSnapshot') -> list[dict[str, float]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 564,
            "name": "_resolve_relationships",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "'WorldState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "list[dict[str, float]]",
            "signature": "(self, world: 'WorldState', agent_id: str) -> list[dict[str, float]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 606,
            "name": "_encode_landmarks",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "np.ndarray",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "features"
              },
              {
                "annotation": "'WorldState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "'AgentSnapshot'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "None",
            "signature": "(self, features: np.ndarray, world: 'WorldState', snapshot: 'AgentSnapshot') -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 630,
            "name": "_encode_relationship",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, float]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "entry"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self, entry: dict[str, float]) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 641,
            "name": "_empty_relationship_entry",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 650,
            "name": "_embed_agent_id",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              }
            ],
            "return_type": "np.ndarray",
            "signature": "(self, other_id: str) -> np.ndarray"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 658,
            "name": "_compute_aggregates",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Iterable[float]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "trust_values"
              },
              {
                "annotation": "Iterable[float]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "rivalry_values"
              }
            ],
            "return_type": "tuple[float, float, float, float]",
            "signature": "(self, trust_values: Iterable[float], rivalry_values: Iterable[float]) -> tuple[float, float, float, float]"
          }
        ],
        "name": "ObservationBuilder"
      }
    ],
    "constants": [],
    "docstring": "Observation encoding across variants.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "collections.abc",
        "hashlib",
        "math",
        "typing"
      ]
    },
    "lines": 669,
    "module_name": "townlet.observations.builder",
    "path": "src/townlet/observations/builder.py",
    "todos": [
      293
    ]
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "int | None",
            "default": "None",
            "name": "released_at_tick",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Tracks release metadata for a slot.",
        "lineno": 11,
        "methods": [],
        "name": "_SlotState"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Assigns stable embedding slots to agents with a reuse cooldown.",
        "lineno": 17,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 20,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig) -> None"
          },
          {
            "docstring": "Return the embedding slot for the agent, allocating if necessary.",
            "is_async": false,
            "lineno": 35,
            "name": "allocate",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "int",
            "signature": "(self, agent_id: str, tick: int) -> int"
          },
          {
            "docstring": "Release the slot held by the agent.",
            "is_async": false,
            "lineno": 49,
            "name": "release",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, agent_id: str, tick: int) -> None"
          },
          {
            "docstring": "Return whether the allocator still tracks the agent.",
            "is_async": false,
            "lineno": 57,
            "name": "has_assignment",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "bool",
            "signature": "(self, agent_id: str) -> bool"
          },
          {
            "docstring": "Expose allocation metrics for telemetry.",
            "is_async": false,
            "lineno": 61,
            "name": "metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self) -> dict[str, float]"
          },
          {
            "docstring": "Serialise allocator bookkeeping for snapshot persistence.",
            "is_async": false,
            "lineno": 74,
            "name": "export_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": "Restore allocator bookkeeping from snapshot data.",
            "is_async": false,
            "lineno": 86,
            "name": "import_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: dict[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 130,
            "name": "_select_slot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "tuple[int, bool]",
            "signature": "(self, tick: int) -> tuple[int, bool]"
          }
        ],
        "name": "EmbeddingAllocator"
      }
    ],
    "constants": [],
    "docstring": "Embedding slot allocation with cooldown logging.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config"
      ],
      "stdlib": [
        "__future__",
        "dataclasses"
      ]
    },
    "lines": 160,
    "module_name": "townlet.observations.embedding",
    "path": "src/townlet/observations/embedding.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Policy integration layer.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.policy.bc",
        "townlet.policy.runner"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 22,
    "module_name": "townlet.policy",
    "path": "src/townlet/policy/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "float",
            "default": "0.001",
            "name": "learning_rate",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "64",
            "name": "batch_size",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "5",
            "name": "epochs",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "weight_decay",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": "'cpu'",
            "name": "device",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "lineno": 32,
        "methods": [],
        "name": "BCTrainingConfig"
      },
      {
        "attributes": [
          {
            "annotation": "Path",
            "default": null,
            "name": "manifest",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "lineno": 41,
        "methods": [],
        "name": "BCDatasetConfig"
      },
      {
        "attributes": [],
        "bases": [
          "Dataset"
        ],
        "decorators": [],
        "docstring": "Torch dataset flattening replay samples for behaviour cloning.",
        "lineno": 45,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 48,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Sequence[ReplaySample]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "samples"
              }
            ],
            "return_type": "None",
            "signature": "(self, samples: Sequence[ReplaySample]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 73,
            "name": "__len__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "int",
            "signature": "(self) -> int"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 76,
            "name": "__getitem__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "index"
              }
            ],
            "return_type": null,
            "signature": "(self, index: int)"
          }
        ],
        "name": "BCTrajectoryDataset"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Lightweight supervised trainer for behaviour cloning.",
        "lineno": 121,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 124,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "BCTrainingConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              },
              {
                "annotation": "ConflictAwarePolicyConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "policy_config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: BCTrainingConfig, policy_config: ConflictAwarePolicyConfig) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 140,
            "name": "fit",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "BCTrajectoryDataset",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "dataset"
              }
            ],
            "return_type": "Mapping[str, float]",
            "signature": "(self, dataset: BCTrajectoryDataset) -> Mapping[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 158,
            "name": "evaluate",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "BCTrajectoryDataset",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "dataset"
              }
            ],
            "return_type": "Mapping[str, float]",
            "signature": "(self, dataset: BCTrajectoryDataset) -> Mapping[str, float]"
          }
        ],
        "name": "BCTrainer"
      }
    ],
    "constants": [],
    "docstring": "Behaviour cloning utilities.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 83,
        "name": "load_bc_samples",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "manifest_path"
          }
        ],
        "return_type": "list[ReplaySample]",
        "signature": "(manifest_path: Path) -> list[ReplaySample]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 176,
        "name": "evaluate_bc_policy",
        "params": [
          {
            "annotation": "ConflictAwarePolicyNetwork",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "model"
          },
          {
            "annotation": "BCTrajectoryDataset",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "dataset"
          },
          {
            "annotation": "str",
            "default": "'cpu'",
            "kind": "positional_or_keyword",
            "name": "device"
          }
        ],
        "return_type": "Mapping[str, float]",
        "signature": "(model: ConflictAwarePolicyNetwork, dataset: BCTrajectoryDataset, device: str = 'cpu') -> Mapping[str, float]"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy",
        "torch",
        "torch.utils.data"
      ],
      "internal": [
        "townlet.policy.models",
        "townlet.policy.replay"
      ],
      "stdlib": [
        "__future__",
        "collections.abc",
        "dataclasses",
        "json",
        "pathlib"
      ]
    },
    "lines": 201,
    "module_name": "townlet.policy.bc",
    "path": "src/townlet/policy/bc.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "kind",
            "visibility": "public"
          },
          {
            "annotation": "Optional[str]",
            "default": "None",
            "name": "object_id",
            "visibility": "public"
          },
          {
            "annotation": "Optional[str]",
            "default": "None",
            "name": "affordance_id",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "blocked",
            "visibility": "public"
          },
          {
            "annotation": "Optional[tuple[int, int]]",
            "default": "None",
            "name": "position",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Represents the next action an agent wishes to perform.",
        "lineno": 13,
        "methods": [],
        "name": "AgentIntent"
      },
      {
        "attributes": [],
        "bases": [
          "Protocol"
        ],
        "decorators": [],
        "docstring": "Defines the interface for agent decision logic.",
        "lineno": 23,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 26,
            "name": "decide",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "AgentIntent",
            "signature": "(self, world: WorldState, agent_id: str) -> AgentIntent"
          }
        ],
        "name": "BehaviorController"
      },
      {
        "attributes": [],
        "bases": [
          "BehaviorController"
        ],
        "decorators": [],
        "docstring": "Default no-op behavior that keeps agents idle.",
        "lineno": 29,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 32,
            "name": "decide",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "AgentIntent",
            "signature": "(self, world: WorldState, agent_id: str) -> AgentIntent"
          }
        ],
        "name": "IdleBehavior"
      },
      {
        "attributes": [],
        "bases": [
          "BehaviorController"
        ],
        "decorators": [],
        "docstring": "Simple rule-based controller used before RL policies are available.",
        "lineno": 36,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 39,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 44,
            "name": "decide",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "AgentIntent",
            "signature": "(self, world: WorldState, agent_id: str) -> AgentIntent"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 78,
            "name": "_cleanup_pending",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "None",
            "signature": "(self, world: WorldState, agent_id: str) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 91,
            "name": "_maybe_move_to_job",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "object",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "Optional[AgentIntent]",
            "signature": "(self, world: WorldState, agent_id: str, snapshot: object) -> Optional[AgentIntent]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 110,
            "name": "_satisfy_needs",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "object",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "Optional[AgentIntent]",
            "signature": "(self, world: WorldState, agent_id: str, snapshot: object) -> Optional[AgentIntent]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 139,
            "name": "_rivals_in_queue",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              }
            ],
            "return_type": "bool",
            "signature": "(self, world: WorldState, agent_id: str, object_id: str) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 157,
            "name": "_plan_meal",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "Optional[AgentIntent]",
            "signature": "(self, world: WorldState, agent_id: str) -> Optional[AgentIntent]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 186,
            "name": "_find_object_of_type",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_type"
              }
            ],
            "return_type": "Optional[str]",
            "signature": "(self, world: WorldState, object_type: str) -> Optional[str]"
          }
        ],
        "name": "ScriptedBehavior"
      }
    ],
    "constants": [],
    "docstring": "Behavior controller interfaces for scripted decision logic.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 195,
        "name": "build_behavior",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config"
          }
        ],
        "return_type": "BehaviorController",
        "signature": "(config: SimulationConfig) -> BehaviorController"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "dataclasses",
        "typing"
      ]
    },
    "lines": 196,
    "module_name": "townlet.policy.behavior",
    "path": "src/townlet/policy/behavior.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Utility helpers for replay and rollout metrics.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Compute summary metrics for a replay sample.",
        "is_async": false,
        "lineno": 13,
        "name": "compute_sample_metrics",
        "params": [
          {
            "annotation": "ReplaySample",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample"
          }
        ],
        "return_type": "dict[str, float]",
        "signature": "(sample: ReplaySample) -> dict[str, float]"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.policy.replay"
      ],
      "stdlib": [
        "__future__",
        "json",
        "typing"
      ]
    },
    "lines": 108,
    "module_name": "townlet.policy.metrics",
    "path": "src/townlet/policy/metrics.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [
          "RuntimeError"
        ],
        "decorators": [],
        "docstring": "Raised when a Torch-dependent component is used without PyTorch.",
        "lineno": 20,
        "methods": [],
        "name": "TorchNotAvailableError"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": null,
            "name": "feature_dim",
            "visibility": "public"
          },
          {
            "annotation": "tuple[int, int, int]",
            "default": null,
            "name": "map_shape",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "action_dim",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "256",
            "name": "hidden_dim",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "lineno": 25,
        "methods": [],
        "name": "ConflictAwarePolicyConfig"
      }
    ],
    "constants": [],
    "docstring": "Torch-based policy/value networks for Townlet PPO.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Return True if PyTorch is available in the runtime.",
        "is_async": false,
        "lineno": 15,
        "name": "torch_available",
        "params": [],
        "return_type": "bool",
        "signature": "() -> bool"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "torch",
        "torch.nn"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "dataclasses"
      ]
    },
    "lines": 83,
    "module_name": "townlet.policy.models",
    "path": "src/townlet/policy/models.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "PPO utilities package.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.policy.ppo.utils"
      ],
      "stdlib": []
    },
    "lines": 19,
    "module_name": "townlet.policy.ppo",
    "path": "src/townlet/policy/ppo/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "torch.Tensor",
            "default": null,
            "name": "advantages",
            "visibility": "public"
          },
          {
            "annotation": "torch.Tensor",
            "default": null,
            "name": "returns",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Container for PPO advantage and return tensors.",
        "lineno": 11,
        "methods": [],
        "name": "AdvantageReturns"
      }
    ],
    "constants": [],
    "docstring": "Utility functions for PPO advantage and loss computation.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Compute Generalized Advantage Estimation (GAE).\n\nArgs:\n    rewards: Tensor shaped (batch, timesteps).\n    value_preds: Tensor shaped (batch, timesteps) or (batch, timesteps + 1).\n    dones: Tensor shaped (batch, timesteps) with 1.0 when episode terminates.\n    gamma: Discount factor.\n    gae_lambda: GAE smoothing coefficient.\n\nReturns:\n    AdvantageReturns with tensors shaped (batch, timesteps).",
        "is_async": false,
        "lineno": 18,
        "name": "compute_gae",
        "params": [
          {
            "annotation": "torch.Tensor",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "rewards"
          },
          {
            "annotation": "torch.Tensor",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value_preds"
          },
          {
            "annotation": "torch.Tensor",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "dones"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "gamma"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "gae_lambda"
          }
        ],
        "return_type": "AdvantageReturns",
        "signature": "(rewards: torch.Tensor, value_preds: torch.Tensor, dones: torch.Tensor, gamma: float, gae_lambda: float) -> AdvantageReturns"
      },
      {
        "docstring": "Normalize advantage estimates to zero mean/unit variance.",
        "is_async": false,
        "lineno": 72,
        "name": "normalize_advantages",
        "params": [
          {
            "annotation": "torch.Tensor",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "advantages"
          },
          {
            "annotation": "float",
            "default": "1e-08",
            "kind": "positional_or_keyword",
            "name": "eps"
          }
        ],
        "return_type": "torch.Tensor",
        "signature": "(advantages: torch.Tensor, eps: float = 1e-08) -> torch.Tensor"
      },
      {
        "docstring": "Extract baseline values aligned with each timestep from stored predictions.",
        "is_async": false,
        "lineno": 82,
        "name": "value_baseline_from_old_preds",
        "params": [
          {
            "annotation": "torch.Tensor",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value_preds"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "timesteps"
          }
        ],
        "return_type": "torch.Tensor",
        "signature": "(value_preds: torch.Tensor, timesteps: int) -> torch.Tensor"
      },
      {
        "docstring": "Compute the clipped value loss term.",
        "is_async": false,
        "lineno": 98,
        "name": "clipped_value_loss",
        "params": [
          {
            "annotation": "torch.Tensor",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "new_values"
          },
          {
            "annotation": "torch.Tensor",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "returns"
          },
          {
            "annotation": "torch.Tensor",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "old_values"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value_clip"
          }
        ],
        "return_type": "torch.Tensor",
        "signature": "(new_values: torch.Tensor, returns: torch.Tensor, old_values: torch.Tensor, value_clip: float) -> torch.Tensor"
      },
      {
        "docstring": "Compute PPO clipped policy loss and clip fraction.",
        "is_async": false,
        "lineno": 124,
        "name": "policy_surrogate",
        "params": [
          {
            "annotation": "torch.Tensor",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "new_log_probs"
          },
          {
            "annotation": "torch.Tensor",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "old_log_probs"
          },
          {
            "annotation": "torch.Tensor",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "advantages"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "clip_param"
          }
        ],
        "return_type": "tuple[torch.Tensor, torch.Tensor]",
        "signature": "(new_log_probs: torch.Tensor, old_log_probs: torch.Tensor, advantages: torch.Tensor, clip_param: float) -> tuple[torch.Tensor, torch.Tensor]"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "torch"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "dataclasses"
      ]
    },
    "lines": 140,
    "module_name": "townlet.policy.ppo.utils",
    "path": "src/townlet/policy/ppo/utils.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "map",
            "visibility": "public"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "features",
            "visibility": "public"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "actions",
            "visibility": "public"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "old_log_probs",
            "visibility": "public"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "value_preds",
            "visibility": "public"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "rewards",
            "visibility": "public"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "dones",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "name": "metadata",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Container for observation samples used in training replays.",
        "lineno": 20,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 32,
            "name": "__post_init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 91,
            "name": "feature_names",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "Optional[list[str]]",
            "signature": "(self) -> Optional[list[str]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 97,
            "name": "conflict_stats",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self) -> dict[str, float]"
          }
        ],
        "name": "ReplaySample"
      },
      {
        "attributes": [
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "maps",
            "visibility": "public"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "features",
            "visibility": "public"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "actions",
            "visibility": "public"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "old_log_probs",
            "visibility": "public"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "value_preds",
            "visibility": "public"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "rewards",
            "visibility": "public"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "name": "dones",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "name": "metadata",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Mini-batch representation composed from replay samples.",
        "lineno": 161,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 173,
            "name": "__post_init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 230,
            "name": "conflict_stats",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self) -> dict[str, float]"
          }
        ],
        "name": "ReplayBatch"
      },
      {
        "attributes": [
          {
            "annotation": "list[tuple[Path, Optional[Path]]]",
            "default": null,
            "name": "entries",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "1",
            "name": "batch_size",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "shuffle",
            "visibility": "public"
          },
          {
            "annotation": "Optional[int]",
            "default": "None",
            "name": "seed",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "drop_last",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "streaming",
            "visibility": "public"
          },
          {
            "annotation": "Optional[dict[str, dict[str, float]]]",
            "default": "None",
            "name": "metrics_map",
            "visibility": "public"
          },
          {
            "annotation": "Optional[str]",
            "default": "None",
            "name": "label",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Configuration for building replay datasets.",
        "lineno": 279,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 292,
            "name": "from_manifest",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cls"
              },
              {
                "annotation": "Path",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "manifest_path"
              },
              {
                "annotation": "int",
                "default": "1",
                "kind": "positional_or_keyword",
                "name": "batch_size"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "positional_or_keyword",
                "name": "shuffle"
              },
              {
                "annotation": "Optional[int]",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "seed"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "positional_or_keyword",
                "name": "drop_last"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "positional_or_keyword",
                "name": "streaming"
              }
            ],
            "return_type": "'ReplayDatasetConfig'",
            "signature": "(cls, manifest_path: Path, batch_size: int = 1, shuffle: bool = False, seed: Optional[int] = None, drop_last: bool = False, streaming: bool = False) -> 'ReplayDatasetConfig'"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 313,
            "name": "from_capture_dir",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cls"
              },
              {
                "annotation": "Path",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "capture_dir"
              },
              {
                "annotation": "int",
                "default": "1",
                "kind": "positional_or_keyword",
                "name": "batch_size"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "positional_or_keyword",
                "name": "shuffle"
              },
              {
                "annotation": "Optional[int]",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "seed"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "positional_or_keyword",
                "name": "drop_last"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "positional_or_keyword",
                "name": "streaming"
              }
            ],
            "return_type": "'ReplayDatasetConfig'",
            "signature": "(cls, capture_dir: Path, batch_size: int = 1, shuffle: bool = False, seed: Optional[int] = None, drop_last: bool = False, streaming: bool = False) -> 'ReplayDatasetConfig'"
          }
        ],
        "name": "ReplayDatasetConfig"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Iterable dataset producing conflict-aware replay batches.",
        "lineno": 407,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 410,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ReplayDatasetConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: ReplayDatasetConfig) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 447,
            "name": "_ensure_homogeneous",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Sequence[ReplaySample]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "samples"
              }
            ],
            "return_type": "None",
            "signature": "(self, samples: Sequence[ReplaySample]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 462,
            "name": "__len__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "int",
            "signature": "(self) -> int"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 469,
            "name": "__iter__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "Iterator[ReplayBatch]",
            "signature": "(self) -> Iterator[ReplayBatch]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 480,
            "name": "_fetch_sample",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "index"
              }
            ],
            "return_type": "ReplaySample",
            "signature": "(self, index: int) -> ReplaySample"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 512,
            "name": "_ensure_sample_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ReplaySample",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "sample"
              },
              {
                "annotation": "tuple[Path, Optional[Path]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "entry"
              }
            ],
            "return_type": "None",
            "signature": "(self, sample: ReplaySample, entry: tuple[Path, Optional[Path]]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 522,
            "name": "_aggregate_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self) -> dict[str, float]"
          }
        ],
        "name": "ReplayDataset"
      }
    ],
    "constants": [
      {
        "annotation": "tuple[str, ...]",
        "name": "REQUIRED_CONFLICT_FEATURES",
        "value": "('rivalry_max', 'rivalry_avoid_count')"
      },
      {
        "annotation": "tuple[str, ...]",
        "name": "STEP_ARRAY_FIELDS",
        "value": "('actions', 'old_log_probs', 'rewards', 'dones')"
      },
      {
        "annotation": "tuple[str, ...]",
        "name": "TRAINING_ARRAY_FIELDS",
        "value": "STEP_ARRAY_FIELDS + ('value_preds',)"
      }
    ],
    "docstring": "Utilities for replaying observation/telemetry samples.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 110,
        "name": "_ensure_conflict_features",
        "params": [
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "metadata"
          }
        ],
        "return_type": "None",
        "signature": "(metadata: dict[str, Any]) -> None"
      },
      {
        "docstring": "Load observation tensors and metadata for replay-driven training scaffolds.",
        "is_async": false,
        "lineno": 121,
        "name": "load_replay_sample",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample_path"
          },
          {
            "annotation": "Optional[Path]",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "meta_path"
          }
        ],
        "return_type": "ReplaySample",
        "signature": "(sample_path: Path, meta_path: Optional[Path] = None) -> ReplaySample"
      },
      {
        "docstring": "Stack multiple replay samples into a batch for training consumers.",
        "is_async": false,
        "lineno": 245,
        "name": "build_batch",
        "params": [
          {
            "annotation": "Sequence[ReplaySample]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "samples"
          }
        ],
        "return_type": "ReplayBatch",
        "signature": "(samples: Sequence[ReplaySample]) -> ReplayBatch"
      },
      {
        "docstring": "Resolve manifest path specs that may be absolute or repo-relative.",
        "is_async": false,
        "lineno": 346,
        "name": "_resolve_manifest_path",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path_spec"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base"
          }
        ],
        "return_type": "Path",
        "signature": "(path_spec: Path, base: Path) -> Path"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 363,
        "name": "_load_manifest",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "manifest_path"
          }
        ],
        "return_type": "list[tuple[Path, Optional[Path]]]",
        "signature": "(manifest_path: Path) -> list[tuple[Path, Optional[Path]]]"
      },
      {
        "docstring": "Convert collected trajectory frames into a replay sample.",
        "is_async": false,
        "lineno": 561,
        "name": "frames_to_replay_sample",
        "params": [
          {
            "annotation": "Sequence[dict[str, Any]]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "frames"
          }
        ],
        "return_type": "ReplaySample",
        "signature": "(frames: Sequence[dict[str, Any]]) -> ReplaySample"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy",
        "yaml"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "collections.abc",
        "dataclasses",
        "json",
        "pathlib",
        "typing"
      ]
    },
    "lines": 641,
    "module_name": "townlet.policy.replay",
    "path": "src/townlet/policy/replay.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "Sequence[ReplaySample]",
            "default": null,
            "name": "entries",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "1",
            "name": "batch_size",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "drop_last",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "0",
            "name": "rollout_ticks",
            "visibility": "public"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "name": "label",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "lineno": 12,
        "methods": [],
        "name": "InMemoryReplayDatasetConfig"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": null,
        "lineno": 20,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 21,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "InMemoryReplayDatasetConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: InMemoryReplayDatasetConfig) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 41,
            "name": "_validate_shapes",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 50,
            "name": "__iter__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "Iterator[ReplayBatch]",
            "signature": "(self) -> Iterator[ReplayBatch]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 57,
            "name": "__len__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "int",
            "signature": "(self) -> int"
          }
        ],
        "name": "InMemoryReplayDataset"
      }
    ],
    "constants": [],
    "docstring": "In-memory replay dataset used for rollout captures.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.policy.replay"
      ],
      "stdlib": [
        "__future__",
        "collections.abc",
        "dataclasses"
      ]
    },
    "lines": 62,
    "module_name": "townlet.policy.replay_buffer",
    "path": "src/townlet/policy/replay_buffer.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "agent_id",
            "visibility": "public"
          },
          {
            "annotation": "list[dict[str, object]]",
            "default": "field(default_factory=list)",
            "name": "frames",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "lineno": 21,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 25,
            "name": "append",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "frame"
              }
            ],
            "return_type": "None",
            "signature": "(self, frame: dict[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 28,
            "name": "to_replay_sample",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "ReplaySample",
            "signature": "(self) -> ReplaySample"
          }
        ],
        "name": "AgentRollout"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Collects trajectory frames and exposes helpers to save or replay them.",
        "lineno": 32,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 35,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 47,
            "name": "record_events",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Iterable[dict[str, object]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "events"
              }
            ],
            "return_type": "None",
            "signature": "(self, events: Iterable[dict[str, object]]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 73,
            "name": "extend",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Iterable[dict[str, object]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "frames"
              }
            ],
            "return_type": "None",
            "signature": "(self, frames: Iterable[dict[str, object]]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 77,
            "name": "__len__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "int",
            "signature": "(self) -> int"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 80,
            "name": "by_agent",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, AgentRollout]",
            "signature": "(self) -> dict[str, AgentRollout]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 87,
            "name": "to_samples",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, ReplaySample]",
            "signature": "(self) -> dict[str, ReplaySample]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 93,
            "name": "save",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Path",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "output_dir"
              },
              {
                "annotation": "str",
                "default": "'rollout_sample'",
                "kind": "positional_or_keyword",
                "name": "prefix"
              },
              {
                "annotation": "bool",
                "default": "True",
                "kind": "positional_or_keyword",
                "name": "compress"
              }
            ],
            "return_type": "None",
            "signature": "(self, output_dir: Path, prefix: str = 'rollout_sample', compress: bool = True) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 131,
            "name": "build_dataset",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": "1",
                "kind": "positional_or_keyword",
                "name": "batch_size"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "positional_or_keyword",
                "name": "drop_last"
              }
            ],
            "return_type": "InMemoryReplayDataset",
            "signature": "(self, batch_size: int = 1, drop_last: bool = False) -> InMemoryReplayDataset"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 167,
            "name": "is_empty",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "bool",
            "signature": "(self) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 170,
            "name": "set_tick_count",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "ticks"
              }
            ],
            "return_type": "None",
            "signature": "(self, ticks: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 173,
            "name": "_aggregate_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "list[ReplaySample]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "samples"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self, samples: list[ReplaySample]) -> dict[str, float]"
          }
        ],
        "name": "RolloutBuffer"
      }
    ],
    "constants": [],
    "docstring": "Rollout buffer scaffolding for future live PPO integration.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.policy.metrics",
        "townlet.policy.replay",
        "townlet.policy.replay_buffer"
      ],
      "stdlib": [
        "__future__",
        "collections.abc",
        "dataclasses",
        "json",
        "pathlib"
      ]
    },
    "lines": 206,
    "module_name": "townlet.policy.rollout",
    "path": "src/townlet/policy/rollout.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Bridges the simulation with PPO/backends via PettingZoo.",
        "lineno": 87,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 90,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 126,
            "name": "seed_anneal_rng",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "seed"
              }
            ],
            "return_type": "None",
            "signature": "(self, seed: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 129,
            "name": "set_anneal_ratio",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "float | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "ratio"
              }
            ],
            "return_type": "None",
            "signature": "(self, ratio: float | None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 135,
            "name": "enable_anneal_blend",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "bool",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "enabled"
              }
            ],
            "return_type": "None",
            "signature": "(self, enabled: bool) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 138,
            "name": "register_ctx_reset_callback",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Callable[[str], None] | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "callback"
              }
            ],
            "return_type": "None",
            "signature": "(self, callback: Callable[[str], None] | None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 141,
            "name": "set_policy_action_provider",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Callable[[WorldState, str, AgentIntent], AgentIntent | None]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "provider"
              }
            ],
            "return_type": "None",
            "signature": "(self, provider: Callable[[WorldState, str, AgentIntent], AgentIntent | None]) -> None"
          },
          {
            "docstring": "Return a primitive action per agent.",
            "is_async": false,
            "lineno": 146,
            "name": "decide",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self, world: WorldState, tick: int) -> dict[str, object]"
          },
          {
            "docstring": "Record rewards and termination signals into buffers.",
            "is_async": false,
            "lineno": 209,
            "name": "post_step",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, float]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "rewards"
              },
              {
                "annotation": "dict[str, bool]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "terminated"
              }
            ],
            "return_type": "None",
            "signature": "(self, rewards: dict[str, float], terminated: dict[str, bool]) -> None"
          },
          {
            "docstring": "Combine stored transition data with observations and return trajectory frames.",
            "is_async": false,
            "lineno": 226,
            "name": "flush_transitions",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, dict[str, object]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "observations"
              }
            ],
            "return_type": "list[dict[str, object]]",
            "signature": "(self, observations: dict[str, dict[str, object]]) -> list[dict[str, object]]"
          },
          {
            "docstring": "Return accumulated trajectory frames and reset internal buffer.",
            "is_async": false,
            "lineno": 256,
            "name": "collect_trajectory",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "bool",
                "default": "True",
                "kind": "positional_or_keyword",
                "name": "clear"
              }
            ],
            "return_type": "list[dict[str, object]]",
            "signature": "(self, clear: bool = True) -> list[dict[str, object]]"
          },
          {
            "docstring": "Return per-agent option switch counts accumulated since last call.",
            "is_async": false,
            "lineno": 263,
            "name": "consume_option_switch_counts",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, int]",
            "signature": "(self) -> dict[str, int]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 270,
            "name": "acquire_possession",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "bool",
            "signature": "(self, agent_id: str) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 280,
            "name": "release_possession",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "bool",
            "signature": "(self, agent_id: str) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 286,
            "name": "is_possessed",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "bool",
            "signature": "(self, agent_id: str) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 289,
            "name": "possessed_agents",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[str]",
            "signature": "(self) -> list[str]"
          },
          {
            "docstring": "Reset transient buffers so snapshot loads don\u2019t duplicate data.",
            "is_async": false,
            "lineno": 292,
            "name": "reset_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 302,
            "name": "_select_intent_with_blend",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "AgentIntent",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "scripted"
              }
            ],
            "return_type": "AgentIntent",
            "signature": "(self, world: WorldState, agent_id: str, scripted: AgentIntent) -> AgentIntent"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 328,
            "name": "_clone_intent",
            "params": [
              {
                "annotation": "AgentIntent",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "intent"
              }
            ],
            "return_type": "AgentIntent",
            "signature": "(intent: AgentIntent) -> AgentIntent"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 338,
            "name": "_intents_match",
            "params": [
              {
                "annotation": "AgentIntent",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "lhs"
              },
              {
                "annotation": "AgentIntent",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "rhs"
              }
            ],
            "return_type": "bool",
            "signature": "(lhs: AgentIntent, rhs: AgentIntent) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 347,
            "name": "_enforce_option_commit",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              },
              {
                "annotation": "AgentIntent",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "intent"
              }
            ],
            "return_type": "tuple[AgentIntent, bool]",
            "signature": "(self, agent_id: str, tick: int, intent: AgentIntent) -> tuple[AgentIntent, bool]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 369,
            "name": "_annotate_with_policy_outputs",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "frame"
              }
            ],
            "return_type": "None",
            "signature": "(self, frame: dict[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 415,
            "name": "_update_policy_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "list[dict[str, object]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "frames"
              }
            ],
            "return_type": "None",
            "signature": "(self, frames: list[dict[str, object]]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 454,
            "name": "latest_policy_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, dict[str, object]]",
            "signature": "(self) -> dict[str, dict[str, object]]"
          },
          {
            "docstring": "Return the configured policy hash, if any.",
            "is_async": false,
            "lineno": 461,
            "name": "active_policy_hash",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "str | None",
            "signature": "(self) -> str | None"
          },
          {
            "docstring": "Set the policy hash after loading a checkpoint.",
            "is_async": false,
            "lineno": 466,
            "name": "set_policy_hash",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "value"
              }
            ],
            "return_type": "None",
            "signature": "(self, value: str | None) -> None"
          },
          {
            "docstring": "Return the latest anneal ratio (0..1) if tracking available.",
            "is_async": false,
            "lineno": 471,
            "name": "current_anneal_ratio",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "float | None",
            "signature": "(self) -> float | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 476,
            "name": "set_anneal_ratio",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "float | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "ratio"
              }
            ],
            "return_type": "None",
            "signature": "(self, ratio: float | None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 483,
            "name": "_ensure_policy_network",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "tuple[int, int, int]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "map_shape"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "feature_dim"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "action_dim"
              }
            ],
            "return_type": "bool",
            "signature": "(self, map_shape: tuple[int, int, int], feature_dim: int, action_dim: int) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 520,
            "name": "_build_policy_network",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "feature_dim"
              },
              {
                "annotation": "tuple[int, int, int]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "map_shape"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "action_dim"
              }
            ],
            "return_type": "ConflictAwarePolicyNetwork",
            "signature": "(self, feature_dim: int, map_shape: tuple[int, int, int], action_dim: int) -> ConflictAwarePolicyNetwork"
          }
        ],
        "name": "PolicyRuntime"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Coordinates RL training sessions.",
        "lineno": 534,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 537,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig) -> None"
          },
          {
            "docstring": "Entry point for CLI training runs based on config.training.source.",
            "is_async": false,
            "lineno": 550,
            "name": "run",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 564,
            "name": "current_anneal_ratio",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "float | None",
            "signature": "(self) -> float | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 567,
            "name": "set_anneal_ratio",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "float | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "ratio"
              }
            ],
            "return_type": "None",
            "signature": "(self, ratio: float | None) -> None"
          },
          {
            "docstring": "Load a replay observation sample and surface conflict-aware stats.",
            "is_async": false,
            "lineno": 574,
            "name": "run_replay",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Path",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "sample_path"
              },
              {
                "annotation": "Path | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "meta_path"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self, sample_path: Path, meta_path: Path | None = None) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 582,
            "name": "run_replay_batch",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Iterable[tuple[Path, Path | None]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "pairs"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self, pairs: Iterable[tuple[Path, Path | None]]) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 589,
            "name": "run_replay_dataset",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ReplayDatasetConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "dataset_config"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self, dataset_config: ReplayDatasetConfig) -> dict[str, float]"
          },
          {
            "docstring": "Run the simulation loop for a fixed number of ticks and collect frames.",
            "is_async": false,
            "lineno": 599,
            "name": "capture_rollout",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "ticks"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "positional_or_keyword",
                "name": "auto_seed_agents"
              },
              {
                "annotation": "Path | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "output_dir"
              },
              {
                "annotation": "str",
                "default": "'rollout_sample'",
                "kind": "positional_or_keyword",
                "name": "prefix"
              },
              {
                "annotation": "bool",
                "default": "True",
                "kind": "positional_or_keyword",
                "name": "compress"
              }
            ],
            "return_type": "RolloutBuffer",
            "signature": "(self, ticks: int, auto_seed_agents: bool = False, output_dir: Path | None = None, prefix: str = 'rollout_sample', compress: bool = True) -> RolloutBuffer"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 649,
            "name": "run_rollout_ppo",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "ticks"
              },
              {
                "annotation": "int",
                "default": "1",
                "kind": "positional_or_keyword",
                "name": "batch_size"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "positional_or_keyword",
                "name": "auto_seed_agents"
              },
              {
                "annotation": "Path | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "output_dir"
              },
              {
                "annotation": "str",
                "default": "'rollout_sample'",
                "kind": "positional_or_keyword",
                "name": "prefix"
              },
              {
                "annotation": "bool",
                "default": "True",
                "kind": "positional_or_keyword",
                "name": "compress"
              },
              {
                "annotation": "int",
                "default": "1",
                "kind": "positional_or_keyword",
                "name": "epochs"
              },
              {
                "annotation": "Path | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "log_path"
              },
              {
                "annotation": "int",
                "default": "1",
                "kind": "positional_or_keyword",
                "name": "log_frequency"
              },
              {
                "annotation": "int | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "max_log_entries"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self, ticks: int, batch_size: int = 1, auto_seed_agents: bool = False, output_dir: Path | None = None, prefix: str = 'rollout_sample', compress: bool = True, epochs: int = 1, log_path: Path | None = None, log_frequency: int = 1, max_log_entries: int | None = None) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 681,
            "name": "_load_bc_dataset",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Path",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "manifest"
              }
            ],
            "return_type": "BCTrajectoryDataset",
            "signature": "(self, manifest: Path) -> BCTrajectoryDataset"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 685,
            "name": "run_bc_training",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Path | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "manifest"
              },
              {
                "annotation": "BCTrainingParams | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "config"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self, *, manifest: Path | None = None, config: BCTrainingParams | None = None) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 723,
            "name": "run_anneal",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ReplayDatasetConfig | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "dataset_config"
              },
              {
                "annotation": "InMemoryReplayDataset | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "in_memory_dataset"
              },
              {
                "annotation": "Path | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "log_dir"
              },
              {
                "annotation": "Path | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "bc_manifest"
              }
            ],
            "return_type": "list[dict[str, object]]",
            "signature": "(self, *, dataset_config: ReplayDatasetConfig | None = None, in_memory_dataset: InMemoryReplayDataset | None = None, log_dir: Path | None = None, bc_manifest: Path | None = None) -> list[dict[str, object]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 823,
            "name": "run_ppo",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ReplayDatasetConfig | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "dataset_config"
              },
              {
                "annotation": "int",
                "default": "1",
                "kind": "positional_or_keyword",
                "name": "epochs"
              },
              {
                "annotation": "Path | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "log_path"
              },
              {
                "annotation": "int",
                "default": "1",
                "kind": "positional_or_keyword",
                "name": "log_frequency"
              },
              {
                "annotation": "int | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "max_log_entries"
              },
              {
                "annotation": "InMemoryReplayDataset | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "in_memory_dataset"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self, dataset_config: ReplayDatasetConfig | None = None, epochs: int = 1, log_path: Path | None = None, log_frequency: int = 1, max_log_entries: int | None = None, in_memory_dataset: InMemoryReplayDataset | None = None) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1321,
            "name": "evaluate_anneal_results",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "list[dict[str, object]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "results"
              }
            ],
            "return_type": "str",
            "signature": "(self, results: list[dict[str, object]]) -> str"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1336,
            "name": "last_anneal_status",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "str | None",
            "signature": "(self) -> str | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1339,
            "name": "_record_promotion_evaluation",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "status"
              },
              {
                "annotation": "list[dict[str, object]]",
                "default": null,
                "kind": "keyword_only",
                "name": "results"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, status: str, results: list[dict[str, object]]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1378,
            "name": "_select_social_reward_stage",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cycle_id"
              }
            ],
            "return_type": "str | None",
            "signature": "(self, cycle_id: int) -> str | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1397,
            "name": "_apply_social_reward_stage",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cycle_id"
              }
            ],
            "return_type": "None",
            "signature": "(self, cycle_id: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1405,
            "name": "_summarise_batch",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ReplayBatch",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "batch"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "batch_index"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self, batch: ReplayBatch, batch_index: int) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1415,
            "name": "build_replay_dataset",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ReplayDatasetConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "ReplayDataset",
            "signature": "(self, config: ReplayDatasetConfig) -> ReplayDataset"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1418,
            "name": "build_policy_network",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "feature_dim"
              },
              {
                "annotation": "tuple[int, int, int]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "map_shape"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "action_dim"
              },
              {
                "annotation": "int | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "hidden_dim"
              }
            ],
            "return_type": "ConflictAwarePolicyNetwork",
            "signature": "(self, feature_dim: int, map_shape: tuple[int, int, int], action_dim: int, hidden_dim: int | None = None) -> ConflictAwarePolicyNetwork"
          }
        ],
        "name": "TrainingHarness"
      }
    ],
    "constants": [
      {
        "name": "PPO_TELEMETRY_VERSION",
        "value": "1.2"
      },
      {
        "name": "ANNEAL_BC_MIN_DEFAULT",
        "value": "0.9"
      },
      {
        "name": "ANNEAL_LOSS_TOLERANCE_DEFAULT",
        "value": "0.1"
      },
      {
        "name": "ANNEAL_QUEUE_TOLERANCE_DEFAULT",
        "value": "0.15"
      }
    ],
    "docstring": "Policy orchestration scaffolding.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 54,
        "name": "_softmax",
        "params": [
          {
            "annotation": "np.ndarray",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "logits"
          }
        ],
        "return_type": "np.ndarray",
        "signature": "(logits: np.ndarray) -> np.ndarray"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 66,
        "name": "_pretty_action",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "action_repr"
          }
        ],
        "return_type": "str",
        "signature": "(action_repr: str) -> str"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy",
        "torch",
        "torch.distributions",
        "torch.nn.utils"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.policy.bc",
        "townlet.policy.behavior",
        "townlet.policy.models",
        "townlet.policy.ppo.utils",
        "townlet.policy.replay",
        "townlet.policy.replay_buffer",
        "townlet.policy.rollout",
        "townlet.policy.scenario_utils",
        "townlet.stability.promotion",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "collections.abc",
        "json",
        "math",
        "pathlib",
        "random",
        "statistics",
        "time",
        "typing"
      ]
    },
    "lines": 1435,
    "module_name": "townlet.policy.runner",
    "path": "src/townlet/policy/runner.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Wraps an existing behavior controller with scripted schedules.",
        "lineno": 78,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 81,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "base_behavior"
              },
              {
                "annotation": "dict[str, list[AgentIntent]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "schedules"
              }
            ],
            "return_type": "None",
            "signature": "(self, base_behavior, schedules: dict[str, list[AgentIntent]]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 86,
            "name": "decide",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": null,
            "signature": "(self, world, agent_id)"
          }
        ],
        "name": "ScenarioBehavior"
      }
    ],
    "constants": [],
    "docstring": "Helpers for applying scenario initialisation to simulation loops.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 12,
        "name": "apply_scenario",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "loop"
          },
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "scenario"
          }
        ],
        "return_type": "None",
        "signature": "(loop: SimulationLoop, scenario: dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 58,
        "name": "seed_default_agents",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "loop"
          }
        ],
        "return_type": "None",
        "signature": "(loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 74,
        "name": "has_agents",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "loop"
          }
        ],
        "return_type": "bool",
        "signature": "(loop: SimulationLoop) -> bool"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.core.sim_loop",
        "townlet.policy.behavior",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "typing"
      ]
    },
    "lines": 93,
    "module_name": "townlet.policy.scenario_utils",
    "path": "src/townlet/policy/scenario_utils.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "str",
            "default": "'scripted'",
            "name": "name",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [],
        "docstring": "Base class for scripted policies used during BC trajectory capture.",
        "lineno": 10,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 15,
            "name": "decide",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "dict[str, dict]",
            "signature": "(self, world: WorldState, tick: int) -> dict[str, dict]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 20,
            "name": "describe",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "str",
            "signature": "(self) -> str"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 24,
            "name": "trajectory_prefix",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "str",
            "signature": "(self) -> str"
          }
        ],
        "name": "ScriptedPolicy"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": "'idle'",
            "name": "name",
            "visibility": "public"
          }
        ],
        "bases": [
          "ScriptedPolicy"
        ],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Default scripted policy: all agents wait every tick.",
        "lineno": 29,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 34,
            "name": "decide",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "dict[str, dict]",
            "signature": "(self, world: WorldState, tick: int) -> dict[str, dict]"
          }
        ],
        "name": "IdlePolicy"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Adapter so SimulationLoop can call scripted policies.",
        "lineno": 47,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 50,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ScriptedPolicy",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "scripted_policy"
              }
            ],
            "return_type": "None",
            "signature": "(self, scripted_policy: ScriptedPolicy) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 59,
            "name": "decide",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "dict[str, dict]",
            "signature": "(self, world: WorldState, tick: int) -> dict[str, dict]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 84,
            "name": "post_step",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, float]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "rewards"
              },
              {
                "annotation": "dict[str, bool]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "terminated"
              }
            ],
            "return_type": "None",
            "signature": "(self, rewards: dict[str, float], terminated: dict[str, bool]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 93,
            "name": "flush_transitions",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "observations"
              }
            ],
            "return_type": "None",
            "signature": "(self, observations) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 99,
            "name": "collect_trajectory",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "keyword_only",
                "name": "clear"
              }
            ],
            "return_type": null,
            "signature": "(self, *, clear: bool = False)"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 104,
            "name": "latest_policy_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, dict[str, object]]",
            "signature": "(self) -> dict[str, dict[str, object]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 107,
            "name": "possessed_agents",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[str]",
            "signature": "(self) -> list[str]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 110,
            "name": "consume_option_switch_counts",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, int]",
            "signature": "(self) -> dict[str, int]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 113,
            "name": "active_policy_hash",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "str | None",
            "signature": "(self) -> str | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 116,
            "name": "set_policy_hash",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "value"
              }
            ],
            "return_type": "None",
            "signature": "(self, value: str | None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 119,
            "name": "current_anneal_ratio",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "float | None",
            "signature": "(self) -> float | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 122,
            "name": "set_anneal_ratio",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "float | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "ratio"
              }
            ],
            "return_type": "None",
            "signature": "(self, ratio: float | None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 125,
            "name": "enable_anneal_blend",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "bool",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "_"
              }
            ],
            "return_type": "None",
            "signature": "(self, _: bool) -> None"
          }
        ],
        "name": "ScriptedPolicyAdapter"
      }
    ],
    "constants": [],
    "docstring": "Simple scripted policy helpers for trajectory capture.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Factory for scripted policies; extend with richer behaviours as needed.",
        "is_async": false,
        "lineno": 38,
        "name": "get_scripted_policy",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "name"
          }
        ],
        "return_type": "ScriptedPolicy",
        "signature": "(name: str) -> ScriptedPolicy"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "dataclasses"
      ]
    },
    "lines": 126,
    "module_name": "townlet.policy.scripted",
    "path": "src/townlet/policy/scripted.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Reward computation utilities.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.rewards.engine"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 7,
    "module_name": "townlet.rewards",
    "path": "src/townlet/rewards/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Compute per-agent rewards with clipping and guardrails.",
        "lineno": 11,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 14,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 20,
            "name": "compute",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "dict[str, bool]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "terminated"
              },
              {
                "annotation": "Mapping[str, str] | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "reasons"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self, world: WorldState, terminated: dict[str, bool], reasons: Mapping[str, str] | None = None) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 122,
            "name": "_consume_chat_events",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              }
            ],
            "return_type": "Iterable[dict[str, object]]",
            "signature": "(self, world: WorldState) -> Iterable[dict[str, object]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 128,
            "name": "_social_rewards_enabled",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "bool",
            "signature": "(self) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 132,
            "name": "_compute_chat_rewards",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "Iterable[dict[str, object]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "events"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self, world: WorldState, events: Iterable[dict[str, object]]) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 172,
            "name": "_needs_override",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "bool",
            "signature": "(self, snapshot) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 182,
            "name": "_is_blocked",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "window"
              }
            ],
            "return_type": "bool",
            "signature": "(self, agent_id: str, tick: int, window: int) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 190,
            "name": "_prune_termination_blocks",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "window"
              }
            ],
            "return_type": "None",
            "signature": "(self, tick: int, window: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 202,
            "name": "_compute_wage_bonus",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "float",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "wage_rate"
              }
            ],
            "return_type": "float",
            "signature": "(self, agent_id: str, world: WorldState, wage_rate: float) -> float"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 215,
            "name": "_compute_punctuality_bonus",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "float",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "bonus_rate"
              }
            ],
            "return_type": "float",
            "signature": "(self, agent_id: str, world: WorldState, bonus_rate: float) -> float"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 227,
            "name": "_compute_terminal_penalty",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "Mapping[str, bool]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "terminated"
              },
              {
                "annotation": "Mapping[str, str]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "reasons"
              }
            ],
            "return_type": "float",
            "signature": "(self, agent_id: str, terminated: Mapping[str, bool], reasons: Mapping[str, str]) -> float"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 242,
            "name": "_reset_episode_totals",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, bool]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "terminated"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              }
            ],
            "return_type": "None",
            "signature": "(self, terminated: dict[str, bool], world: WorldState) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 253,
            "name": "latest_reward_breakdown",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, dict[str, float]]",
            "signature": "(self) -> dict[str, dict[str, float]]"
          }
        ],
        "name": "RewardEngine"
      }
    ],
    "constants": [],
    "docstring": "Reward calculation guardrails and aggregation.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "collections.abc"
      ]
    },
    "lines": 257,
    "module_name": "townlet.rewards.engine",
    "path": "src/townlet/rewards/engine.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Schedulers for perturbations and timers.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.scheduler.perturbations"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 7,
    "module_name": "townlet.scheduler",
    "path": "src/townlet/scheduler/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "event_id",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "spec_name",
            "visibility": "public"
          },
          {
            "annotation": "PerturbationKind",
            "default": null,
            "name": "kind",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "started_at",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "ends_at",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, object]",
            "default": "field(default_factory=dict)",
            "name": "payload",
            "visibility": "public"
          },
          {
            "annotation": "list[str]",
            "default": "field(default_factory=list)",
            "name": "targets",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Represents a perturbation that is pending or active in the world.",
        "lineno": 25,
        "methods": [],
        "name": "ScheduledPerturbation"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Injects bounded random events into the world.",
        "lineno": 37,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 40,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              },
              {
                "annotation": "Optional[random.Random]",
                "default": "None",
                "kind": "keyword_only",
                "name": "rng"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig, *, rng: Optional[random.Random] = None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 66,
            "name": "tick",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "current_tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, world: WorldState, current_tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 73,
            "name": "_expire_active",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "current_tick"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              }
            ],
            "return_type": "None",
            "signature": "(self, current_tick: int, world: WorldState) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 82,
            "name": "_expire_cooldowns",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "current_tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, current_tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 94,
            "name": "_expire_window_events",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "current_tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, current_tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 104,
            "name": "_drain_pending",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "current_tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, world: WorldState, current_tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 115,
            "name": "_maybe_schedule",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "current_tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, world: WorldState, current_tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 141,
            "name": "schedule_manual",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "spec_name"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "current_tick"
              },
              {
                "annotation": "int",
                "default": "0",
                "kind": "keyword_only",
                "name": "starts_in"
              },
              {
                "annotation": "int | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "duration"
              },
              {
                "annotation": "Optional[list[str]]",
                "default": "None",
                "kind": "keyword_only",
                "name": "targets"
              },
              {
                "annotation": "Optional[dict[str, object]]",
                "default": "None",
                "kind": "keyword_only",
                "name": "payload_overrides"
              }
            ],
            "return_type": "ScheduledPerturbation",
            "signature": "(self, world: WorldState, spec_name: str, current_tick: int, *, starts_in: int = 0, duration: int | None = None, targets: Optional[list[str]] = None, payload_overrides: Optional[dict[str, object]] = None) -> ScheduledPerturbation"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 174,
            "name": "cancel_event",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "event_id"
              }
            ],
            "return_type": "bool",
            "signature": "(self, world: WorldState, event_id: str) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 203,
            "name": "_activate",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "ScheduledPerturbation",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "event"
              }
            ],
            "return_type": "None",
            "signature": "(self, world: WorldState, event: ScheduledPerturbation) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 231,
            "name": "_apply_event",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "ScheduledPerturbation",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "event"
              }
            ],
            "return_type": "None",
            "signature": "(self, world: WorldState, event: ScheduledPerturbation) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 273,
            "name": "_on_event_concluded",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "ScheduledPerturbation",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "event"
              }
            ],
            "return_type": "None",
            "signature": "(self, world: WorldState, event: ScheduledPerturbation) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 285,
            "name": "seed",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "value"
              }
            ],
            "return_type": "None",
            "signature": "(self, value: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 291,
            "name": "_can_fire_spec",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "name"
              },
              {
                "annotation": "PerturbationEventConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "spec"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "current_tick"
              }
            ],
            "return_type": "bool",
            "signature": "(self, name: str, spec: PerturbationEventConfig, current_tick: int) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 315,
            "name": "_per_tick_probability",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "PerturbationEventConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "spec"
              }
            ],
            "return_type": "float",
            "signature": "(self, spec: PerturbationEventConfig) -> float"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 318,
            "name": "_generate_event",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "name"
              },
              {
                "annotation": "PerturbationEventConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "spec"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "current_tick"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "duration_override"
              },
              {
                "annotation": "Optional[list[str]]",
                "default": "None",
                "kind": "keyword_only",
                "name": "targets_override"
              },
              {
                "annotation": "Optional[dict[str, object]]",
                "default": "None",
                "kind": "keyword_only",
                "name": "payload_override"
              }
            ],
            "return_type": "Optional[ScheduledPerturbation]",
            "signature": "(self, name: str, spec: PerturbationEventConfig, current_tick: int, world: WorldState, *, duration_override: int | None = None, targets_override: Optional[list[str]] = None, payload_override: Optional[dict[str, object]] = None) -> Optional[ScheduledPerturbation]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 380,
            "name": "_eligible_agents",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "current_tick"
              }
            ],
            "return_type": "list[str]",
            "signature": "(self, world: WorldState, current_tick: int) -> list[str]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 391,
            "name": "enqueue",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Iterable[ScheduledPerturbation | Mapping[str, object]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "events"
              }
            ],
            "return_type": "None",
            "signature": "(self, events: Iterable[ScheduledPerturbation | Mapping[str, object]]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 402,
            "name": "pending",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[ScheduledPerturbation]",
            "signature": "(self) -> list[ScheduledPerturbation]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 406,
            "name": "active",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, ScheduledPerturbation]",
            "signature": "(self) -> dict[str, ScheduledPerturbation]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 412,
            "name": "export_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 426,
            "name": "import_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: dict[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 472,
            "name": "reset_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 483,
            "name": "allocate_event_id",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "str",
            "signature": "(self) -> str"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 488,
            "name": "spec_for",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "name"
              }
            ],
            "return_type": "Optional[PerturbationEventConfig]",
            "signature": "(self, name: str) -> Optional[PerturbationEventConfig]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 491,
            "name": "rng_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "tuple",
            "signature": "(self) -> tuple"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 494,
            "name": "set_rng_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "tuple",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "state"
              }
            ],
            "return_type": "None",
            "signature": "(self, state: tuple) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 498,
            "name": "rng",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "random.Random",
            "signature": "(self) -> random.Random"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 501,
            "name": "_coerce_event",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "data"
              }
            ],
            "return_type": "ScheduledPerturbation",
            "signature": "(self, data: Mapping[str, object]) -> ScheduledPerturbation"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 537,
            "name": "_serialize_event",
            "params": [
              {
                "annotation": "ScheduledPerturbation",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "event"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(event: ScheduledPerturbation) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 548,
            "name": "serialize_event",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ScheduledPerturbation",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "event"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self, event: ScheduledPerturbation) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 551,
            "name": "latest_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          }
        ],
        "name": "PerturbationScheduler"
      }
    ],
    "constants": [],
    "docstring": "Perturbation scheduler scaffolding.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.utils",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "collections.abc",
        "dataclasses",
        "random",
        "typing"
      ]
    },
    "lines": 562,
    "module_name": "townlet.scheduler.perturbations",
    "path": "src/townlet/scheduler/perturbations.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Snapshot and restore helpers.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.snapshots.migrations",
        "townlet.snapshots.state"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 25,
    "module_name": "townlet.snapshots",
    "path": "src/townlet/snapshots/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [
          "Exception"
        ],
        "decorators": [],
        "docstring": "Raised when no migration path exists between config identifiers.",
        "lineno": 19,
        "methods": [],
        "name": "MigrationNotFoundError"
      },
      {
        "attributes": [],
        "bases": [
          "Exception"
        ],
        "decorators": [],
        "docstring": "Raised when a migration handler fails or leaves the snapshot unchanged.",
        "lineno": 23,
        "methods": [],
        "name": "MigrationExecutionError"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "source",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "target",
            "visibility": "public"
          },
          {
            "annotation": "MigrationHandler",
            "default": null,
            "name": "handler",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 28,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 34,
            "name": "identifier",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "str",
            "signature": "(self) -> str"
          }
        ],
        "name": "MigrationEdge"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Maintains registered snapshot migrations keyed by config identifiers.",
        "lineno": 40,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 43,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 46,
            "name": "register",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "from_config"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "to_config"
              },
              {
                "annotation": "MigrationHandler",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "handler"
              }
            ],
            "return_type": "None",
            "signature": "(self, from_config: str, to_config: str, handler: MigrationHandler) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 54,
            "name": "clear",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 57,
            "name": "_neighbours",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "node"
              }
            ],
            "return_type": "Iterable[MigrationEdge]",
            "signature": "(self, node: str) -> Iterable[MigrationEdge]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 60,
            "name": "find_path",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "start"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "goal"
              }
            ],
            "return_type": "list[MigrationEdge]",
            "signature": "(self, start: str, goal: str) -> list[MigrationEdge]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 81,
            "name": "apply_path",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "list[MigrationEdge]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "path"
              },
              {
                "annotation": "'SnapshotState'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "state"
              },
              {
                "annotation": "'SimulationConfig'",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "tuple['SnapshotState', list[str]]",
            "signature": "(self, path: list[MigrationEdge], state: 'SnapshotState', config: 'SimulationConfig') -> tuple['SnapshotState', list[str]]"
          }
        ],
        "name": "SnapshotMigrationRegistry"
      }
    ],
    "constants": [],
    "docstring": "Snapshot migration registry and helpers.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Register a snapshot migration handler.",
        "is_async": false,
        "lineno": 110,
        "name": "register_migration",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "from_config"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "to_config"
          },
          {
            "annotation": "MigrationHandler",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "handler"
          }
        ],
        "return_type": "None",
        "signature": "(from_config: str, to_config: str, handler: MigrationHandler) -> None"
      },
      {
        "docstring": "Reset registry (intended for test teardown).",
        "is_async": false,
        "lineno": 118,
        "name": "clear_registry",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.snapshots.state"
      ],
      "stdlib": [
        "__future__",
        "collections",
        "collections.abc",
        "dataclasses",
        "typing"
      ]
    },
    "lines": 121,
    "module_name": "townlet.snapshots.migrations",
    "path": "src/townlet/snapshots/migrations.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "config_id",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "tick",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, dict[str, object]]",
            "default": "field(default_factory=dict)",
            "name": "agents",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, dict[str, object]]",
            "default": "field(default_factory=dict)",
            "name": "objects",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, object]",
            "default": "field(default_factory=dict)",
            "name": "queues",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, object]",
            "default": "field(default_factory=dict)",
            "name": "embeddings",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, object]",
            "default": "field(default_factory=dict)",
            "name": "employment",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, object]",
            "default": "field(default_factory=dict)",
            "name": "lifecycle",
            "visibility": "public"
          },
          {
            "annotation": "Optional[str]",
            "default": "None",
            "name": "rng_state",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, str]",
            "default": "field(default_factory=dict)",
            "name": "rng_streams",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, object]",
            "default": "field(default_factory=dict)",
            "name": "telemetry",
            "visibility": "public"
          },
          {
            "annotation": "list[object]",
            "default": "field(default_factory=list)",
            "name": "console_buffer",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, object]",
            "default": "field(default_factory=dict)",
            "name": "perturbations",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, dict[str, dict[str, float]]]",
            "default": "field(default_factory=dict)",
            "name": "relationships",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, object]",
            "default": "field(default_factory=dict)",
            "name": "stability",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, object]",
            "default": "field(default_factory=dict)",
            "name": "promotion",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, object]",
            "default": "field(default_factory=dict)",
            "name": "identity",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, object]",
            "default": "field(default_factory=lambda: {'applied': [], 'required': []})",
            "name": "migrations",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "lineno": 50,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 72,
            "name": "as_dict",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 102,
            "name": "from_dict",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cls"
              },
              {
                "annotation": "Mapping[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "'SnapshotState'",
            "signature": "(cls, payload: Mapping[str, object]) -> 'SnapshotState'"
          }
        ],
        "name": "SnapshotState"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Handles save/load of simulation state and RNG streams.",
        "lineno": 498,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 501,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Path",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "root"
              }
            ],
            "return_type": "None",
            "signature": "(self, root: Path) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 504,
            "name": "save",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SnapshotState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "state"
              }
            ],
            "return_type": "Path",
            "signature": "(self, state: SnapshotState) -> Path"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 514,
            "name": "load",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Path",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "path"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              },
              {
                "annotation": "bool | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "allow_migration"
              },
              {
                "annotation": "bool | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "allow_downgrade"
              },
              {
                "annotation": "bool | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "require_exact_config"
              }
            ],
            "return_type": "SnapshotState",
            "signature": "(self, path: Path, config: SimulationConfig, *, allow_migration: bool | None = None, allow_downgrade: bool | None = None, require_exact_config: bool | None = None) -> SnapshotState"
          }
        ],
        "name": "SnapshotManager"
      }
    ],
    "constants": [
      {
        "name": "SNAPSHOT_SCHEMA_VERSION",
        "value": "'1.5'"
      }
    ],
    "docstring": "Snapshot persistence scaffolding.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 34,
        "name": "_parse_version",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          }
        ],
        "return_type": "tuple[int, ...]",
        "signature": "(value: str) -> tuple[int, ...]"
      },
      {
        "docstring": "Capture the current world state into a snapshot payload.",
        "is_async": false,
        "lineno": 251,
        "name": "snapshot_from_world",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config"
          },
          {
            "annotation": "WorldState",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "world"
          },
          {
            "annotation": "Optional[LifecycleManager]",
            "default": "None",
            "kind": "keyword_only",
            "name": "lifecycle"
          },
          {
            "annotation": "Optional['TelemetryPublisher']",
            "default": "None",
            "kind": "keyword_only",
            "name": "telemetry"
          },
          {
            "annotation": "Optional[PerturbationScheduler]",
            "default": "None",
            "kind": "keyword_only",
            "name": "perturbations"
          },
          {
            "annotation": "Optional['StabilityMonitor']",
            "default": "None",
            "kind": "keyword_only",
            "name": "stability"
          },
          {
            "annotation": "Optional['PromotionManager']",
            "default": "None",
            "kind": "keyword_only",
            "name": "promotion"
          },
          {
            "annotation": "Optional[Mapping[str, random.Random]]",
            "default": "None",
            "kind": "keyword_only",
            "name": "rng_streams"
          },
          {
            "annotation": "Optional[Mapping[str, object]]",
            "default": "None",
            "kind": "keyword_only",
            "name": "identity"
          }
        ],
        "return_type": "SnapshotState",
        "signature": "(config: SimulationConfig, world: WorldState, *, lifecycle: Optional[LifecycleManager] = None, telemetry: Optional['TelemetryPublisher'] = None, perturbations: Optional[PerturbationScheduler] = None, stability: Optional['StabilityMonitor'] = None, promotion: Optional['PromotionManager'] = None, rng_streams: Optional[Mapping[str, random.Random]] = None, identity: Optional[Mapping[str, object]] = None) -> SnapshotState"
      },
      {
        "docstring": "Restore world, queue, embeddings, and lifecycle state from snapshot.",
        "is_async": false,
        "lineno": 381,
        "name": "apply_snapshot_to_world",
        "params": [
          {
            "annotation": "WorldState",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "world"
          },
          {
            "annotation": "SnapshotState",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "snapshot"
          },
          {
            "annotation": "Optional[LifecycleManager]",
            "default": "None",
            "kind": "keyword_only",
            "name": "lifecycle"
          }
        ],
        "return_type": "None",
        "signature": "(world: WorldState, snapshot: SnapshotState, *, lifecycle: Optional[LifecycleManager] = None) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 478,
        "name": "apply_snapshot_to_telemetry",
        "params": [
          {
            "annotation": "'TelemetryPublisher'",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "telemetry"
          },
          {
            "annotation": "SnapshotState",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "snapshot"
          }
        ],
        "return_type": "None",
        "signature": "(telemetry: 'TelemetryPublisher', snapshot: SnapshotState) -> None"
      }
    ],
    "has_dataclasses": true,
    "has_logging": true,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.agents.models",
        "townlet.config",
        "townlet.lifecycle.manager",
        "townlet.scheduler.perturbations",
        "townlet.snapshots.migrations",
        "townlet.stability.monitor",
        "townlet.stability.promotion",
        "townlet.telemetry.publisher",
        "townlet.utils",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "collections.abc",
        "dataclasses",
        "json",
        "logging",
        "pathlib",
        "random",
        "typing"
      ]
    },
    "lines": 620,
    "module_name": "townlet.snapshots.state",
    "path": "src/townlet/snapshots/state.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Stability guardrails.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.stability.monitor",
        "townlet.stability.promotion"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 8,
    "module_name": "townlet.stability",
    "path": "src/townlet/stability/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Tracks rolling metrics and canaries.",
        "lineno": 11,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 14,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 51,
            "name": "_promotion_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 64,
            "name": "_finalise_promotion_window",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "window_end"
              }
            ],
            "return_type": "None",
            "signature": "(self, window_end: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 79,
            "name": "_update_promotion_window",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              },
              {
                "annotation": "Iterable[str]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "alerts"
              }
            ],
            "return_type": "None",
            "signature": "(self, tick: int, alerts: Iterable[str]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 89,
            "name": "track",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "tick"
              },
              {
                "annotation": "dict[str, float]",
                "default": null,
                "kind": "keyword_only",
                "name": "rewards"
              },
              {
                "annotation": "dict[str, bool]",
                "default": null,
                "kind": "keyword_only",
                "name": "terminated"
              },
              {
                "annotation": "dict[str, int] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "queue_metrics"
              },
              {
                "annotation": "dict[str, float] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "embedding_metrics"
              },
              {
                "annotation": "dict[str, dict[str, object]] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "job_snapshot"
              },
              {
                "annotation": "Iterable[dict[str, object]] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "events"
              },
              {
                "annotation": "dict[str, object] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "employment_metrics"
              },
              {
                "annotation": "dict[str, float] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "hunger_levels"
              },
              {
                "annotation": "dict[str, int] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "option_switch_counts"
              },
              {
                "annotation": "Iterable[dict[str, object]] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "rivalry_events"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, tick: int, rewards: dict[str, float], terminated: dict[str, bool], queue_metrics: dict[str, int] | None = None, embedding_metrics: dict[str, float] | None = None, job_snapshot: dict[str, dict[str, object]] | None = None, events: Iterable[dict[str, object]] | None = None, employment_metrics: dict[str, object] | None = None, hunger_levels: dict[str, float] | None = None, option_switch_counts: dict[str, int] | None = None, rivalry_events: Iterable[dict[str, object]] | None = None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 218,
            "name": "latest_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 221,
            "name": "export_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 241,
            "name": "import_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: dict[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 309,
            "name": "reset_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 329,
            "name": "_update_starvation_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "tick"
              },
              {
                "annotation": "dict[str, float] | None",
                "default": null,
                "kind": "keyword_only",
                "name": "hunger_levels"
              },
              {
                "annotation": "dict[str, bool]",
                "default": null,
                "kind": "keyword_only",
                "name": "terminated"
              }
            ],
            "return_type": "int",
            "signature": "(self, *, tick: int, hunger_levels: dict[str, float] | None, terminated: dict[str, bool]) -> int"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 364,
            "name": "_update_reward_samples",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "tick"
              },
              {
                "annotation": "dict[str, float]",
                "default": null,
                "kind": "keyword_only",
                "name": "rewards"
              }
            ],
            "return_type": "tuple[float | None, float | None, int]",
            "signature": "(self, *, tick: int, rewards: dict[str, float]) -> tuple[float | None, float | None, int]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 388,
            "name": "_threshold_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 397,
            "name": "_update_option_samples",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "tick"
              },
              {
                "annotation": "dict[str, int] | None",
                "default": null,
                "kind": "keyword_only",
                "name": "option_switch_counts"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "active_agent_count"
              }
            ],
            "return_type": "float | None",
            "signature": "(self, *, tick: int, option_switch_counts: dict[str, int] | None, active_agent_count: int) -> float | None"
          }
        ],
        "name": "StabilityMonitor"
      }
    ],
    "constants": [],
    "docstring": "Monitors KPIs and promotion guardrails.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config"
      ],
      "stdlib": [
        "__future__",
        "collections",
        "collections.abc"
      ]
    },
    "lines": 420,
    "module_name": "townlet.stability.monitor",
    "path": "src/townlet/stability/monitor.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Tracks promotion readiness and release/shadow state.",
        "lineno": 13,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 16,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              },
              {
                "annotation": "Path | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "log_path"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig, log_path: Path | None = None) -> None"
          },
          {
            "docstring": "Update state based on the latest stability metrics.",
            "is_async": false,
            "lineno": 39,
            "name": "update_from_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "metrics"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, metrics: Mapping[str, object], *, tick: int) -> None"
          },
          {
            "docstring": "Record a promotion event and update release metadata.",
            "is_async": false,
            "lineno": 62,
            "name": "mark_promoted",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "tick"
              },
              {
                "annotation": "Mapping[str, object] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "metadata"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, tick: int, metadata: Mapping[str, object] | None = None) -> None"
          },
          {
            "docstring": "Record a rollback event and return to monitoring state.",
            "is_async": false,
            "lineno": 86,
            "name": "register_rollback",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "tick"
              },
              {
                "annotation": "Mapping[str, object] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "metadata"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, tick: int, metadata: Mapping[str, object] | None = None) -> None"
          },
          {
            "docstring": "Record a manual policy swap without altering candidate readiness.",
            "is_async": false,
            "lineno": 110,
            "name": "record_manual_swap",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "tick"
              },
              {
                "annotation": "Mapping[str, object]",
                "default": null,
                "kind": "keyword_only",
                "name": "metadata"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self, *, tick: int, metadata: Mapping[str, object]) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 136,
            "name": "set_candidate_metadata",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, object] | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "metadata"
              }
            ],
            "return_type": "None",
            "signature": "(self, metadata: Mapping[str, object] | None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 139,
            "name": "snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 156,
            "name": "export_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 159,
            "name": "import_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: Mapping[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 189,
            "name": "reset",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 200,
            "name": "_log_event",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "record"
              }
            ],
            "return_type": "None",
            "signature": "(self, record: Mapping[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 215,
            "name": "_normalise_release",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, object] | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "metadata"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self, metadata: Mapping[str, object] | None) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 227,
            "name": "_resolve_rollback_target",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, object] | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "metadata"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self, metadata: Mapping[str, object] | None) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 241,
            "name": "_latest_promoted_release",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object] | None",
            "signature": "(self) -> dict[str, object] | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 254,
            "name": "state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "str",
            "signature": "(self) -> str"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 258,
            "name": "candidate_ready",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "bool",
            "signature": "(self) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 262,
            "name": "pass_streak",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "int",
            "signature": "(self) -> int"
          }
        ],
        "name": "PromotionManager"
      }
    ],
    "constants": [],
    "docstring": "Promotion gate state tracking.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config"
      ],
      "stdlib": [
        "__future__",
        "collections",
        "collections.abc",
        "json",
        "pathlib"
      ]
    },
    "lines": 263,
    "module_name": "townlet.stability.promotion",
    "path": "src/townlet/stability/promotion.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Telemetry publication surfaces.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.telemetry.publisher"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 7,
    "module_name": "townlet.telemetry",
    "path": "src/townlet/telemetry/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Apply global and per-category narration cooldowns with dedupe.",
        "lineno": 10,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 13,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "NarrationThrottleConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: NarrationThrottleConfig) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 21,
            "name": "begin_tick",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, tick: int) -> None"
          },
          {
            "docstring": "Return True if a narration may be emitted for the given category.",
            "is_async": false,
            "lineno": 26,
            "name": "allow",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "category"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "message"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "keyword_only",
                "name": "priority"
              },
              {
                "annotation": "str | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "dedupe_key"
              }
            ],
            "return_type": "bool",
            "signature": "(self, category: str, *, message: str, priority: bool = False, dedupe_key: str | None = None) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 61,
            "name": "export_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 69,
            "name": "import_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: dict[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 88,
            "name": "_expire_recent_entries",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 100,
            "name": "_expire_window",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 108,
            "name": "_check_global_cooldown",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "bool",
            "signature": "(self) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 114,
            "name": "_check_category_cooldown",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "category"
              }
            ],
            "return_type": "bool",
            "signature": "(self, category: str) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 121,
            "name": "_check_window_limit",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "bool",
            "signature": "(self) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 127,
            "name": "_record_emission",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "category"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "dedupe_key"
              }
            ],
            "return_type": "None",
            "signature": "(self, category: str, dedupe_key: str) -> None"
          }
        ],
        "name": "NarrationRateLimiter"
      }
    ],
    "constants": [],
    "docstring": "Narration throttling utilities.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config"
      ],
      "stdlib": [
        "__future__",
        "collections"
      ]
    },
    "lines": 133,
    "module_name": "townlet.telemetry.narration",
    "path": "src/townlet/telemetry/narration.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Publishes observer snapshots and consumes console commands.",
        "lineno": 28,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 31,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 94,
            "name": "queue_console_command",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "object",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "command"
              }
            ],
            "return_type": "None",
            "signature": "(self, command: object) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 97,
            "name": "drain_console_buffer",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "Iterable[object]",
            "signature": "(self) -> Iterable[object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 102,
            "name": "export_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 155,
            "name": "import_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: dict[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 335,
            "name": "export_console_buffer",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[object]",
            "signature": "(self) -> list[object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 338,
            "name": "import_console_buffer",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Iterable[object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "buffer"
              }
            ],
            "return_type": "None",
            "signature": "(self, buffer: Iterable[object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 341,
            "name": "record_console_results",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Iterable['ConsoleCommandResult']",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "results"
              }
            ],
            "return_type": "None",
            "signature": "(self, results: Iterable['ConsoleCommandResult']) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 350,
            "name": "latest_console_results",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[dict[str, Any]]",
            "signature": "(self) -> list[dict[str, Any]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 353,
            "name": "console_history",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[dict[str, Any]]",
            "signature": "(self) -> list[dict[str, Any]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 356,
            "name": "record_possessed_agents",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Iterable[str]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agents"
              }
            ],
            "return_type": "None",
            "signature": "(self, agents: Iterable[str]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 359,
            "name": "latest_possessed_agents",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[str]",
            "signature": "(self) -> list[str]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 362,
            "name": "latest_precondition_failures",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[dict[str, object]]",
            "signature": "(self) -> list[dict[str, object]]"
          },
          {
            "docstring": "Return transport health and backlog counters for observability.",
            "is_async": false,
            "lineno": 365,
            "name": "latest_transport_status",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 370,
            "name": "_build_transport_client",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": null,
            "signature": "(self)"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 385,
            "name": "_reset_transport_client",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 394,
            "name": "_send_with_retry",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "bytes",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "bool",
            "signature": "(self, payload: bytes, tick: int) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 428,
            "name": "_flush_transport_buffer",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 444,
            "name": "_enqueue_stream_payload",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, Any]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: Mapping[str, Any], *, tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 469,
            "name": "_build_stream_payload",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "dict[str, Any]",
            "signature": "(self, tick: int) -> dict[str, Any]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 512,
            "name": "close",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 520,
            "name": "publish_tick",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "tick"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "keyword_only",
                "name": "world"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "keyword_only",
                "name": "observations"
              },
              {
                "annotation": "dict[str, float]",
                "default": null,
                "kind": "keyword_only",
                "name": "rewards"
              },
              {
                "annotation": "Iterable[dict[str, object]] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "events"
              },
              {
                "annotation": "Mapping[str, Mapping[str, object]] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "policy_snapshot"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "keyword_only",
                "name": "kpi_history"
              },
              {
                "annotation": "Mapping[str, Mapping[str, float]] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "reward_breakdown"
              },
              {
                "annotation": "Mapping[str, object] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "stability_inputs"
              },
              {
                "annotation": "Mapping[str, object] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "perturbations"
              },
              {
                "annotation": "Mapping[str, object] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "policy_identity"
              },
              {
                "annotation": "Iterable[str] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "possessed_agents"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, tick: int, world: WorldState, observations: dict[str, object], rewards: dict[str, float], events: Iterable[dict[str, object]] | None = None, policy_snapshot: Mapping[str, Mapping[str, object]] | None = None, kpi_history: bool = False, reward_breakdown: Mapping[str, Mapping[str, float]] | None = None, stability_inputs: Mapping[str, object] | None = None, perturbations: Mapping[str, object] | None = None, policy_identity: Mapping[str, object] | None = None, possessed_agents: Iterable[str] | None = None) -> None"
          },
          {
            "docstring": "Expose the most recent queue-related telemetry counters.",
            "is_async": false,
            "lineno": 710,
            "name": "latest_queue_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, int] | None",
            "signature": "(self) -> dict[str, int] | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 716,
            "name": "latest_queue_history",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[dict[str, object]]",
            "signature": "(self) -> list[dict[str, object]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 721,
            "name": "latest_rivalry_events",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[dict[str, object]]",
            "signature": "(self) -> list[dict[str, object]]"
          },
          {
            "docstring": "Record the latest anneal status payload for observer dashboards.",
            "is_async": false,
            "lineno": 726,
            "name": "update_anneal_status",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, object] | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "status"
              }
            ],
            "return_type": "None",
            "signature": "(self, status: Mapping[str, object] | None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 730,
            "name": "kpi_history",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, list[float]]",
            "signature": "(self) -> dict[str, list[float]]"
          },
          {
            "docstring": "Return the conflict-focused telemetry payload (queues + rivalry).",
            "is_async": false,
            "lineno": 733,
            "name": "latest_conflict_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": "Expose the most recent affordance manifest metadata.",
            "is_async": false,
            "lineno": 766,
            "name": "latest_affordance_manifest",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 771,
            "name": "latest_reward_breakdown",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, dict[str, float]]",
            "signature": "(self) -> dict[str, dict[str, float]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 776,
            "name": "latest_stability_inputs",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 795,
            "name": "record_stability_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "metrics"
              }
            ],
            "return_type": "None",
            "signature": "(self, metrics: Mapping[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 798,
            "name": "latest_stability_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 801,
            "name": "latest_promotion_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object] | None",
            "signature": "(self) -> dict[str, object] | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 810,
            "name": "_append_console_audit",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, Any]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: Mapping[str, Any]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 818,
            "name": "latest_stability_alerts",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[str]",
            "signature": "(self) -> list[str]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 825,
            "name": "latest_perturbations",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 838,
            "name": "update_policy_identity",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, object] | None",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "identity"
              }
            ],
            "return_type": "None",
            "signature": "(self, identity: Mapping[str, object] | None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 850,
            "name": "latest_policy_identity",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object] | None",
            "signature": "(self) -> dict[str, object] | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 855,
            "name": "record_snapshot_migrations",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Iterable[str]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "applied"
              }
            ],
            "return_type": "None",
            "signature": "(self, applied: Iterable[str]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 858,
            "name": "latest_snapshot_migrations",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[str]",
            "signature": "(self) -> list[str]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 861,
            "name": "_normalize_perturbations_payload",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self, payload: Mapping[str, object]) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 898,
            "name": "latest_policy_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, dict[str, object]]",
            "signature": "(self) -> dict[str, dict[str, object]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 901,
            "name": "latest_anneal_status",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object] | None",
            "signature": "(self) -> dict[str, object] | None"
          },
          {
            "docstring": "Expose relationship churn payload captured during publish.",
            "is_async": false,
            "lineno": 906,
            "name": "latest_relationship_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object] | None",
            "signature": "(self) -> dict[str, object] | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 916,
            "name": "latest_relationship_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, dict[str, dict[str, float]]]",
            "signature": "(self) -> dict[str, dict[str, dict[str, float]]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 919,
            "name": "latest_relationship_updates",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[dict[str, object]]",
            "signature": "(self) -> list[dict[str, object]]"
          },
          {
            "docstring": "Allow external callers to seed the latest relationship metrics.",
            "is_async": false,
            "lineno": 922,
            "name": "update_relationship_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: dict[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 926,
            "name": "latest_relationship_overlay",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, list[dict[str, object]]]",
            "signature": "(self) -> dict[str, list[dict[str, object]]]"
          },
          {
            "docstring": "Expose narration entries emitted during the latest publish call.",
            "is_async": false,
            "lineno": 932,
            "name": "latest_narrations",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[dict[str, object]]",
            "signature": "(self) -> list[dict[str, object]]"
          },
          {
            "docstring": "Expose embedding allocator counters.",
            "is_async": false,
            "lineno": 937,
            "name": "latest_embedding_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, float] | None",
            "signature": "(self) -> dict[str, float] | None"
          },
          {
            "docstring": "Return the most recent event batch.",
            "is_async": false,
            "lineno": 943,
            "name": "latest_events",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "Iterable[dict[str, object]]",
            "signature": "(self) -> Iterable[dict[str, object]]"
          },
          {
            "docstring": "Return the narration limiter state for snapshot export.",
            "is_async": false,
            "lineno": 947,
            "name": "latest_narration_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": "Register a callback to receive each tick's event batch.",
            "is_async": false,
            "lineno": 952,
            "name": "register_event_subscriber",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Callable[[list[dict[str, object]]], None]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "subscriber"
              }
            ],
            "return_type": "None",
            "signature": "(self, subscriber: Callable[[list[dict[str, object]]], None]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 958,
            "name": "latest_job_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, dict[str, object]]",
            "signature": "(self) -> dict[str, dict[str, object]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 961,
            "name": "latest_economy_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, dict[str, object]]",
            "signature": "(self) -> dict[str, dict[str, object]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 964,
            "name": "latest_employment_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 967,
            "name": "schema",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "str",
            "signature": "(self) -> str"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 970,
            "name": "_capture_relationship_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              }
            ],
            "return_type": "dict[str, dict[str, dict[str, float]]]",
            "signature": "(self, world: WorldState) -> dict[str, dict[str, dict[str, float]]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 995,
            "name": "_compute_relationship_updates",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, dict[str, dict[str, float]]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "previous"
              },
              {
                "annotation": "dict[str, dict[str, dict[str, float]]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "current"
              }
            ],
            "return_type": "list[dict[str, object]]",
            "signature": "(self, previous: dict[str, dict[str, dict[str, float]]], current: dict[str, dict[str, dict[str, float]]]) -> list[dict[str, object]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1074,
            "name": "_build_relationship_overlay",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, list[dict[str, object]]]",
            "signature": "(self) -> dict[str, list[dict[str, object]]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1114,
            "name": "_process_narrations",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Iterable[dict[str, object]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "events"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, events: Iterable[dict[str, object]], tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1130,
            "name": "_handle_queue_conflict_narration",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "event"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, event: dict[str, object], tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1178,
            "name": "_handle_shower_power_outage_narration",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "event"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, event: dict[str, object], tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1205,
            "name": "_handle_shower_complete_narration",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "event"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, event: dict[str, object], tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1235,
            "name": "_handle_sleep_complete_narration",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "event"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, event: dict[str, object], tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1266,
            "name": "_copy_relationship_snapshot",
            "params": [
              {
                "annotation": "dict[str, dict[str, dict[str, float]]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "dict[str, dict[str, dict[str, float]]]",
            "signature": "(snapshot: dict[str, dict[str, dict[str, float]]]) -> dict[str, dict[str, dict[str, float]]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1281,
            "name": "_update_kpi_history",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "WorldState",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "world"
              }
            ],
            "return_type": "None",
            "signature": "(self, world: WorldState) -> None"
          }
        ],
        "name": "TelemetryPublisher"
      }
    ],
    "constants": [],
    "docstring": "Telemetry pipelines and console bridge.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": true,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.console.command",
        "townlet.telemetry.narration",
        "townlet.telemetry.transport",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "collections",
        "collections.abc",
        "json",
        "logging",
        "pathlib",
        "time",
        "typing"
      ]
    },
    "lines": 1301,
    "module_name": "townlet.telemetry.publisher",
    "path": "src/townlet/telemetry/publisher.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "int",
            "default": null,
            "name": "window_start",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "window_end",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "total_evictions",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, int]",
            "default": null,
            "name": "per_owner",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, int]",
            "default": null,
            "name": "per_reason",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Aggregated eviction counts captured for a completed window.",
        "lineno": 32,
        "methods": [
          {
            "docstring": "Serialise the sample into a telemetry-friendly payload.",
            "is_async": false,
            "lineno": 41,
            "name": "to_payload",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          }
        ],
        "name": "RelationshipEvictionSample"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Tracks relationship eviction activity over fixed tick windows.",
        "lineno": 52,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 55,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "window_ticks"
              },
              {
                "annotation": "int",
                "default": "8",
                "kind": "keyword_only",
                "name": "max_samples"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, window_ticks: int, max_samples: int = 8) -> None"
          },
          {
            "docstring": "Record an eviction event for churn tracking.\n\nParameters\n----------\ntick:\n    Simulation tick when the eviction occurred.\nowner_id:\n    Agent whose relationship ledger evicted ``evicted_id``.\nevicted_id:\n    Agent removed from the ledger (unused for aggregation but captured\n    to support future diagnostics).\nreason:\n    Optional categorical tag (e.g. ``capacity`` or ``decay``) to aid in\n    telemetry analysis. ``None`` is grouped under ``\"unknown\"``.",
            "is_async": false,
            "lineno": 72,
            "name": "record_eviction",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "tick"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "owner_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "evicted_id"
              },
              {
                "annotation": "str | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "reason"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, tick: int, owner_id: str, evicted_id: str, reason: str | None = None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 104,
            "name": "_roll_window",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, tick: int) -> None"
          },
          {
            "docstring": "Return aggregates for the active window.",
            "is_async": false,
            "lineno": 126,
            "name": "snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": "Return a snapshot of the recorded history.",
            "is_async": false,
            "lineno": 136,
            "name": "history",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "Iterable[RelationshipEvictionSample]",
            "signature": "(self) -> Iterable[RelationshipEvictionSample]"
          },
          {
            "docstring": "Convert history samples into telemetry payloads.",
            "is_async": false,
            "lineno": 140,
            "name": "history_payload",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[dict[str, object]]",
            "signature": "(self) -> list[dict[str, object]]"
          },
          {
            "docstring": "Return the live window payload for telemetry publishing.",
            "is_async": false,
            "lineno": 144,
            "name": "latest_payload",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": "Restore the accumulator from an external payload.\n\nThis helper allows soak harnesses to persist state across sessions.",
            "is_async": false,
            "lineno": 150,
            "name": "ingest_payload",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: dict[str, object]) -> None"
          }
        ],
        "name": "RelationshipChurnAccumulator"
      }
    ],
    "constants": [],
    "docstring": "Helpers for tracking relationship churn and eviction telemetry.\n\nThese utilities let the simulation publish per-window counts of relationship\nedge evictions so drift or rapid churn can be observed by soak tests and the\noperations dashboards.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Move the window start forward until it covers ``current_tick``.",
        "is_async": false,
        "lineno": 15,
        "name": "_advance_window",
        "params": [
          {
            "annotation": "int",
            "default": null,
            "kind": "keyword_only",
            "name": "current_tick"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "keyword_only",
            "name": "window_ticks"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "keyword_only",
            "name": "window_start"
          }
        ],
        "return_type": "int",
        "signature": "(*, current_tick: int, window_ticks: int, window_start: int) -> int"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [],
      "stdlib": [
        "__future__",
        "collections",
        "collections.abc",
        "dataclasses"
      ]
    },
    "lines": 182,
    "module_name": "townlet.telemetry.relationship_metrics",
    "path": "src/townlet/telemetry/relationship_metrics.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [
          "RuntimeError"
        ],
        "decorators": [],
        "docstring": "Raised when telemetry messages cannot be delivered.",
        "lineno": 12,
        "methods": [],
        "name": "TelemetryTransportError"
      },
      {
        "attributes": [],
        "bases": [
          "Protocol"
        ],
        "decorators": [],
        "docstring": "Common interface for transport implementations.",
        "lineno": 16,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 19,
            "name": "send",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "bytes",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: bytes) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 22,
            "name": "close",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          }
        ],
        "name": "TransportClient"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Writes telemetry payloads to stdout (for development/debug).",
        "lineno": 26,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 29,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 32,
            "name": "send",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "bytes",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: bytes) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 36,
            "name": "close",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          }
        ],
        "name": "StdoutTransport"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Appends newline-delimited payloads to a local file.",
        "lineno": 40,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 43,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Path",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "path"
              }
            ],
            "return_type": "None",
            "signature": "(self, path: Path) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 48,
            "name": "send",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "bytes",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: bytes) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 52,
            "name": "close",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          }
        ],
        "name": "FileTransport"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Sends telemetry payloads to a TCP endpoint.",
        "lineno": 56,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 59,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "endpoint"
              },
              {
                "annotation": "float",
                "default": null,
                "kind": "keyword_only",
                "name": "connect_timeout"
              },
              {
                "annotation": "float",
                "default": null,
                "kind": "keyword_only",
                "name": "send_timeout"
              }
            ],
            "return_type": "None",
            "signature": "(self, endpoint: str, *, connect_timeout: float, send_timeout: float) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 83,
            "name": "_connect",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 96,
            "name": "send",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "bytes",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: bytes) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 105,
            "name": "close",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          }
        ],
        "name": "TcpTransport"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Accumulates payloads prior to flushing to the transport.",
        "lineno": 113,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 116,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "max_batch_size"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "max_buffer_bytes"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, max_batch_size: int, max_buffer_bytes: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 122,
            "name": "append",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "bytes",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: bytes) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 126,
            "name": "popleft",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "bytes",
            "signature": "(self) -> bytes"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 131,
            "name": "clear",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 135,
            "name": "__len__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "int",
            "signature": "(self) -> int"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 139,
            "name": "total_bytes",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "int",
            "signature": "(self) -> int"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 142,
            "name": "is_over_capacity",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "bool",
            "signature": "(self) -> bool"
          },
          {
            "docstring": "Drop oldest payloads until buffer fits limits; returns drop count.",
            "is_async": false,
            "lineno": 145,
            "name": "drop_until_within_capacity",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "int",
            "signature": "(self) -> int"
          }
        ],
        "name": "TransportBuffer"
      }
    ],
    "constants": [],
    "docstring": "Transport primitives for telemetry publishing.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Factory helper for `TelemetryPublisher`.",
        "is_async": false,
        "lineno": 156,
        "name": "create_transport",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "keyword_only",
            "name": "transport_type"
          },
          {
            "annotation": "Path | None",
            "default": null,
            "kind": "keyword_only",
            "name": "file_path"
          },
          {
            "annotation": "str | None",
            "default": null,
            "kind": "keyword_only",
            "name": "endpoint"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "keyword_only",
            "name": "connect_timeout"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "keyword_only",
            "name": "send_timeout"
          }
        ],
        "return_type": "TransportClient",
        "signature": "(*, transport_type: str, file_path: Path | None, endpoint: str | None, connect_timeout: float, send_timeout: float) -> TransportClient"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "socket",
        "sys"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "collections",
        "pathlib",
        "typing"
      ]
    },
    "lines": 186,
    "module_name": "townlet.telemetry.transport",
    "path": "src/townlet/telemetry/transport.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Utility helpers for Townlet.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.utils.rng"
      ],
      "stdlib": []
    },
    "lines": 9,
    "module_name": "townlet.utils",
    "path": "src/townlet/utils/__init__.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Utility helpers for serialising deterministic RNG state.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Encode a Python ``random`` state tuple into a base64 string.",
        "is_async": false,
        "lineno": 10,
        "name": "encode_rng_state",
        "params": [
          {
            "annotation": "tuple[object, ...]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "state"
          }
        ],
        "return_type": "str",
        "signature": "(state: tuple[object, ...]) -> str"
      },
      {
        "docstring": "Decode a base64-encoded RNG state back into a Python tuple.",
        "is_async": false,
        "lineno": 16,
        "name": "decode_rng_state",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "payload"
          }
        ],
        "return_type": "tuple[object, ...]",
        "signature": "(payload: str) -> tuple[object, ...]"
      },
      {
        "docstring": "Capture the current state of ``rng`` as a serialisable string.",
        "is_async": false,
        "lineno": 22,
        "name": "encode_rng",
        "params": [
          {
            "annotation": "random.Random",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "rng"
          }
        ],
        "return_type": "str",
        "signature": "(rng: random.Random) -> str"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pickle"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "base64",
        "random"
      ]
    },
    "lines": 25,
    "module_name": "townlet.utils.rng",
    "path": "src/townlet/utils/rng.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "World modelling primitives.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet.world.grid",
        "townlet.world.queue_manager",
        "townlet.world.relationships"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 16,
    "module_name": "townlet.world",
    "path": "src/townlet/world/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Registers named affordance hooks and returns handlers on demand.",
        "lineno": 50,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 53,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 56,
            "name": "register",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "name"
              },
              {
                "annotation": "Callable[[dict[str, Any]], None]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "handler"
              }
            ],
            "return_type": "None",
            "signature": "(self, name: str, handler: Callable[[dict[str, Any]], None]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 63,
            "name": "handlers_for",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "name"
              }
            ],
            "return_type": "tuple[Callable[[dict[str, Any]], None], ...]",
            "signature": "(self, name: str) -> tuple[Callable[[dict[str, Any]], None], ...]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 66,
            "name": "clear",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "name"
              }
            ],
            "return_type": "None",
            "signature": "(self, name: str | None = None) -> None"
          }
        ],
        "name": "HookRegistry"
      },
      {
        "attributes": [
          {
            "annotation": null,
            "default": "('handler', 'mode', 'require_cmd_id')",
            "name": "__slots__",
            "visibility": "private"
          }
        ],
        "bases": [],
        "decorators": [],
        "docstring": "Metadata for registered console handlers.",
        "lineno": 73,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 78,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Callable[[ConsoleCommandEnvelope], ConsoleCommandResult]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "handler"
              },
              {
                "annotation": "str",
                "default": "'viewer'",
                "kind": "keyword_only",
                "name": "mode"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "keyword_only",
                "name": "require_cmd_id"
              }
            ],
            "return_type": "None",
            "signature": "(self, handler: Callable[[ConsoleCommandEnvelope], ConsoleCommandResult], *, mode: str = 'viewer', require_cmd_id: bool = False) -> None"
          }
        ],
        "name": "_ConsoleHandlerEntry"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "agent_id",
            "visibility": "public"
          },
          {
            "annotation": "tuple[int, int]",
            "default": null,
            "name": "position",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, float]",
            "default": null,
            "name": "needs",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "wallet",
            "visibility": "public"
          },
          {
            "annotation": "tuple[int, int] | None",
            "default": "None",
            "name": "home_position",
            "visibility": "public"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "name": "origin_agent_id",
            "visibility": "public"
          },
          {
            "annotation": "Personality",
            "default": "field(default_factory=_default_personality)",
            "name": "personality",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, int]",
            "default": "field(default_factory=dict)",
            "name": "inventory",
            "visibility": "public"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "name": "job_id",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "on_shift",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "0",
            "name": "lateness_counter",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "-1",
            "name": "last_late_tick",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": "'pre_shift'",
            "name": "shift_state",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "0",
            "name": "late_ticks_today",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "attendance_ratio",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "0",
            "name": "absent_shifts_7d",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "wages_withheld",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "exit_pending",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": "''",
            "name": "last_action_id",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": "False",
            "name": "last_action_success",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "0",
            "name": "last_action_duration",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "0",
            "name": "episode_tick",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Minimal agent view used for scaffolding.",
        "lineno": 100,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 126,
            "name": "__post_init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          }
        ],
        "name": "AgentSnapshot"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "object_id",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "object_type",
            "visibility": "public"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "name": "occupied_by",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, int]",
            "default": "field(default_factory=dict)",
            "name": "stock",
            "visibility": "public"
          },
          {
            "annotation": "tuple[int, int] | None",
            "default": "None",
            "name": "position",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Represents an interactive world object with optional occupancy.",
        "lineno": 145,
        "methods": [],
        "name": "InteractiveObject"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "agent_id",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "affordance_id",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "duration_remaining",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, float]",
            "default": null,
            "name": "effects",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Tracks an affordance currently executing on an object.",
        "lineno": 156,
        "methods": [],
        "name": "RunningAffordance"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "affordance_id",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "object_type",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "duration",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, float]",
            "default": null,
            "name": "effects",
            "visibility": "public"
          },
          {
            "annotation": "list[str]",
            "default": "field(default_factory=list)",
            "name": "preconditions",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, list[str]]",
            "default": "field(default_factory=dict)",
            "name": "hooks",
            "visibility": "public"
          },
          {
            "annotation": "tuple[CompiledPrecondition, ...]",
            "default": "field(default_factory=tuple, repr=False)",
            "name": "compiled_preconditions",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Static affordance definition loaded from configuration.",
        "lineno": 166,
        "methods": [],
        "name": "AffordanceSpec"
      },
      {
        "attributes": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "name": "config",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, AgentSnapshot]",
            "default": "field(default_factory=dict)",
            "name": "agents",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "0",
            "name": "tick",
            "visibility": "public"
          },
          {
            "annotation": "QueueManager",
            "default": "field(init=False)",
            "name": "queue_manager",
            "visibility": "public"
          },
          {
            "annotation": "EmbeddingAllocator",
            "default": "field(init=False)",
            "name": "embedding_allocator",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, str]",
            "default": "field(init=False, default_factory=dict)",
            "name": "_active_reservations",
            "visibility": "private"
          },
          {
            "annotation": "dict[str, InteractiveObject]",
            "default": "field(init=False, default_factory=dict)",
            "name": "objects",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, AffordanceSpec]",
            "default": "field(init=False, default_factory=dict)",
            "name": "affordances",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, RunningAffordance]",
            "default": "field(init=False, default_factory=dict)",
            "name": "_running_affordances",
            "visibility": "private"
          },
          {
            "annotation": "dict[int, list[dict[str, Any]]]",
            "default": "field(init=False, default_factory=dict)",
            "name": "_pending_events",
            "visibility": "private"
          },
          {
            "annotation": "dict[str, dict[str, int]]",
            "default": "field(init=False, default_factory=dict)",
            "name": "store_stock",
            "visibility": "public"
          },
          {
            "annotation": "list[str]",
            "default": "field(init=False, default_factory=list)",
            "name": "_job_keys",
            "visibility": "private"
          },
          {
            "annotation": "dict[str, dict[str, Any]]",
            "default": "field(init=False, default_factory=dict)",
            "name": "_employment_state",
            "visibility": "private"
          },
          {
            "annotation": "list[str]",
            "default": "field(init=False, default_factory=list)",
            "name": "_employment_exit_queue",
            "visibility": "private"
          },
          {
            "annotation": "int",
            "default": "field(init=False, default=0)",
            "name": "_employment_exits_today",
            "visibility": "private"
          },
          {
            "annotation": "dict[str, int]",
            "default": "field(init=False, default_factory=dict)",
            "name": "_employment_exit_queue_timestamps",
            "visibility": "private"
          },
          {
            "annotation": "set[str]",
            "default": "field(init=False, default_factory=set)",
            "name": "_employment_manual_exits",
            "visibility": "private"
          },
          {
            "annotation": "dict[str, RivalryLedger]",
            "default": "field(init=False, default_factory=dict)",
            "name": "_rivalry_ledgers",
            "visibility": "private"
          },
          {
            "annotation": "dict[str, RelationshipLedger]",
            "default": "field(init=False, default_factory=dict)",
            "name": "_relationship_ledgers",
            "visibility": "private"
          },
          {
            "annotation": "RelationshipChurnAccumulator",
            "default": "field(init=False)",
            "name": "_relationship_churn",
            "visibility": "private"
          },
          {
            "annotation": "deque[dict[str, Any]]",
            "default": "field(init=False, default_factory=deque)",
            "name": "_rivalry_events",
            "visibility": "private"
          },
          {
            "annotation": "int",
            "default": "600",
            "name": "_relationship_window_ticks",
            "visibility": "private"
          },
          {
            "annotation": "dict[str, dict[str, Any]]",
            "default": "field(init=False, default_factory=dict)",
            "name": "_recent_meal_participants",
            "visibility": "private"
          },
          {
            "annotation": "list[dict[str, Any]]",
            "default": "field(init=False, default_factory=list)",
            "name": "_chat_events",
            "visibility": "private"
          },
          {
            "annotation": "Optional[int]",
            "default": "field(init=False, default=None)",
            "name": "_rng_seed",
            "visibility": "private"
          },
          {
            "annotation": "Optional[tuple[Any, ...]]",
            "default": "field(init=False, default=None)",
            "name": "_rng_state",
            "visibility": "private"
          },
          {
            "annotation": "Optional[random.Random]",
            "default": "field(init=False, default=None, repr=False)",
            "name": "_rng",
            "visibility": "private"
          },
          {
            "annotation": "dict[str, object]",
            "default": "field(init=False, default_factory=dict)",
            "name": "_affordance_manifest_info",
            "visibility": "private"
          },
          {
            "annotation": "dict[tuple[int, int], list[str]]",
            "default": "field(init=False, default_factory=dict)",
            "name": "_objects_by_position",
            "visibility": "private"
          },
          {
            "annotation": "dict[str, _ConsoleHandlerEntry]",
            "default": "field(init=False, default_factory=dict)",
            "name": "_console_handlers",
            "visibility": "private"
          },
          {
            "annotation": "OrderedDict[str, ConsoleCommandResult]",
            "default": "field(init=False, default_factory=OrderedDict)",
            "name": "_console_cmd_history",
            "visibility": "private"
          },
          {
            "annotation": "deque[ConsoleCommandResult]",
            "default": "field(init=False, default_factory=deque)",
            "name": "_console_result_buffer",
            "visibility": "private"
          },
          {
            "annotation": "HookRegistry",
            "default": "field(init=False, repr=False)",
            "name": "_hook_registry",
            "visibility": "private"
          },
          {
            "annotation": "set[str]",
            "default": "field(init=False, default_factory=set)",
            "name": "_ctx_reset_requests",
            "visibility": "private"
          },
          {
            "annotation": "dict[str, int]",
            "default": "field(init=False, default_factory=dict)",
            "name": "_respawn_counters",
            "visibility": "private"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Holds mutable world state for the simulation tick.",
        "lineno": 182,
        "methods": [
          {
            "docstring": "Bootstrap the initial world from config.",
            "is_async": false,
            "lineno": 225,
            "name": "from_config",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "cls"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              },
              {
                "annotation": "Optional[random.Random]",
                "default": "None",
                "kind": "keyword_only",
                "name": "rng"
              }
            ],
            "return_type": "'WorldState'",
            "signature": "(cls, config: SimulationConfig, *, rng: Optional[random.Random] = None) -> 'WorldState'"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 237,
            "name": "__post_init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 278,
            "name": "generate_agent_id",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "base_id"
              }
            ],
            "return_type": "str",
            "signature": "(self, base_id: str) -> str"
          },
          {
            "docstring": "Apply console operations before the tick sequence runs.",
            "is_async": false,
            "lineno": 288,
            "name": "apply_console",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Iterable[Any]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "operations"
              }
            ],
            "return_type": "None",
            "signature": "(self, operations: Iterable[Any]) -> None"
          },
          {
            "docstring": "Attach a deterministic RNG used for world-level randomness.",
            "is_async": false,
            "lineno": 381,
            "name": "attach_rng",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "random.Random",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "rng"
              }
            ],
            "return_type": "None",
            "signature": "(self, rng: random.Random) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 388,
            "name": "rng",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "random.Random",
            "signature": "(self) -> random.Random"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 393,
            "name": "get_rng_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "tuple[Any, ...]",
            "signature": "(self) -> tuple[Any, ...]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 396,
            "name": "set_rng_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "tuple[Any, ...]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "state"
              }
            ],
            "return_type": "None",
            "signature": "(self, state: tuple[Any, ...]) -> None"
          },
          {
            "docstring": "Register a console handler for queued commands.",
            "is_async": false,
            "lineno": 404,
            "name": "register_console_handler",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "name"
              },
              {
                "annotation": "Callable[[ConsoleCommandEnvelope], ConsoleCommandResult]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "handler"
              },
              {
                "annotation": "str",
                "default": "'viewer'",
                "kind": "keyword_only",
                "name": "mode"
              },
              {
                "annotation": "bool",
                "default": "False",
                "kind": "keyword_only",
                "name": "require_cmd_id"
              }
            ],
            "return_type": "None",
            "signature": "(self, name: str, handler: Callable[[ConsoleCommandEnvelope], ConsoleCommandResult], *, mode: str = 'viewer', require_cmd_id: bool = False) -> None"
          },
          {
            "docstring": "Register a callable invoked when a manifest hook fires.",
            "is_async": false,
            "lineno": 418,
            "name": "register_affordance_hook",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "name"
              },
              {
                "annotation": "Callable[[dict[str, Any]], None]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "handler"
              }
            ],
            "return_type": "None",
            "signature": "(self, name: str, handler: Callable[[dict[str, Any]], None]) -> None"
          },
          {
            "docstring": "Clear registered affordance hooks (used primarily for tests).",
            "is_async": false,
            "lineno": 425,
            "name": "clear_affordance_hooks",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str | None",
                "default": "None",
                "kind": "positional_or_keyword",
                "name": "name"
              }
            ],
            "return_type": "None",
            "signature": "(self, name: str | None = None) -> None"
          },
          {
            "docstring": "Return and clear buffered console results.",
            "is_async": false,
            "lineno": 430,
            "name": "consume_console_results",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[ConsoleCommandResult]",
            "signature": "(self) -> list[ConsoleCommandResult]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 437,
            "name": "_record_console_result",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommandResult",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "result"
              }
            ],
            "return_type": "None",
            "signature": "(self, result: ConsoleCommandResult) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 444,
            "name": "_dispatch_affordance_hooks",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "stage"
              },
              {
                "annotation": "Iterable[str]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "hook_names"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "agent_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "object_id"
              },
              {
                "annotation": "AffordanceSpec | None",
                "default": null,
                "kind": "keyword_only",
                "name": "spec"
              },
              {
                "annotation": "Mapping[str, Any] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "extra"
              }
            ],
            "return_type": "bool",
            "signature": "(self, stage: str, hook_names: Iterable[str], *, agent_id: str, object_id: str, spec: AffordanceSpec | None, extra: Mapping[str, Any] | None = None) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 485,
            "name": "_build_precondition_context",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "agent_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "object_id"
              },
              {
                "annotation": "AffordanceSpec",
                "default": null,
                "kind": "keyword_only",
                "name": "spec"
              }
            ],
            "return_type": "dict[str, Any]",
            "signature": "(self, *, agent_id: str, object_id: str, spec: AffordanceSpec) -> dict[str, Any]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 564,
            "name": "_snapshot_precondition_context",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, Any]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "context"
              }
            ],
            "return_type": "dict[str, Any]",
            "signature": "(self, context: Mapping[str, Any]) -> dict[str, Any]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 576,
            "name": "_register_default_console_handlers",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 629,
            "name": "_console_noop_handler",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommandEnvelope",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "envelope"
              }
            ],
            "return_type": "ConsoleCommandResult",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 632,
            "name": "_console_employment_status",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommandEnvelope",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "envelope"
              }
            ],
            "return_type": "ConsoleCommandResult",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 640,
            "name": "_console_employment_exit",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommandEnvelope",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "envelope"
              }
            ],
            "return_type": "ConsoleCommandResult",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 669,
            "name": "_assign_job_if_missing",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "AgentSnapshot",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "None",
            "signature": "(self, snapshot: AgentSnapshot) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 673,
            "name": "remove_agent",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "dict[str, Any] | None",
            "signature": "(self, agent_id: str, tick: int) -> dict[str, Any] | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 729,
            "name": "respawn_agent",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, Any]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "blueprint"
              }
            ],
            "return_type": "None",
            "signature": "(self, blueprint: Mapping[str, Any]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 787,
            "name": "_sync_agent_spawn",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "AgentSnapshot",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "None",
            "signature": "(self, snapshot: AgentSnapshot) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 795,
            "name": "_console_spawn_agent",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommandEnvelope",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "envelope"
              }
            ],
            "return_type": "ConsoleCommandResult",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 870,
            "name": "_console_teleport_agent",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommandEnvelope",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "envelope"
              }
            ],
            "return_type": "ConsoleCommandResult",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 905,
            "name": "_release_queue_membership",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "None",
            "signature": "(self, agent_id: str) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 911,
            "name": "_sync_reservation_for_agent",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "None",
            "signature": "(self, agent_id: str) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 916,
            "name": "_is_position_walkable",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "tuple[int, int]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "position"
              }
            ],
            "return_type": "bool",
            "signature": "(self, position: tuple[int, int]) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 923,
            "name": "kill_agent",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "str | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "reason"
              }
            ],
            "return_type": "bool",
            "signature": "(self, agent_id: str, *, reason: str | None = None) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 946,
            "name": "_console_set_need",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommandEnvelope",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "envelope"
              }
            ],
            "return_type": "ConsoleCommandResult",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 988,
            "name": "_console_set_price",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommandEnvelope",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "envelope"
              }
            ],
            "return_type": "ConsoleCommandResult",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1010,
            "name": "_console_force_chat",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommandEnvelope",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "envelope"
              }
            ],
            "return_type": "ConsoleCommandResult",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1052,
            "name": "_console_set_relationship",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommandEnvelope",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "envelope"
              }
            ],
            "return_type": "ConsoleCommandResult",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult"
          },
          {
            "docstring": "Register or update an interactive object in the world.",
            "is_async": false,
            "lineno": 1138,
            "name": "register_object",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "object_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "object_type"
              },
              {
                "annotation": "tuple[int, int] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "position"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, object_id: str, object_type: str, position: tuple[int, int] | None = None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1170,
            "name": "_index_object_position",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              },
              {
                "annotation": "tuple[int, int]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "position"
              }
            ],
            "return_type": "None",
            "signature": "(self, object_id: str, position: tuple[int, int]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1175,
            "name": "_unindex_object_position",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              },
              {
                "annotation": "tuple[int, int]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "position"
              }
            ],
            "return_type": "None",
            "signature": "(self, object_id: str, position: tuple[int, int]) -> None"
          },
          {
            "docstring": "Register an affordance available in the world.",
            "is_async": false,
            "lineno": 1186,
            "name": "register_affordance",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "affordance_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "object_type"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "duration"
              },
              {
                "annotation": "dict[str, float]",
                "default": null,
                "kind": "keyword_only",
                "name": "effects"
              },
              {
                "annotation": "Iterable[str] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "preconditions"
              },
              {
                "annotation": "Mapping[str, Iterable[str]] | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "hooks"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, affordance_id: str, object_type: str, duration: int, effects: dict[str, float], preconditions: Iterable[str] | None = None, hooks: Mapping[str, Iterable[str]] | None = None) -> None"
          },
          {
            "docstring": "Apply agent actions for the current tick.",
            "is_async": false,
            "lineno": 1215,
            "name": "apply_actions",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, Any]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "actions"
              }
            ],
            "return_type": "None",
            "signature": "(self, actions: dict[str, Any]) -> None"
          },
          {
            "docstring": "Resolve queued affordances and hooks.",
            "is_async": false,
            "lineno": 1303,
            "name": "resolve_affordances",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "current_tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, current_tick: int) -> None"
          },
          {
            "docstring": "Mark an agent so the next observation toggles ctx_reset_flag.",
            "is_async": false,
            "lineno": 1368,
            "name": "request_ctx_reset",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "None",
            "signature": "(self, agent_id: str) -> None"
          },
          {
            "docstring": "Return and clear pending ctx-reset requests.",
            "is_async": false,
            "lineno": 1373,
            "name": "consume_ctx_reset_requests",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "set[str]",
            "signature": "(self) -> set[str]"
          },
          {
            "docstring": "Return a shallow copy of the agent dictionary for observers.",
            "is_async": false,
            "lineno": 1379,
            "name": "snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, AgentSnapshot]",
            "signature": "(self) -> dict[str, AgentSnapshot]"
          },
          {
            "docstring": "Return local neighborhood information for observation builders.",
            "is_async": false,
            "lineno": 1383,
            "name": "local_view",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "radius"
              },
              {
                "annotation": "bool",
                "default": "True",
                "kind": "keyword_only",
                "name": "include_agents"
              },
              {
                "annotation": "bool",
                "default": "True",
                "kind": "keyword_only",
                "name": "include_objects"
              }
            ],
            "return_type": "dict[str, Any]",
            "signature": "(self, agent_id: str, radius: int, *, include_agents: bool = True, include_objects: bool = True) -> dict[str, Any]"
          },
          {
            "docstring": "Return scalar context fields for the requested agent.",
            "is_async": false,
            "lineno": 1482,
            "name": "agent_context",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self, agent_id: str) -> dict[str, object]"
          },
          {
            "docstring": "Expose a copy of active reservations for diagnostics/tests.",
            "is_async": false,
            "lineno": 1504,
            "name": "active_reservations",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, str]",
            "signature": "(self) -> dict[str, str]"
          },
          {
            "docstring": "Return all pending events accumulated up to the current tick.",
            "is_async": false,
            "lineno": 1508,
            "name": "drain_events",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[dict[str, Any]]",
            "signature": "(self) -> list[dict[str, Any]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1516,
            "name": "_record_queue_conflict",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "object_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "actor"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "rival"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "reason"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "queue_length"
              },
              {
                "annotation": "float | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "intensity"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, object_id: str, actor: str, rival: str, reason: str, queue_length: int, intensity: float | None = None) -> None"
          },
          {
            "docstring": "Record a rivalry-inducing conflict between two agents.\n\nBoth ledgers are updated symmetrically so downstream consumers can\ninspect rivalry magnitudes without having to normalise directionality.",
            "is_async": false,
            "lineno": 1568,
            "name": "register_rivalry_conflict",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_a"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_b"
              },
              {
                "annotation": "float",
                "default": "1.0",
                "kind": "keyword_only",
                "name": "intensity"
              },
              {
                "annotation": "str",
                "default": "'conflict'",
                "kind": "keyword_only",
                "name": "reason"
              }
            ],
            "return_type": "None",
            "signature": "(self, agent_a: str, agent_b: str, *, intensity: float = 1.0, reason: str = 'conflict') -> None"
          },
          {
            "docstring": "Expose rivalry ledgers for telemetry/diagnostics.",
            "is_async": false,
            "lineno": 1597,
            "name": "rivalry_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, dict[str, float]]",
            "signature": "(self) -> dict[str, dict[str, float]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1606,
            "name": "relationships_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, dict[str, dict[str, float]]]",
            "signature": "(self) -> dict[str, dict[str, dict[str, float]]]"
          },
          {
            "docstring": "Return the current relationship tie between two agents, if any.",
            "is_async": false,
            "lineno": 1614,
            "name": "relationship_tie",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              }
            ],
            "return_type": "RelationshipTie | None",
            "signature": "(self, agent_id: str, other_id: str) -> RelationshipTie | None"
          },
          {
            "docstring": "Return chat events staged for reward calculations and clear the buffer.",
            "is_async": false,
            "lineno": 1622,
            "name": "consume_chat_events",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[dict[str, Any]]",
            "signature": "(self) -> list[dict[str, Any]]"
          },
          {
            "docstring": "Return the rivalry score between two agents, if present.",
            "is_async": false,
            "lineno": 1629,
            "name": "rivalry_value",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              }
            ],
            "return_type": "float",
            "signature": "(self, agent_id: str, other_id: str) -> float"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1636,
            "name": "rivalry_should_avoid",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              }
            ],
            "return_type": "bool",
            "signature": "(self, agent_id: str, other_id: str) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1642,
            "name": "rivalry_top",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "limit"
              }
            ],
            "return_type": "list[tuple[str, float]]",
            "signature": "(self, agent_id: str, limit: int) -> list[tuple[str, float]]"
          },
          {
            "docstring": "Return rivalry events recorded since the last call.",
            "is_async": false,
            "lineno": 1648,
            "name": "consume_rivalry_events",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[dict[str, Any]]",
            "signature": "(self) -> list[dict[str, Any]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1657,
            "name": "_record_rivalry_event",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "agent_a"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "agent_b"
              },
              {
                "annotation": "float",
                "default": null,
                "kind": "keyword_only",
                "name": "intensity"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "reason"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, agent_a: str, agent_b: str, intensity: float, reason: str) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1670,
            "name": "_get_rivalry_ledger",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "RivalryLedger",
            "signature": "(self, agent_id: str) -> RivalryLedger"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1683,
            "name": "_get_relationship_ledger",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "RelationshipLedger",
            "signature": "(self, agent_id: str) -> RelationshipLedger"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1699,
            "name": "_relationship_parameters",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "RelationshipParameters",
            "signature": "(self) -> RelationshipParameters"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1702,
            "name": "_personality_for",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "Personality",
            "signature": "(self, agent_id: str) -> Personality"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1708,
            "name": "_apply_relationship_delta",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "owner_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              },
              {
                "annotation": "RelationshipDelta",
                "default": null,
                "kind": "keyword_only",
                "name": "delta"
              },
              {
                "annotation": "RelationshipEvent",
                "default": null,
                "kind": "keyword_only",
                "name": "event"
              }
            ],
            "return_type": "None",
            "signature": "(self, owner_id: str, other_id: str, *, delta: RelationshipDelta, event: RelationshipEvent) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1730,
            "name": "_rivalry_parameters",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "RivalryParameters",
            "signature": "(self) -> RivalryParameters"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1742,
            "name": "_decay_rivalry_ledgers",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1754,
            "name": "_decay_relationship_ledgers",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1765,
            "name": "_record_relationship_eviction",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "owner_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "reason"
              }
            ],
            "return_type": "None",
            "signature": "(self, owner_id: str, other_id: str, reason: str) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1773,
            "name": "relationship_metrics_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": "Restore relationship ledgers from persisted snapshot data.",
            "is_async": false,
            "lineno": 1776,
            "name": "load_relationship_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, dict[str, dict[str, float]]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "None",
            "signature": "(self, snapshot: dict[str, dict[str, dict[str, float]]]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1795,
            "name": "update_relationship",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_a"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_b"
              },
              {
                "annotation": "float",
                "default": "0.0",
                "kind": "keyword_only",
                "name": "trust"
              },
              {
                "annotation": "float",
                "default": "0.0",
                "kind": "keyword_only",
                "name": "familiarity"
              },
              {
                "annotation": "float",
                "default": "0.0",
                "kind": "keyword_only",
                "name": "rivalry"
              },
              {
                "annotation": "RelationshipEvent",
                "default": "'generic'",
                "kind": "keyword_only",
                "name": "event"
              }
            ],
            "return_type": "None",
            "signature": "(self, agent_a: str, agent_b: str, *, trust: float = 0.0, familiarity: float = 0.0, rivalry: float = 0.0, event: RelationshipEvent = 'generic') -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1811,
            "name": "record_chat_success",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "speaker"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "listener"
              },
              {
                "annotation": "float",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "quality"
              }
            ],
            "return_type": "None",
            "signature": "(self, speaker: str, listener: str, quality: float) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1838,
            "name": "record_chat_failure",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "speaker"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "listener"
              }
            ],
            "return_type": "None",
            "signature": "(self, speaker: str, listener: str) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1866,
            "name": "_sync_reservation",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              }
            ],
            "return_type": "None",
            "signature": "(self, object_id: str) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1878,
            "name": "_handle_blocked",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, object_id: str, tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1897,
            "name": "_start_affordance",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "affordance_id"
              }
            ],
            "return_type": "bool",
            "signature": "(self, agent_id: str, object_id: str, affordance_id: str) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 1993,
            "name": "_apply_affordance_effects",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "dict[str, float]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "effects"
              }
            ],
            "return_type": "None",
            "signature": "(self, agent_id: str, effects: dict[str, float]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2004,
            "name": "_emit_event",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "event"
              },
              {
                "annotation": "dict[str, Any]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, event: str, payload: dict[str, Any]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2008,
            "name": "_load_affordance_definitions",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": "Expose manifest metadata (path, checksum, counts) for telemetry.",
            "is_async": false,
            "lineno": 2053,
            "name": "affordance_manifest_metadata",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2058,
            "name": "find_nearest_object_of_type",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_type"
              },
              {
                "annotation": "tuple[int, int]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "origin"
              }
            ],
            "return_type": "tuple[int, int] | None",
            "signature": "(self, object_type: str, origin: tuple[int, int]) -> tuple[int, int] | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2072,
            "name": "_apply_need_decay",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": "Return agents home, refresh needs, and reset employment flags.",
            "is_async": false,
            "lineno": 2082,
            "name": "apply_nightly_reset",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "list[str]",
            "signature": "(self) -> list[str]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2149,
            "name": "_assign_jobs_to_agents",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2159,
            "name": "_apply_job_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2165,
            "name": "_apply_job_state_legacy",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2209,
            "name": "_apply_job_state_enforced",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2293,
            "name": "_employment_context_defaults",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, Any]",
            "signature": "(self) -> dict[str, Any]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2319,
            "name": "_get_employment_context",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "dict[str, Any]",
            "signature": "(self, agent_id: str) -> dict[str, Any]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2332,
            "name": "_employment_context_wages",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "float",
            "signature": "(self, agent_id: str) -> float"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2338,
            "name": "_employment_context_punctuality",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "float",
            "signature": "(self, agent_id: str) -> float"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2347,
            "name": "_employment_idle_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "AgentSnapshot",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              },
              {
                "annotation": "dict[str, Any]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "ctx"
              }
            ],
            "return_type": "None",
            "signature": "(self, snapshot: AgentSnapshot, ctx: dict[str, Any]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2367,
            "name": "_employment_prepare_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "AgentSnapshot",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              },
              {
                "annotation": "dict[str, Any]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "ctx"
              }
            ],
            "return_type": "None",
            "signature": "(self, snapshot: AgentSnapshot, ctx: dict[str, Any]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2372,
            "name": "_employment_begin_shift",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, Any]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "ctx"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "start"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "end"
              }
            ],
            "return_type": "None",
            "signature": "(self, ctx: dict[str, Any], start: int, end: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2392,
            "name": "_employment_determine_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, Any]",
                "default": null,
                "kind": "keyword_only",
                "name": "ctx"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "tick"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "keyword_only",
                "name": "start"
              },
              {
                "annotation": "bool",
                "default": null,
                "kind": "keyword_only",
                "name": "at_required_location"
              },
              {
                "annotation": "EmploymentConfig",
                "default": null,
                "kind": "keyword_only",
                "name": "employment_cfg"
              }
            ],
            "return_type": "str",
            "signature": "(self, *, ctx: dict[str, Any], tick: int, start: int, at_required_location: bool, employment_cfg: EmploymentConfig) -> str"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2426,
            "name": "_employment_apply_state_effects",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "AgentSnapshot",
                "default": null,
                "kind": "keyword_only",
                "name": "snapshot"
              },
              {
                "annotation": "dict[str, Any]",
                "default": null,
                "kind": "keyword_only",
                "name": "ctx"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "state"
              },
              {
                "annotation": "bool",
                "default": null,
                "kind": "keyword_only",
                "name": "at_required_location"
              },
              {
                "annotation": "float",
                "default": null,
                "kind": "keyword_only",
                "name": "wage_rate"
              },
              {
                "annotation": "float",
                "default": null,
                "kind": "keyword_only",
                "name": "lateness_penalty"
              },
              {
                "annotation": "EmploymentConfig",
                "default": null,
                "kind": "keyword_only",
                "name": "employment_cfg"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, snapshot: AgentSnapshot, ctx: dict[str, Any], state: str, at_required_location: bool, wage_rate: float, lateness_penalty: float, employment_cfg: EmploymentConfig) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2551,
            "name": "_employment_finalize_shift",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "AgentSnapshot",
                "default": null,
                "kind": "keyword_only",
                "name": "snapshot"
              },
              {
                "annotation": "dict[str, Any]",
                "default": null,
                "kind": "keyword_only",
                "name": "ctx"
              },
              {
                "annotation": "EmploymentConfig",
                "default": null,
                "kind": "keyword_only",
                "name": "employment_cfg"
              },
              {
                "annotation": "str | None",
                "default": null,
                "kind": "keyword_only",
                "name": "job_id"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, snapshot: AgentSnapshot, ctx: dict[str, Any], employment_cfg: EmploymentConfig, job_id: str | None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2588,
            "name": "_employment_coworkers_on_shift",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "AgentSnapshot",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              }
            ],
            "return_type": "list[str]",
            "signature": "(self, snapshot: AgentSnapshot) -> list[str]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2601,
            "name": "_employment_enqueue_exit",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, agent_id: str, tick: int) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2627,
            "name": "_employment_remove_from_queue",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "None",
            "signature": "(self, agent_id: str) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2635,
            "name": "employment_queue_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, Any]",
            "signature": "(self) -> dict[str, Any]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2645,
            "name": "employment_request_manual_exit",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "bool",
            "signature": "(self, agent_id: str, tick: int) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2658,
            "name": "employment_defer_exit",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "bool",
            "signature": "(self, agent_id: str) -> bool"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2672,
            "name": "_update_basket_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 2683,
            "name": "_restock_economy",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          }
        ],
        "name": "WorldState"
      }
    ],
    "constants": [
      {
        "name": "_CONSOLE_HISTORY_LIMIT",
        "value": "512"
      },
      {
        "name": "_CONSOLE_RESULT_BUFFER_LIMIT",
        "value": "256"
      },
      {
        "annotation": "tuple[str, ...]",
        "name": "_BASE_NEEDS",
        "value": "('hunger', 'hygiene', 'energy')"
      }
    ],
    "docstring": "Grid world representation and affordance integration.",
    "env_vars": [
      "environ"
    ],
    "functions": [
      {
        "docstring": "Provide a neutral personality for agents lacking explicit traits.",
        "is_async": false,
        "lineno": 90,
        "name": "_default_personality",
        "params": [],
        "return_type": "Personality",
        "signature": "() -> Personality"
      }
    ],
    "has_dataclasses": true,
    "has_logging": true,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.agents.models",
        "townlet.agents.relationship_modifiers",
        "townlet.config",
        "townlet.config.affordance_manifest",
        "townlet.console.command",
        "townlet.observations.embedding",
        "townlet.telemetry.relationship_metrics",
        "townlet.world.hooks",
        "townlet.world.preconditions",
        "townlet.world.queue_manager",
        "townlet.world.relationships",
        "townlet.world.rivalry"
      ],
      "stdlib": [
        "__future__",
        "collections",
        "collections.abc",
        "dataclasses",
        "logging",
        "os",
        "pathlib",
        "random",
        "typing"
      ]
    },
    "lines": 2700,
    "module_name": "townlet.world.grid",
    "path": "src/townlet/world/grid.py",
    "todos": [
      1296,
      1328
    ]
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Affordance hook plug-in namespace.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Import hook modules and let them register against the given world.",
        "is_async": false,
        "lineno": 11,
        "name": "load_modules",
        "params": [
          {
            "annotation": "'WorldState'",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "world"
          },
          {
            "annotation": "Iterable[str]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "module_paths"
          }
        ],
        "return_type": "None",
        "signature": "(world: 'WorldState', module_paths: Iterable[str]) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "importlib"
      ],
      "internal": [
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "typing"
      ]
    },
    "lines": 20,
    "module_name": "townlet.world.hooks",
    "path": "src/townlet/world/hooks/__init__.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "_AFFORDANCE_FAIL_EVENT",
        "value": "'affordance_fail'"
      },
      {
        "name": "_SHOWER_COMPLETE_EVENT",
        "value": "'shower_complete'"
      },
      {
        "name": "_SHOWER_POWER_EVENT",
        "value": "'shower_power_outage'"
      },
      {
        "name": "_SLEEP_COMPLETE_EVENT",
        "value": "'sleep_complete'"
      }
    ],
    "docstring": "Built-in affordance hook handlers.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Register built-in affordance hooks with the provided world.",
        "is_async": false,
        "lineno": 16,
        "name": "register_hooks",
        "params": [
          {
            "annotation": "'WorldState'",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "world"
          }
        ],
        "return_type": "None",
        "signature": "(world: 'WorldState') -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 31,
        "name": "_on_attempt_shower",
        "params": [
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "None",
        "signature": "(context: dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 61,
        "name": "_on_finish_shower",
        "params": [
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "None",
        "signature": "(context: dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 80,
        "name": "_on_no_power",
        "params": [
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "None",
        "signature": "(context: dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 96,
        "name": "_on_attempt_eat",
        "params": [
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "None",
        "signature": "(context: dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 136,
        "name": "_on_finish_eat",
        "params": [
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "None",
        "signature": "(context: dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 165,
        "name": "_on_attempt_cook",
        "params": [
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "None",
        "signature": "(context: dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 193,
        "name": "_on_finish_cook",
        "params": [
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "None",
        "signature": "(context: dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 207,
        "name": "_on_cook_fail",
        "params": [
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "None",
        "signature": "(context: dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 217,
        "name": "_on_attempt_sleep",
        "params": [
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "None",
        "signature": "(context: dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 249,
        "name": "_on_finish_sleep",
        "params": [
          {
            "annotation": "dict[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "None",
        "signature": "(context: dict[str, Any]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 277,
        "name": "_abort_affordance",
        "params": [
          {
            "annotation": "'WorldState'",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "world"
          },
          {
            "annotation": "Any",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "spec"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "agent_id"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "object_id"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "reason"
          }
        ],
        "return_type": "None",
        "signature": "(world: 'WorldState', spec: Any, agent_id: str, object_id: str, reason: str) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "typing"
      ]
    },
    "lines": 313,
    "module_name": "townlet.world.hooks.default",
    "path": "src/townlet/world/hooks/default.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [
          "ValueError"
        ],
        "decorators": [],
        "docstring": "Raised when a manifest precondition has invalid syntax.",
        "lineno": 19,
        "methods": [],
        "name": "PreconditionSyntaxError"
      },
      {
        "attributes": [],
        "bases": [
          "RuntimeError"
        ],
        "decorators": [],
        "docstring": "Raised when evaluation fails due to missing context or type errors.",
        "lineno": 23,
        "methods": [],
        "name": "PreconditionEvaluationError"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "source",
            "visibility": "public"
          },
          {
            "annotation": "ast.AST",
            "default": null,
            "name": "tree",
            "visibility": "public"
          },
          {
            "annotation": "tuple[str, ...]",
            "default": null,
            "name": "identifiers",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": "Stores the parsed AST and metadata for a precondition.",
        "lineno": 74,
        "methods": [],
        "name": "CompiledPrecondition"
      },
      {
        "attributes": [],
        "bases": [
          "ast.NodeVisitor"
        ],
        "decorators": [],
        "docstring": null,
        "lineno": 82,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 83,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": "Collect bare identifiers used in the expression.",
            "is_async": false,
            "lineno": 87,
            "name": "visit_Name",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ast.Name",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "node"
              }
            ],
            "return_type": "None",
            "signature": "(self, node: ast.Name) -> None"
          }
        ],
        "name": "_IdentifierCollector"
      }
    ],
    "constants": [
      {
        "name": "_ALLOWED_COMPARE_OPS",
        "value": "(ast.Eq, ast.NotEq, ast.Lt, ast.LtE, ast.Gt, ast.GtE, ast.In, ast.NotIn)"
      },
      {
        "name": "_ALLOWED_BOOL_OPS",
        "value": "(ast.And, ast.Or)"
      },
      {
        "name": "_ALLOWED_UNARY_OPS",
        "value": "(ast.Not, ast.USub, ast.UAdd)"
      },
      {
        "name": "_ALLOWED_NODE_TYPES",
        "value": "(ast.Expression, ast.BoolOp, ast.Compare, ast.Name, ast.Attribute, ast.Subscript, ast.Constant, ast.UnaryOp, ast.Tuple, ast.List, ast.Eq, ast.NotEq, ast.Lt, ast.LtE, ast.Gt, ast.GtE, ast.In, ast.NotIn, ast.And, ast.Or, ast.Load, ast.USub, ast.UAdd, ast.Not)"
      }
    ],
    "docstring": "Affordance precondition compilation and evaluation helpers.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 94,
        "name": "_normalize_expression",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "expression"
          }
        ],
        "return_type": "str",
        "signature": "(expression: str) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 102,
        "name": "_validate_tree",
        "params": [
          {
            "annotation": "ast.AST",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tree"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "source"
          }
        ],
        "return_type": "tuple[str, ...]",
        "signature": "(tree: ast.AST, source: str) -> tuple[str, ...]"
      },
      {
        "docstring": "Compile manifest preconditions, raising on syntax errors.",
        "is_async": false,
        "lineno": 134,
        "name": "compile_preconditions",
        "params": [
          {
            "annotation": "Iterable[str]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "expressions"
          }
        ],
        "return_type": "tuple[CompiledPrecondition, ...]",
        "signature": "(expressions: Iterable[str]) -> tuple[CompiledPrecondition, ...]"
      },
      {
        "docstring": "Compile a single precondition expression.",
        "is_async": false,
        "lineno": 156,
        "name": "compile_precondition",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "expression"
          }
        ],
        "return_type": "CompiledPrecondition",
        "signature": "(expression: str) -> CompiledPrecondition"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 162,
        "name": "_resolve_name",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "name"
          },
          {
            "annotation": "Mapping[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "Any",
        "signature": "(name: str, context: Mapping[str, Any]) -> Any"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 169,
        "name": "_resolve_attr",
        "params": [
          {
            "annotation": "Any",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "attr"
          }
        ],
        "return_type": "Any",
        "signature": "(value: Any, attr: str) -> Any"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 177,
        "name": "_resolve_subscript",
        "params": [
          {
            "annotation": "Any",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "Any",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "key"
          }
        ],
        "return_type": "Any",
        "signature": "(value: Any, key: Any) -> Any"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 184,
        "name": "_evaluate",
        "params": [
          {
            "annotation": "ast.AST",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "node"
          },
          {
            "annotation": "Mapping[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "Any",
        "signature": "(node: ast.AST, context: Mapping[str, Any]) -> Any"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 241,
        "name": "_apply_compare",
        "params": [
          {
            "annotation": "ast.cmpop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "operator"
          },
          {
            "annotation": "Any",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "left"
          },
          {
            "annotation": "Any",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "right"
          }
        ],
        "return_type": "bool",
        "signature": "(operator: ast.cmpop, left: Any, right: Any) -> bool"
      },
      {
        "docstring": "Evaluate compiled preconditions against the provided context.\n\nReturns\n-------\ntuple\n    ``(True, None)`` if all preconditions pass, otherwise ``(False, failed)``\n    where ``failed`` references the first failing precondition.",
        "is_async": false,
        "lineno": 269,
        "name": "evaluate_preconditions",
        "params": [
          {
            "annotation": "Sequence[CompiledPrecondition]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "preconditions"
          },
          {
            "annotation": "Mapping[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "context"
          }
        ],
        "return_type": "tuple[bool, CompiledPrecondition | None]",
        "signature": "(preconditions: Sequence[CompiledPrecondition], context: Mapping[str, Any]) -> tuple[bool, CompiledPrecondition | None]"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "ast",
        "re"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "dataclasses",
        "typing"
      ]
    },
    "lines": 289,
    "module_name": "townlet.world.preconditions",
    "path": "src/townlet/world/preconditions.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "agent_id",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "joined_tick",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Represents an agent waiting to access an interactive object.",
        "lineno": 18,
        "methods": [],
        "name": "QueueEntry"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Coordinates reservations and fairness across interactive queues.",
        "lineno": 25,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 28,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "SimulationConfig",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              }
            ],
            "return_type": "None",
            "signature": "(self, config: SimulationConfig) -> None"
          },
          {
            "docstring": "Expire cooldown entries whose window has elapsed.",
            "is_async": false,
            "lineno": 53,
            "name": "on_tick",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, tick: int) -> None"
          },
          {
            "docstring": "Attempt to reserve the object for the agent.\n\nReturns True if the agent is granted the reservation immediately,\notherwise the agent is queued and False is returned.",
            "is_async": false,
            "lineno": 59,
            "name": "request_access",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "bool",
            "signature": "(self, object_id: str, agent_id: str, tick: int) -> bool"
          },
          {
            "docstring": "Release the reservation and optionally apply cooldown.",
            "is_async": false,
            "lineno": 88,
            "name": "release",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              },
              {
                "annotation": "bool",
                "default": "True",
                "kind": "keyword_only",
                "name": "success"
              }
            ],
            "return_type": "None",
            "signature": "(self, object_id: str, agent_id: str, tick: int, *, success: bool = True) -> None"
          },
          {
            "docstring": "Register that the current head was blocked.\n\nReturns True if a ghost-step should be triggered for the head agent.",
            "is_async": false,
            "lineno": 110,
            "name": "record_blocked_attempt",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              }
            ],
            "return_type": "bool",
            "signature": "(self, object_id: str) -> bool"
          },
          {
            "docstring": "Return the agent currently holding the reservation, if any.",
            "is_async": false,
            "lineno": 133,
            "name": "active_agent",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              }
            ],
            "return_type": "str | None",
            "signature": "(self, object_id: str) -> str | None"
          },
          {
            "docstring": "Return the queue as an ordered list of agent IDs for debugging.",
            "is_async": false,
            "lineno": 137,
            "name": "queue_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              }
            ],
            "return_type": "list[str]",
            "signature": "(self, object_id: str) -> list[str]"
          },
          {
            "docstring": "Expose counters useful for telemetry.",
            "is_async": false,
            "lineno": 141,
            "name": "metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, int]",
            "signature": "(self) -> dict[str, int]"
          },
          {
            "docstring": "Expose aggregated nanosecond timings and call counts.",
            "is_async": false,
            "lineno": 145,
            "name": "performance_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, int]",
            "signature": "(self) -> dict[str, int]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 149,
            "name": "reset_performance_metrics",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": "Append `agent_id` to the end of the queue if not already present.",
            "is_async": false,
            "lineno": 153,
            "name": "requeue_to_tail",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, object_id: str, agent_id: str, tick: int) -> None"
          },
          {
            "docstring": "Remove `agent_id` from all queues and active reservations.",
            "is_async": false,
            "lineno": 162,
            "name": "remove_agent",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "None",
            "signature": "(self, agent_id: str, tick: int) -> None"
          },
          {
            "docstring": "Serialise queue activity for snapshot persistence.",
            "is_async": false,
            "lineno": 176,
            "name": "export_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, object]",
            "signature": "(self) -> dict[str, object]"
          },
          {
            "docstring": "Restore queue activity from persisted snapshot data.",
            "is_async": false,
            "lineno": 199,
            "name": "import_state",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, object]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: dict[str, object]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 243,
            "name": "_assign_next",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "object_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "tick"
              }
            ],
            "return_type": "str | None",
            "signature": "(self, object_id: str, tick: int) -> str | None"
          }
        ],
        "name": "QueueManager"
      }
    ],
    "constants": [],
    "docstring": "Queue management with fairness guardrails.\n\nThis module implements the queue semantics described in docs/REQUIREMENTS.md#5.\nQueues are maintained per interactive object, and fairness is controlled through\ncooldowns, queue-age prioritisation, and a ghost-step breaker that prevents\nlong-lived deadlocks.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config"
      ],
      "stdlib": [
        "__future__",
        "dataclasses",
        "time"
      ]
    },
    "lines": 273,
    "module_name": "townlet.world.queue_manager",
    "path": "src/townlet/world/queue_manager.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "int",
            "default": "6",
            "name": "max_edges",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "trust_decay",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "familiarity_decay",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.01",
            "name": "rivalry_decay",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Tuning knobs for relationship tie evolution.",
        "lineno": 14,
        "methods": [],
        "name": "RelationshipParameters"
      },
      {
        "attributes": [
          {
            "annotation": "float",
            "default": "0.0",
            "name": "trust",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "familiarity",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "rivalry",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "lineno": 24,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 29,
            "name": "as_dict",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self) -> dict[str, float]"
          }
        ],
        "name": "RelationshipTie"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Maintains multi-dimensional ties for a single agent.",
        "lineno": 40,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 43,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "owner_id"
              },
              {
                "annotation": "RelationshipParameters | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "params"
              },
              {
                "annotation": "EvictionHook | None",
                "default": "None",
                "kind": "keyword_only",
                "name": "eviction_hook"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, owner_id: str, params: RelationshipParameters | None = None, eviction_hook: EvictionHook | None = None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 55,
            "name": "apply_delta",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              },
              {
                "annotation": "float",
                "default": "0.0",
                "kind": "keyword_only",
                "name": "trust"
              },
              {
                "annotation": "float",
                "default": "0.0",
                "kind": "keyword_only",
                "name": "familiarity"
              },
              {
                "annotation": "float",
                "default": "0.0",
                "kind": "keyword_only",
                "name": "rivalry"
              }
            ],
            "return_type": "RelationshipTie",
            "signature": "(self, other_id: str, *, trust: float = 0.0, familiarity: float = 0.0, rivalry: float = 0.0) -> RelationshipTie"
          },
          {
            "docstring": "Return the tie for ``other_id`` if it exists.",
            "is_async": false,
            "lineno": 73,
            "name": "tie_for",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              }
            ],
            "return_type": "RelationshipTie | None",
            "signature": "(self, other_id: str) -> RelationshipTie | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 78,
            "name": "decay",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 91,
            "name": "snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, dict[str, float]]",
            "signature": "(self) -> dict[str, dict[str, float]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 94,
            "name": "inject",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, dict[str, float]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "None",
            "signature": "(self, payload: dict[str, dict[str, float]]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 105,
            "name": "set_eviction_hook",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "owner_id"
              },
              {
                "annotation": "EvictionHook | None",
                "default": null,
                "kind": "keyword_only",
                "name": "hook"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, owner_id: str, hook: EvictionHook | None) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 109,
            "name": "top_friends",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "limit"
              }
            ],
            "return_type": "list[tuple[str, RelationshipTie]]",
            "signature": "(self, limit: int) -> list[tuple[str, RelationshipTie]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 119,
            "name": "top_rivals",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "limit"
              }
            ],
            "return_type": "list[tuple[str, RelationshipTie]]",
            "signature": "(self, limit: int) -> list[tuple[str, RelationshipTie]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 129,
            "name": "remove_tie",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              },
              {
                "annotation": "str",
                "default": "'removed'",
                "kind": "keyword_only",
                "name": "reason"
              }
            ],
            "return_type": "None",
            "signature": "(self, other_id: str, *, reason: str = 'removed') -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 134,
            "name": "_prune_if_needed",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "reason"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, reason: str) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 147,
            "name": "_emit_eviction",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "reason"
              }
            ],
            "return_type": "None",
            "signature": "(self, other_id: str, *, reason: str) -> None"
          }
        ],
        "name": "RelationshipLedger"
      }
    ],
    "constants": [],
    "docstring": "Relationship ledger for Phase 4 social systems.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 9,
        "name": "_clamp",
        "params": [
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "keyword_only",
            "name": "low"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "keyword_only",
            "name": "high"
          }
        ],
        "return_type": "float",
        "signature": "(value: float, *, low: float, high: float) -> float"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 155,
        "name": "_decay_value",
        "params": [
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "decay"
          },
          {
            "annotation": "float",
            "default": "-1.0",
            "kind": "keyword_only",
            "name": "minimum"
          }
        ],
        "return_type": "float",
        "signature": "(value: float, decay: float, *, minimum: float = -1.0) -> float"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [],
      "stdlib": [
        "__future__",
        "collections.abc",
        "dataclasses"
      ]
    },
    "lines": 169,
    "module_name": "townlet.world.relationships",
    "path": "src/townlet/world/relationships.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "float",
            "default": "0.15",
            "name": "increment_per_conflict",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.01",
            "name": "decay_per_tick",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "name": "min_value",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "1.0",
            "name": "max_value",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.7",
            "name": "avoid_threshold",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": "0.05",
            "name": "eviction_threshold",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": "6",
            "name": "max_edges",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Tuning knobs for rivalry evolution.\n\nThe defaults align with the conceptual design placeholder values and are\nexpected to be replaced with config-backed settings during integration.",
        "lineno": 20,
        "methods": [],
        "name": "RivalryParameters"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "owner_id",
            "visibility": "public"
          },
          {
            "annotation": "RivalryParameters",
            "default": "field(default_factory=RivalryParameters)",
            "name": "params",
            "visibility": "public"
          },
          {
            "annotation": "Optional[Callable[[str, str, str], None]]",
            "default": "None",
            "name": "eviction_hook",
            "visibility": "public"
          },
          {
            "annotation": "dict[str, float]",
            "default": "field(default_factory=dict)",
            "name": "_scores",
            "visibility": "private"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Maintains rivalry scores against other agents for a single actor.",
        "lineno": 37,
        "methods": [
          {
            "docstring": "Increase rivalry against `other_id` based on the conflict intensity.",
            "is_async": false,
            "lineno": 45,
            "name": "apply_conflict",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              },
              {
                "annotation": "float",
                "default": "1.0",
                "kind": "keyword_only",
                "name": "intensity"
              }
            ],
            "return_type": "float",
            "signature": "(self, other_id: str, *, intensity: float = 1.0) -> float"
          },
          {
            "docstring": "Apply passive decay across all rivalry edges.",
            "is_async": false,
            "lineno": 69,
            "name": "decay",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": "1",
                "kind": "positional_or_keyword",
                "name": "ticks"
              }
            ],
            "return_type": "None",
            "signature": "(self, ticks: int = 1) -> None"
          },
          {
            "docstring": "Seed rivalry scores from persisted state for round-tripping tests.",
            "is_async": false,
            "lineno": 86,
            "name": "inject",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Iterable[tuple[str, float]]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "pairs"
              }
            ],
            "return_type": "None",
            "signature": "(self, pairs: Iterable[tuple[str, float]]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 95,
            "name": "score_for",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              }
            ],
            "return_type": "float",
            "signature": "(self, other_id: str) -> float"
          },
          {
            "docstring": "Return True when rivalry exceeds the avoidance threshold.",
            "is_async": false,
            "lineno": 98,
            "name": "should_avoid",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              }
            ],
            "return_type": "bool",
            "signature": "(self, other_id: str) -> bool"
          },
          {
            "docstring": "Return the strongest rivalry edges sorted descending.",
            "is_async": false,
            "lineno": 102,
            "name": "top_rivals",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "limit"
              }
            ],
            "return_type": "list[tuple[str, float]]",
            "signature": "(self, limit: int) -> list[tuple[str, float]]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 113,
            "name": "remove",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              },
              {
                "annotation": "str",
                "default": "'removed'",
                "kind": "keyword_only",
                "name": "reason"
              }
            ],
            "return_type": "None",
            "signature": "(self, other_id: str, *, reason: str = 'removed') -> None"
          },
          {
            "docstring": "Encode rivalry magnitudes into a fixed-width list for observations.",
            "is_async": false,
            "lineno": 119,
            "name": "encode_features",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "limit"
              }
            ],
            "return_type": "list[float]",
            "signature": "(self, limit: int) -> list[float]"
          },
          {
            "docstring": "Return a copy of rivalry scores for telemetry serialization.",
            "is_async": false,
            "lineno": 128,
            "name": "snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 132,
            "name": "_emit_eviction",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "other_id"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "keyword_only",
                "name": "reason"
              }
            ],
            "return_type": "None",
            "signature": "(self, other_id: str, *, reason: str) -> None"
          }
        ],
        "name": "RivalryLedger"
      }
    ],
    "constants": [],
    "docstring": "Rivalry state helpers used by conflict intro scaffolding.\n\nThese utilities intentionally stay decoupled from the world grid so we can unit\n test rivalry increments/decay behaviour in isolation before wiring into the\n main simulation loop.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 15,
        "name": "_clamp",
        "params": [
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "keyword_only",
            "name": "low"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "keyword_only",
            "name": "high"
          }
        ],
        "return_type": "float",
        "signature": "(value: float, *, low: float, high: float) -> float"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [],
      "stdlib": [
        "__future__",
        "collections.abc",
        "dataclasses",
        "typing"
      ]
    },
    "lines": 135,
    "module_name": "townlet.world.rivalry",
    "path": "src/townlet/world/rivalry.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": "Observer UI toolkit exports.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": false,
    "imports": {
      "external": [],
      "internal": [
        "townlet_ui.commands",
        "townlet_ui.telemetry"
      ],
      "stdlib": []
    },
    "lines": 19,
    "module_name": "townlet_ui",
    "path": "src/townlet_ui/__init__.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Background dispatcher that forwards console commands via a router.",
        "lineno": 15,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 18,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Any",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "router"
              },
              {
                "annotation": "bool",
                "default": "True",
                "kind": "keyword_only",
                "name": "daemon"
              }
            ],
            "return_type": "None",
            "signature": "(self, router: Any, *, daemon: bool = True) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 26,
            "name": "submit",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommand",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "command"
              }
            ],
            "return_type": "None",
            "signature": "(self, command: ConsoleCommand) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 29,
            "name": "shutdown",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "float | None",
                "default": "1.0",
                "kind": "positional_or_keyword",
                "name": "timeout"
              }
            ],
            "return_type": "None",
            "signature": "(self, timeout: float | None = 1.0) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 33,
            "name": "_worker",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          }
        ],
        "name": "ConsoleCommandExecutor"
      }
    ],
    "constants": [],
    "docstring": "Helper utilities for dispatching console commands asynchronously.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": true,
    "has_type_hints": true,
    "imports": {
      "external": [
        "queue",
        "threading"
      ],
      "internal": [
        "townlet.console.handlers"
      ],
      "stdlib": [
        "__future__",
        "logging",
        "typing"
      ]
    },
    "lines": 41,
    "module_name": "townlet_ui.commands",
    "path": "src/townlet_ui/commands.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "MAP_AGENT_CHAR",
        "value": "'A'"
      },
      {
        "name": "MAP_CENTER_CHAR",
        "value": "'S'"
      },
      {
        "annotation": "dict[str, tuple[str, str]]",
        "name": "NARRATION_CATEGORY_STYLES",
        "value": "{'utility_outage': ('Utility Outage', 'bold red'), 'shower_complete': ('Shower Complete', 'cyan'), 'sleep_complete': ('Sleep Complete', 'green'), 'queue_conflict': ('Queue Conflict', 'magenta')}"
      }
    ],
    "docstring": "Rich-based console dashboard for Townlet observer UI.",
    "env_vars": [],
    "functions": [
      {
        "docstring": "Yield rich Panels representing the current telemetry snapshot.",
        "is_async": false,
        "lineno": 36,
        "name": "render_snapshot",
        "params": [
          {
            "annotation": "TelemetrySnapshot",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "snapshot"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tick"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "refreshed"
          }
        ],
        "return_type": "Iterable[Panel]",
        "signature": "(snapshot: TelemetrySnapshot, tick: int, refreshed: str) -> Iterable[Panel]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 256,
        "name": "_format_top_entries",
        "params": [
          {
            "annotation": "Mapping[str, int]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "entries"
          }
        ],
        "return_type": "str",
        "signature": "(entries: Mapping[str, int]) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 263,
        "name": "_build_narration_panel",
        "params": [
          {
            "annotation": "TelemetrySnapshot",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "snapshot"
          }
        ],
        "return_type": "Panel",
        "signature": "(snapshot: TelemetrySnapshot) -> Panel"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 291,
        "name": "_build_anneal_panel",
        "params": [
          {
            "annotation": "TelemetrySnapshot",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "snapshot"
          }
        ],
        "return_type": "Panel",
        "signature": "(snapshot: TelemetrySnapshot) -> Panel"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 413,
        "name": "_promotion_border_style",
        "params": [
          {
            "annotation": "PromotionSnapshot | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "promotion"
          }
        ],
        "return_type": "str",
        "signature": "(promotion: PromotionSnapshot | None) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 423,
        "name": "_derive_promotion_reason",
        "params": [
          {
            "annotation": "PromotionSnapshot",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "promotion"
          },
          {
            "annotation": "AnnealStatus | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "status"
          }
        ],
        "return_type": "str",
        "signature": "(promotion: PromotionSnapshot, status: AnnealStatus | None) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 447,
        "name": "_format_metadata_summary",
        "params": [
          {
            "annotation": "Mapping[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "metadata"
          }
        ],
        "return_type": "str",
        "signature": "(metadata: Mapping[str, Any]) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 463,
        "name": "_build_promotion_history_panel",
        "params": [
          {
            "annotation": "Iterable[Mapping[str, Any]]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "history"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "border_style"
          }
        ],
        "return_type": "Panel",
        "signature": "(history: Iterable[Mapping[str, Any]], border_style: str) -> Panel"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 480,
        "name": "_format_history_metadata",
        "params": [
          {
            "annotation": "Mapping[str, Any]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "entry"
          }
        ],
        "return_type": "str",
        "signature": "(entry: Mapping[str, Any]) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 498,
        "name": "_safe_format",
        "params": [
          {
            "annotation": "float | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          }
        ],
        "return_type": "str",
        "signature": "(value: float | None) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 504,
        "name": "_format_optional_float",
        "params": [
          {
            "annotation": "float | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          }
        ],
        "return_type": "str",
        "signature": "(value: float | None) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 510,
        "name": "_build_policy_inspector_panel",
        "params": [
          {
            "annotation": "TelemetrySnapshot",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "snapshot"
          }
        ],
        "return_type": "Panel",
        "signature": "(snapshot: TelemetrySnapshot) -> Panel"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 548,
        "name": "_build_relationship_overlay_panel",
        "params": [
          {
            "annotation": "TelemetrySnapshot",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "snapshot"
          }
        ],
        "return_type": "Panel",
        "signature": "(snapshot: TelemetrySnapshot) -> Panel"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 583,
        "name": "_format_delta",
        "params": [
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "bool",
            "default": "False",
            "kind": "positional_or_keyword",
            "name": "inverse"
          }
        ],
        "return_type": "str",
        "signature": "(value: float, inverse: bool = False) -> str"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 591,
        "name": "_build_kpi_panel",
        "params": [
          {
            "annotation": "TelemetrySnapshot",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "snapshot"
          }
        ],
        "return_type": "Panel",
        "signature": "(snapshot: TelemetrySnapshot) -> Panel"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 621,
        "name": "_trend_from_series",
        "params": [
          {
            "annotation": "list[float]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "series"
          }
        ],
        "return_type": "tuple[str, str]",
        "signature": "(series: list[float]) -> tuple[str, str]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 636,
        "name": "_humanize_kpi",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "key"
          }
        ],
        "return_type": "str",
        "signature": "(key: str) -> str"
      },
      {
        "docstring": "Continuously render dashboard against a SimulationLoop instance.",
        "is_async": false,
        "lineno": 645,
        "name": "run_dashboard",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "loop"
          },
          {
            "annotation": "float",
            "default": "1.0",
            "kind": "keyword_only",
            "name": "refresh_interval"
          },
          {
            "annotation": "int",
            "default": "0",
            "kind": "keyword_only",
            "name": "max_ticks"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "kind": "keyword_only",
            "name": "approve"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "kind": "keyword_only",
            "name": "defer"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "kind": "keyword_only",
            "name": "focus_agent"
          },
          {
            "annotation": "bool",
            "default": "False",
            "kind": "keyword_only",
            "name": "show_coords"
          }
        ],
        "return_type": "None",
        "signature": "(loop: SimulationLoop, *, refresh_interval: float = 1.0, max_ticks: int = 0, approve: str | None = None, defer: str | None = None, focus_agent: str | None = None, show_coords: bool = False) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 710,
        "name": "_build_map_panel",
        "params": [
          {
            "annotation": "TelemetrySnapshot",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "snapshot"
          },
          {
            "annotation": "Mapping[str, dict[str, np.ndarray]]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "obs_batch"
          },
          {
            "annotation": "str | None",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "focus_agent"
          },
          {
            "annotation": "bool",
            "default": "False",
            "kind": "positional_or_keyword",
            "name": "show_coords"
          }
        ],
        "return_type": "Panel | None",
        "signature": "(snapshot: TelemetrySnapshot, obs_batch: Mapping[str, dict[str, np.ndarray]], focus_agent: str | None, show_coords: bool = False) -> Panel | None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy",
        "rich.console",
        "rich.panel",
        "rich.table",
        "rich.text"
      ],
      "internal": [
        "townlet.console.handlers",
        "townlet.core.sim_loop",
        "townlet.world.grid",
        "townlet_ui.commands",
        "townlet_ui.telemetry"
      ],
      "stdlib": [
        "__future__",
        "collections.abc",
        "math",
        "time",
        "typing"
      ]
    },
    "lines": 756,
    "module_name": "townlet_ui.dashboard",
    "path": "src/townlet_ui/dashboard.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [
          {
            "annotation": "list[str]",
            "default": null,
            "name": "pending",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "pending_count",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "exits_today",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "daily_exit_cap",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "queue_limit",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "review_window",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 51,
        "methods": [],
        "name": "EmploymentMetrics"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": null,
            "name": "tick",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "cooldown_delta",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "ghost_step_delta",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "rotation_delta",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, int]",
            "default": null,
            "name": "totals",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 61,
        "methods": [],
        "name": "QueueHistoryEntry"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": null,
            "name": "tick",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "agent_a",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "agent_b",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "intensity",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "reason",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 70,
        "methods": [],
        "name": "RivalryEventEntry"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": null,
            "name": "queue_cooldown_events",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "queue_ghost_step_events",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "queue_rotation_events",
            "visibility": "public"
          },
          {
            "annotation": "tuple[QueueHistoryEntry, ...]",
            "default": null,
            "name": "queue_history",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "rivalry_agents",
            "visibility": "public"
          },
          {
            "annotation": "tuple[RivalryEventEntry, ...]",
            "default": null,
            "name": "rivalry_events",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, Any]",
            "default": null,
            "name": "raw",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 79,
        "methods": [],
        "name": "ConflictMetrics"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": null,
            "name": "tick",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "category",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "message",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": null,
            "name": "priority",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, Any]",
            "default": null,
            "name": "data",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 90,
        "methods": [],
        "name": "NarrationEntry"
      },
      {
        "attributes": [
          {
            "annotation": "int",
            "default": null,
            "name": "window_start",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "window_end",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "total_evictions",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, int]",
            "default": null,
            "name": "per_owner",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, int]",
            "default": null,
            "name": "per_reason",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 99,
        "methods": [],
        "name": "RelationshipChurn"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "owner",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "other",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "status",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "trust",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "familiarity",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "rivalry",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "delta_trust",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "delta_familiarity",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "delta_rivalry",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 108,
        "methods": [],
        "name": "RelationshipUpdate"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "agent_id",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "wallet",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "shift_state",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "attendance_ratio",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "wages_withheld",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "lateness_counter",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": null,
            "name": "on_shift",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 121,
        "methods": [],
        "name": "AgentSummary"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "other",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "trust",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "familiarity",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "rivalry",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "delta_trust",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "delta_familiarity",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "delta_rivalry",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 132,
        "methods": [],
        "name": "RelationshipOverlayEntry"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "action",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "probability",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 143,
        "methods": [],
        "name": "PolicyInspectorAction"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "agent_id",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "tick",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "selected_action",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "log_prob",
            "visibility": "public"
          },
          {
            "annotation": "float",
            "default": null,
            "name": "value_pred",
            "visibility": "public"
          },
          {
            "annotation": "list[PolicyInspectorAction]",
            "default": null,
            "name": "top_actions",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 149,
        "methods": [],
        "name": "PolicyInspectorEntry"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "stage",
            "visibility": "public"
          },
          {
            "annotation": "float | None",
            "default": null,
            "name": "cycle",
            "visibility": "public"
          },
          {
            "annotation": "str",
            "default": null,
            "name": "dataset",
            "visibility": "public"
          },
          {
            "annotation": "float | None",
            "default": null,
            "name": "bc_accuracy",
            "visibility": "public"
          },
          {
            "annotation": "float | None",
            "default": null,
            "name": "bc_threshold",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": null,
            "name": "bc_passed",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": null,
            "name": "loss_flag",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": null,
            "name": "queue_flag",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": null,
            "name": "intensity_flag",
            "visibility": "public"
          },
          {
            "annotation": "float | None",
            "default": null,
            "name": "loss_baseline",
            "visibility": "public"
          },
          {
            "annotation": "float | None",
            "default": null,
            "name": "queue_baseline",
            "visibility": "public"
          },
          {
            "annotation": "float | None",
            "default": null,
            "name": "intensity_baseline",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 159,
        "methods": [],
        "name": "AnnealStatus"
      },
      {
        "attributes": [
          {
            "annotation": "bool",
            "default": null,
            "name": "connected",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "dropped_messages",
            "visibility": "public"
          },
          {
            "annotation": "str | None",
            "default": null,
            "name": "last_error",
            "visibility": "public"
          },
          {
            "annotation": "int | None",
            "default": null,
            "name": "last_success_tick",
            "visibility": "public"
          },
          {
            "annotation": "int | None",
            "default": null,
            "name": "last_failure_tick",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 175,
        "methods": [],
        "name": "TransportStatus"
      },
      {
        "attributes": [
          {
            "annotation": "tuple[str, ...]",
            "default": null,
            "name": "alerts",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, Any]",
            "default": null,
            "name": "metrics",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 184,
        "methods": [],
        "name": "StabilitySnapshot"
      },
      {
        "attributes": [
          {
            "annotation": "str | None",
            "default": null,
            "name": "state",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "pass_streak",
            "visibility": "public"
          },
          {
            "annotation": "int",
            "default": null,
            "name": "required_passes",
            "visibility": "public"
          },
          {
            "annotation": "bool",
            "default": null,
            "name": "candidate_ready",
            "visibility": "public"
          },
          {
            "annotation": "int | None",
            "default": null,
            "name": "candidate_ready_tick",
            "visibility": "public"
          },
          {
            "annotation": "str | None",
            "default": null,
            "name": "last_result",
            "visibility": "public"
          },
          {
            "annotation": "int | None",
            "default": null,
            "name": "last_evaluated_tick",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, Any] | None",
            "default": null,
            "name": "candidate_metadata",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, Any] | None",
            "default": null,
            "name": "current_release",
            "visibility": "public"
          },
          {
            "annotation": "tuple[Mapping[str, Any], ...]",
            "default": null,
            "name": "history",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 190,
        "methods": [],
        "name": "PromotionSnapshot"
      },
      {
        "attributes": [
          {
            "annotation": "str",
            "default": null,
            "name": "schema_version",
            "visibility": "public"
          },
          {
            "annotation": "str | None",
            "default": null,
            "name": "schema_warning",
            "visibility": "public"
          },
          {
            "annotation": "EmploymentMetrics",
            "default": null,
            "name": "employment",
            "visibility": "public"
          },
          {
            "annotation": "ConflictMetrics",
            "default": null,
            "name": "conflict",
            "visibility": "public"
          },
          {
            "annotation": "list[NarrationEntry]",
            "default": null,
            "name": "narrations",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, Any]",
            "default": null,
            "name": "narration_state",
            "visibility": "public"
          },
          {
            "annotation": "RelationshipChurn | None",
            "default": null,
            "name": "relationships",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, Mapping[str, Mapping[str, float]]]",
            "default": null,
            "name": "relationship_snapshot",
            "visibility": "public"
          },
          {
            "annotation": "list[RelationshipUpdate]",
            "default": null,
            "name": "relationship_updates",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, list[RelationshipOverlayEntry]]",
            "default": null,
            "name": "relationship_overlay",
            "visibility": "public"
          },
          {
            "annotation": "list[AgentSummary]",
            "default": null,
            "name": "agents",
            "visibility": "public"
          },
          {
            "annotation": "AnnealStatus | None",
            "default": null,
            "name": "anneal",
            "visibility": "public"
          },
          {
            "annotation": "list[PolicyInspectorEntry]",
            "default": null,
            "name": "policy_inspector",
            "visibility": "public"
          },
          {
            "annotation": "PromotionSnapshot | None",
            "default": null,
            "name": "promotion",
            "visibility": "public"
          },
          {
            "annotation": "StabilitySnapshot",
            "default": null,
            "name": "stability",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, list[float]]",
            "default": null,
            "name": "kpis",
            "visibility": "public"
          },
          {
            "annotation": "TransportStatus",
            "default": null,
            "name": "transport",
            "visibility": "public"
          },
          {
            "annotation": "Mapping[str, Any]",
            "default": null,
            "name": "raw",
            "visibility": "public"
          }
        ],
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "lineno": 204,
        "methods": [],
        "name": "TelemetrySnapshot"
      },
      {
        "attributes": [],
        "bases": [
          "RuntimeError"
        ],
        "decorators": [],
        "docstring": "Raised when telemetry schema is newer than the client supports.",
        "lineno": 225,
        "methods": [],
        "name": "SchemaMismatchError"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": "Lightweight helper to parse telemetry payloads for the observer UI.",
        "lineno": 229,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 232,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": "SUPPORTED_SCHEMA_PREFIX",
                "kind": "keyword_only",
                "name": "expected_schema_prefix"
              }
            ],
            "return_type": "None",
            "signature": "(self, *, expected_schema_prefix: str = SUPPORTED_SCHEMA_PREFIX) -> None"
          },
          {
            "docstring": "Validate and convert a telemetry payload into dataclasses.",
            "is_async": false,
            "lineno": 235,
            "name": "parse_snapshot",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Mapping[str, Any]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              }
            ],
            "return_type": "TelemetrySnapshot",
            "signature": "(self, payload: Mapping[str, Any]) -> TelemetrySnapshot"
          },
          {
            "docstring": "Fetch snapshot via console router (expects telemetry_snapshot command).",
            "is_async": false,
            "lineno": 604,
            "name": "from_console",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "Any",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "router"
              }
            ],
            "return_type": "TelemetrySnapshot",
            "signature": "(self, router: Any) -> TelemetrySnapshot"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 617,
            "name": "_check_schema",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "version"
              }
            ],
            "return_type": "str | None",
            "signature": "(self, version: str) -> str | None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 629,
            "name": "_get_section",
            "params": [
              {
                "annotation": "Mapping[str, Any]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "payload"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "key"
              },
              {
                "annotation": "type",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "expected"
              }
            ],
            "return_type": "Mapping[str, Any]",
            "signature": "(payload: Mapping[str, Any], key: str, expected: type) -> Mapping[str, Any]"
          }
        ],
        "name": "TelemetryClient"
      }
    ],
    "constants": [
      {
        "name": "SUPPORTED_SCHEMA_PREFIX",
        "value": "'0.9'"
      }
    ],
    "docstring": "Schema-aware telemetry client utilities for observer UI components.",
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "_maybe_float",
        "params": [
          {
            "annotation": "object",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          }
        ],
        "return_type": "float | None",
        "signature": "(value: object) -> float | None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 16,
        "name": "_coerce_float",
        "params": [
          {
            "annotation": "object",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "kind": "positional_or_keyword",
            "name": "default"
          }
        ],
        "return_type": "float",
        "signature": "(value: object, default: float = 0.0) -> float"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 21,
        "name": "_coerce_mapping",
        "params": [
          {
            "annotation": "object",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          }
        ],
        "return_type": "Mapping[str, Any] | None",
        "signature": "(value: object) -> Mapping[str, Any] | None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 27,
        "name": "_coerce_history_entries",
        "params": [
          {
            "annotation": "object",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          }
        ],
        "return_type": "tuple[Mapping[str, Any], ...]",
        "signature": "(value: object) -> tuple[Mapping[str, Any], ...]"
      },
      {
        "docstring": "Helper to build console command dataclass without importing CLI package.",
        "is_async": false,
        "lineno": 636,
        "name": "_console_command",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "name"
          }
        ],
        "return_type": "Any",
        "signature": "(name: str) -> Any"
      }
    ],
    "has_dataclasses": true,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.console.handlers"
      ],
      "stdlib": [
        "__future__",
        "collections.abc",
        "dataclasses",
        "typing"
      ]
    },
    "lines": 640,
    "module_name": "townlet_ui.telemetry",
    "path": "src/townlet_ui/telemetry.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "ROOT",
        "value": "Path(__file__).resolve().parents[1]"
      },
      {
        "name": "SRC",
        "value": "ROOT / 'src'"
      }
    ],
    "docstring": "Pytest configuration ensuring project imports resolve during tests.",
    "env_vars": [],
    "functions": [],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "sys"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 13,
    "module_name": "tests.conftest",
    "path": "tests/conftest.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 9,
        "name": "make_world",
        "params": [],
        "return_type": "tuple[SimulationLoop, WorldState]",
        "signature": "() -> tuple[SimulationLoop, WorldState]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 17,
        "name": "request_object",
        "params": [
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "world"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "object_id"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "agent_id"
          }
        ],
        "return_type": "None",
        "signature": "(world, object_id: str, agent_id: str) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 23,
        "name": "test_affordance_before_after_hooks_fire_once",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 58,
        "name": "test_affordance_fail_hook_runs_once_per_failure",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 102,
        "name": "test_shower_requires_power",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 129,
        "name": "test_shower_completion_emits_event",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 153,
        "name": "test_sleep_slots_cycle_and_completion_event",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 177,
        "name": "test_sleep_attempt_fails_when_no_slots",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 195,
    "module_name": "tests.test_affordance_hooks",
    "path": "tests/test_affordance_hooks.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "_configure_with_manifest",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "manifest_path"
          }
        ],
        "return_type": "SimulationConfig",
        "signature": "(manifest_path: Path) -> SimulationConfig"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 20,
        "name": "test_affordance_manifest_loads_and_exposes_metadata",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 52,
        "name": "test_affordance_manifest_duplicate_ids_fail",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 72,
        "name": "test_affordance_manifest_missing_duration_fails",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 87,
        "name": "test_affordance_manifest_checksum_exposed_in_telemetry",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.telemetry.publisher",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "hashlib",
        "pathlib"
      ]
    },
    "lines": 114,
    "module_name": "tests.test_affordance_manifest",
    "path": "tests/test_affordance_manifest.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 18,
        "name": "_make_loop",
        "params": [],
        "return_type": "tuple[SimulationLoop, object]",
        "signature": "() -> tuple[SimulationLoop, object]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 25,
        "name": "_request_object",
        "params": [
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "world"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "object_id"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "agent_id"
          }
        ],
        "return_type": "None",
        "signature": "(world, object_id: str, agent_id: str) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 31,
        "name": "test_compile_preconditions_normalises_booleans",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 38,
        "name": "test_compile_preconditions_rejects_function_calls",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 43,
        "name": "test_evaluate_preconditions_supports_nested_attributes",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 51,
        "name": "test_precondition_failure_blocks_affordance_and_emits_event",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 101,
        "name": "test_precondition_success_allows_affordance_start",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.console.handlers",
        "townlet.core.sim_loop",
        "townlet.world.grid",
        "townlet.world.preconditions"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 120,
    "module_name": "tests.test_affordance_preconditions",
    "path": "tests/test_affordance_preconditions.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 8,
        "name": "test_basket_cost_in_telemetry_snapshot",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 32,
    "module_name": "tests.test_basket_telemetry",
    "path": "tests/test_basket_telemetry.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 11,
        "name": "test_synthetic_bc_capture_round_trip",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.policy.replay"
      ],
      "stdlib": [
        "__future__",
        "json",
        "pathlib"
      ]
    },
    "lines": 64,
    "module_name": "tests.test_bc_capture_prototype",
    "path": "tests/test_bc_capture_prototype.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 14,
        "name": "test_bc_trainer_overfits_toy_dataset",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 50,
        "name": "test_bc_evaluate_accuracy",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy",
        "pytest"
      ],
      "internal": [
        "townlet.policy",
        "townlet.policy.models",
        "townlet.policy.replay"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 81,
    "module_name": "tests.test_bc_trainer",
    "path": "tests/test_bc_trainer.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "_make_world",
        "params": [],
        "return_type": "WorldState",
        "signature": "() -> WorldState"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 33,
        "name": "test_scripted_behavior_avoids_queue_with_rival",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 48,
        "name": "test_scripted_behavior_requests_when_no_rival",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 57,
        "name": "test_behavior_retries_after_rival_leaves",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.policy.behavior",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 69,
    "module_name": "tests.test_behavior_rivalry",
    "path": "tests/test_behavior_rivalry.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 8,
        "name": "test_capture_scripted_idle",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "runpy"
      ],
      "internal": [
        "townlet.policy.replay"
      ],
      "stdlib": [
        "json",
        "pathlib"
      ]
    },
    "lines": 39,
    "module_name": "tests.test_capture_scripted_cli",
    "path": "tests/test_capture_scripted_cli.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "SCRIPT",
        "value": "Path('scripts/validate_affordances.py').resolve()"
      }
    ],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "_run",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "vararg",
            "name": "args"
          }
        ],
        "return_type": "subprocess.CompletedProcess[str]",
        "signature": "(*args: str) -> subprocess.CompletedProcess[str]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 15,
        "name": "test_validate_affordances_cli_success",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 35,
        "name": "test_validate_affordances_cli_failure",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 50,
        "name": "test_validate_affordances_cli_bad_precondition",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 68,
        "name": "test_validate_affordances_cli_directory",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "subprocess",
        "sys"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 95,
    "module_name": "tests.test_cli_validate_affordances",
    "path": "tests/test_cli_validate_affordances.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "poc_config",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "Path",
        "signature": "(tmp_path: Path) -> Path"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 20,
        "name": "test_load_config",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "poc_config"
          }
        ],
        "return_type": "None",
        "signature": "(poc_config: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 68,
        "name": "test_invalid_queue_cooldown_rejected",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 79,
        "name": "test_invalid_embedding_threshold_rejected",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 90,
        "name": "test_invalid_embedding_slot_count",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 101,
        "name": "test_invalid_affordance_file_absent",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 112,
        "name": "test_observation_variant_guard",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 123,
        "name": "test_ppo_config_defaults_roundtrip",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 139,
        "name": "test_observation_variant_full_supported",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 150,
        "name": "test_observation_variant_compact_supported",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 161,
        "name": "test_snapshot_autosave_cadence_validation",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 174,
        "name": "test_snapshot_identity_overrides_take_precedence",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "poc_config"
          }
        ],
        "return_type": "None",
        "signature": "(poc_config: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 199,
        "name": "test_register_snapshot_migrations_from_config",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "poc_config"
          }
        ],
        "return_type": "None",
        "signature": "(poc_config: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 231,
        "name": "test_telemetry_transport_defaults",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "poc_config"
          }
        ],
        "return_type": "None",
        "signature": "(poc_config: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 240,
        "name": "test_telemetry_file_transport_requires_path",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 251,
        "name": "test_telemetry_tcp_transport_requires_endpoint",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest",
        "sys",
        "types",
        "yaml"
      ],
      "internal": [
        "townlet.config",
        "townlet.snapshots.migrations"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 259,
    "module_name": "tests.test_config_loader",
    "path": "tests/test_config_loader.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 15,
        "name": "_run_scenario",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config_path"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "ticks"
          }
        ],
        "return_type": "SimulationLoop",
        "signature": "(config_path: str, ticks: int) -> SimulationLoop"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 31,
        "name": "test_queue_conflict_scenario_produces_alerts",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 47,
        "name": "test_rivalry_decay_scenario_tracks_events",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 59,
        "name": "test_queue_manager_randomised_regression",
        "params": [
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "seed"
          }
        ],
        "return_type": "None",
        "signature": "(seed: int) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest",
        "types"
      ],
      "internal": [
        "townlet.config.loader",
        "townlet.core.sim_loop",
        "townlet.policy.scenario_utils",
        "townlet.world.queue_manager"
      ],
      "stdlib": [
        "__future__",
        "pathlib",
        "random"
      ]
    },
    "lines": 89,
    "module_name": "tests.test_conflict_scenarios",
    "path": "tests/test_conflict_scenarios.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "test_conflict_snapshot_reports_rivalry_counts",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 73,
        "name": "test_replay_sample_matches_schema",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 82,
        "name": "test_conflict_export_import_preserves_history",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.telemetry.publisher",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 125,
    "module_name": "tests.test_conflict_telemetry",
    "path": "tests/test_conflict_telemetry.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 20,
        "name": "test_console_telemetry_snapshot_returns_payload",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 55,
        "name": "test_console_conflict_status_reports_history",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 91,
        "name": "test_console_queue_inspect_returns_queue_details",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 109,
        "name": "test_console_set_spawn_delay_updates_lifecycle",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 133,
        "name": "test_console_rivalry_dump_reports_pairs",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 168,
        "name": "test_employment_console_commands_manage_queue",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 207,
        "name": "test_console_schema_warning_for_newer_version",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 220,
        "name": "test_console_perturbation_requires_admin_mode",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 237,
        "name": "test_console_perturbation_commands_schedule_and_cancel",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 295,
        "name": "test_console_arrange_meet_schedules_event",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 339,
        "name": "test_console_arrange_meet_unknown_spec_returns_error",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 365,
        "name": "test_console_snapshot_commands",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.console.handlers",
        "townlet.core.sim_loop",
        "townlet.snapshots",
        "townlet.snapshots.migrations",
        "townlet.snapshots.state",
        "townlet.world.grid"
      ],
      "stdlib": [
        "dataclasses",
        "pathlib"
      ]
    },
    "lines": 439,
    "module_name": "tests.test_console_commands",
    "path": "tests/test_console_commands.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 14,
        "name": "employment_loop",
        "params": [],
        "return_type": "SimulationLoop",
        "signature": "() -> SimulationLoop"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 28,
        "name": "_queue_command",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "loop"
          },
          {
            "annotation": "dict[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "payload"
          }
        ],
        "return_type": "None",
        "signature": "(loop: SimulationLoop, payload: dict[str, object]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 32,
        "name": "test_dispatcher_processes_employment_review",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 52,
        "name": "test_dispatcher_idempotency_reuses_history",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 74,
        "name": "test_dispatcher_requires_admin_mode",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 94,
        "name": "test_dispatcher_enforces_cmd_id_for_destructive_ops",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 112,
        "name": "test_spawn_command_creates_agent",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 134,
        "name": "test_spawn_rejects_duplicate_id",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 151,
        "name": "test_teleport_moves_agent",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 166,
        "name": "test_teleport_rejects_blocked_tile",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 187,
        "name": "test_setneed_updates_needs",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 210,
        "name": "test_setneed_rejects_unknown_need",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 230,
        "name": "test_price_updates_economy_and_basket",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 252,
        "name": "test_price_rejects_unknown_key",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 267,
        "name": "test_force_chat_updates_relationship",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 297,
        "name": "test_force_chat_requires_distinct_agents",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 312,
        "name": "test_set_rel_updates_ties",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 343,
        "name": "test_possess_acquire_and_release",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 375,
        "name": "test_possess_errors_on_duplicate_or_missing",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 419,
        "name": "test_kill_command_removes_agent",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 441,
        "name": "test_toggle_mortality_updates_flag",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 463,
        "name": "test_set_exit_cap_updates_config",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "employment_loop"
          }
        ],
        "return_type": "None",
        "signature": "(employment_loop: SimulationLoop) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.console.handlers",
        "townlet.core.sim_loop",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 482,
    "module_name": "tests.test_console_dispatcher",
    "path": "tests/test_console_dispatcher.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 9,
        "name": "test_event_stream_receives_published_events",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 32,
        "name": "test_event_stream_handles_empty_batch",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.console.handlers",
        "townlet.telemetry.publisher",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 40,
    "module_name": "tests.test_console_events",
    "path": "tests/test_console_events.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 11,
        "name": "admin_router",
        "params": [],
        "return_type": "tuple[SimulationLoop, object]",
        "signature": "() -> tuple[SimulationLoop, object]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 27,
        "name": "make_ready",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "loop"
          }
        ],
        "return_type": "None",
        "signature": "(loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 42,
        "name": "test_promotion_status_command",
        "params": [
          {
            "annotation": "tuple[SimulationLoop, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "admin_router"
          }
        ],
        "return_type": "None",
        "signature": "(admin_router: tuple[SimulationLoop, object]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 48,
        "name": "test_promote_and_rollback_commands",
        "params": [
          {
            "annotation": "tuple[SimulationLoop, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "admin_router"
          }
        ],
        "return_type": "None",
        "signature": "(admin_router: tuple[SimulationLoop, object]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 83,
        "name": "test_policy_swap_command",
        "params": [
          {
            "annotation": "tuple[SimulationLoop, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "admin_router"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(admin_router: tuple[SimulationLoop, object], tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 106,
        "name": "test_policy_swap_missing_file",
        "params": [
          {
            "annotation": "tuple[SimulationLoop, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "admin_router"
          }
        ],
        "return_type": "None",
        "signature": "(admin_router: tuple[SimulationLoop, object]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 119,
        "name": "viewer_router",
        "params": [],
        "return_type": "object",
        "signature": "() -> object"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 134,
        "name": "test_viewer_mode_forbidden",
        "params": [
          {
            "annotation": "object",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "viewer_router"
          }
        ],
        "return_type": "None",
        "signature": "(viewer_router: object) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.console.handlers",
        "townlet.core.sim_loop"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 136,
    "module_name": "tests.test_console_promotion",
    "path": "tests/test_console_promotion.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 12,
        "name": "_write_sample",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "output_dir"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "stem"
          },
          {
            "annotation": "np.ndarray",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "rewards"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "timesteps"
          }
        ],
        "return_type": "None",
        "signature": "(output_dir: Path, stem: str, rewards: np.ndarray, timesteps: int) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 49,
        "name": "test_curate_trajectories",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy",
        "runpy"
      ],
      "internal": [
        "townlet.policy.replay"
      ],
      "stdlib": [
        "__future__",
        "json",
        "pathlib"
      ]
    },
    "lines": 81,
    "module_name": "tests.test_curate_trajectories",
    "path": "tests/test_curate_trajectories.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 11,
        "name": "make_allocator",
        "params": [
          {
            "annotation": "int",
            "default": "5",
            "kind": "keyword_only",
            "name": "cooldown"
          },
          {
            "annotation": "int",
            "default": "2",
            "kind": "keyword_only",
            "name": "max_slots"
          }
        ],
        "return_type": "EmbeddingAllocator",
        "signature": "(*, cooldown: int = 5, max_slots: int = 2) -> EmbeddingAllocator"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 19,
        "name": "test_allocate_reuses_slot_after_cooldown",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 39,
        "name": "test_allocator_respects_multiple_slots",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 59,
        "name": "test_observation_builder_releases_on_termination",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 82,
        "name": "test_telemetry_exposes_allocator_metrics",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 97,
        "name": "test_stability_monitor_sets_alert_on_warning",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 110,
        "name": "test_telemetry_records_events",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 129,
        "name": "test_stability_alerts_on_affordance_failures",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.observations.builder",
        "townlet.observations.embedding",
        "townlet.stability.monitor",
        "townlet.telemetry.publisher",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 142,
    "module_name": "tests.test_embedding_allocator",
    "path": "tests/test_embedding_allocator.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "make_loop_with_employment",
        "params": [],
        "return_type": "SimulationLoop",
        "signature": "() -> SimulationLoop"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 41,
        "name": "advance_ticks",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "loop"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "ticks"
          }
        ],
        "return_type": "None",
        "signature": "(loop: SimulationLoop, ticks: int) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 46,
        "name": "test_on_time_shift_records_attendance",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 64,
        "name": "test_late_arrival_accumulates_wages_withheld",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 82,
        "name": "test_employment_exit_queue_respects_cap_and_manual_override",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 120,
    "module_name": "tests.test_employment_loop",
    "path": "tests/test_employment_loop.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "_make_world",
        "params": [
          {
            "annotation": "int",
            "default": "0",
            "kind": "positional_or_keyword",
            "name": "respawn_delay"
          }
        ],
        "return_type": "tuple[LifecycleManager, WorldState]",
        "signature": "(respawn_delay: int = 0) -> tuple[LifecycleManager, WorldState]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 20,
        "name": "_spawn_agent",
        "params": [
          {
            "annotation": "WorldState",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "world"
          },
          {
            "annotation": "str",
            "default": "'alice'",
            "kind": "positional_or_keyword",
            "name": "agent_id"
          }
        ],
        "return_type": "AgentSnapshot",
        "signature": "(world: WorldState, agent_id: str = 'alice') -> AgentSnapshot"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 33,
        "name": "test_respawn_after_delay",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 53,
        "name": "test_employment_exit_emits_event_and_resets_state",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 70,
        "name": "test_employment_daily_reset",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 79,
        "name": "test_termination_reasons_captured",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.lifecycle.manager",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 89,
    "module_name": "tests.test_lifecycle_manager",
    "path": "tests/test_lifecycle_manager.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "CONFIG_PATH",
        "value": "Path('configs/examples/poc_hybrid.yaml')"
      }
    ],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 14,
        "name": "_make_world",
        "params": [],
        "return_type": "tuple[LifecycleManager, WorldState]",
        "signature": "() -> tuple[LifecycleManager, WorldState]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 23,
        "name": "_spawn_agent",
        "params": [
          {
            "annotation": "WorldState",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "world"
          },
          {
            "annotation": "float",
            "default": "0.8",
            "kind": "keyword_only",
            "name": "hunger"
          },
          {
            "annotation": "float",
            "default": "0.7",
            "kind": "keyword_only",
            "name": "hygiene"
          },
          {
            "annotation": "float",
            "default": "0.6",
            "kind": "keyword_only",
            "name": "energy"
          }
        ],
        "return_type": "AgentSnapshot",
        "signature": "(world: WorldState, *, hunger: float = 0.8, hygiene: float = 0.7, energy: float = 0.6) -> AgentSnapshot"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 42,
        "name": "test_need_decay_matches_config",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 55,
        "name": "test_need_decay_clamps_at_zero",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 66,
        "name": "test_lifecycle_hunger_threshold_applies",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 79,
        "name": "test_agent_snapshot_clamps_on_init",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.lifecycle.manager",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 89,
    "module_name": "tests.test_need_decay",
    "path": "tests/test_need_decay.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 12,
        "name": "make_world",
        "params": [
          {
            "annotation": "bool",
            "default": "False",
            "kind": "positional_or_keyword",
            "name": "enforce_job_loop"
          }
        ],
        "return_type": "SimulationLoop",
        "signature": "(enforce_job_loop: bool = False) -> SimulationLoop"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 40,
        "name": "test_observation_builder_hybrid_map_and_features",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 88,
        "name": "test_observation_ctx_reset_releases_slot",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 102,
        "name": "test_observation_rivalry_features_reflect_conflict",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 114,
        "name": "test_observation_queue_and_reservation_flags",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 137,
        "name": "test_observation_respawn_resets_features",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 162,
        "name": "test_ctx_reset_flag_on_teleport_and_possession",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config",
        "townlet.console.command",
        "townlet.core.sim_loop",
        "townlet.observations.builder",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 194,
    "module_name": "tests.test_observation_builder",
    "path": "tests/test_observation_builder.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "make_compact_world",
        "params": [],
        "return_type": "SimulationLoop",
        "signature": "() -> SimulationLoop"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 30,
        "name": "test_compact_observation_features_only",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.observations.builder",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 63,
    "module_name": "tests.test_observation_builder_compact",
    "path": "tests/test_observation_builder_compact.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "make_full_world",
        "params": [],
        "return_type": "SimulationLoop",
        "signature": "() -> SimulationLoop"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 40,
        "name": "test_full_observation_map_and_features",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.observations.builder",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 83,
    "module_name": "tests.test_observation_builder_full",
    "path": "tests/test_observation_builder_full.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 14,
        "name": "base_config",
        "params": [],
        "return_type": "SimulationConfig",
        "signature": "() -> SimulationConfig"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 18,
        "name": "_build_world",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config"
          }
        ],
        "return_type": "WorldState",
        "signature": "(config: SimulationConfig) -> WorldState"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 38,
        "name": "test_social_snippet_vector_length",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": "None",
        "signature": "(base_config: SimulationConfig) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 58,
        "name": "test_relationship_stage_required",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": "None",
        "signature": "(base_config: SimulationConfig) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 66,
        "name": "test_disable_aggregates_via_config",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": "None",
        "signature": "(base_config: SimulationConfig) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 84,
        "name": "test_observation_matches_golden_fixture",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": "None",
        "signature": "(base_config: SimulationConfig) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy",
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.observations.builder",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 95,
    "module_name": "tests.test_observations_social_snippet",
    "path": "tests/test_observations_social_snippet.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 9,
        "name": "make_loop",
        "params": [],
        "return_type": "SimulationLoop",
        "signature": "() -> SimulationLoop"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 23,
        "name": "test_observer_payload_contains_job_and_economy",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 38,
        "name": "test_planning_payload_consistency",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.telemetry.publisher",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 53,
    "module_name": "tests.test_observer_payload",
    "path": "tests/test_observer_payload.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 15,
        "name": "make_loop",
        "params": [],
        "return_type": "SimulationLoop",
        "signature": "() -> SimulationLoop"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 39,
        "name": "test_render_snapshot_produces_panels",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 67,
        "name": "test_run_dashboard_advances_loop",
        "params": [
          {
            "annotation": "pytest.MonkeyPatch",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "monkeypatch"
          }
        ],
        "return_type": "None",
        "signature": "(monkeypatch: pytest.MonkeyPatch) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 79,
        "name": "test_build_map_panel_produces_table",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 91,
        "name": "test_narration_panel_shows_styled_categories",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 180,
        "name": "test_policy_inspector_snapshot_contains_entries",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 193,
        "name": "test_promotion_reason_logic",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 258,
        "name": "test_promotion_border_styles",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest",
        "rich.console"
      ],
      "internal": [
        "townlet.config",
        "townlet.console.handlers",
        "townlet.core.sim_loop",
        "townlet.policy.models",
        "townlet.world.grid",
        "townlet_ui.dashboard",
        "townlet_ui.telemetry"
      ],
      "stdlib": [
        "dataclasses",
        "pathlib"
      ]
    },
    "lines": 276,
    "module_name": "tests.test_observer_ui_dashboard",
    "path": "tests/test_observer_ui_dashboard.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": null,
        "lineno": 7,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 8,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": "None",
            "signature": "(self) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 11,
            "name": "dispatch",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "ConsoleCommand",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "command"
              }
            ],
            "return_type": "None",
            "signature": "(self, command: ConsoleCommand) -> None"
          }
        ],
        "name": "DummyRouter"
      }
    ],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 16,
        "name": "test_console_command_executor_dispatches_async",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 26,
        "name": "test_console_command_executor_swallow_errors",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.console.handlers",
        "townlet_ui.commands"
      ],
      "stdlib": [
        "time"
      ]
    },
    "lines": 33,
    "module_name": "tests.test_observer_ui_executor",
    "path": "tests/test_observer_ui_executor.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 6,
        "name": "test_observer_ui_script_runs_single_tick",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "subprocess",
        "sys"
      ],
      "internal": [],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 22,
    "module_name": "tests.test_observer_ui_script",
    "path": "tests/test_observer_ui_script.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 12,
        "name": "test_simulation_config_exposes_perturbations",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 22,
        "name": "test_price_spike_event_config_parses_ranges",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 38,
    "module_name": "tests.test_perturbation_config",
    "path": "tests/test_perturbation_config.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 16,
        "name": "_base_config",
        "params": [],
        "return_type": "SimulationConfig",
        "signature": "() -> SimulationConfig"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 48,
        "name": "test_manual_event_activation_and_expiry",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 75,
        "name": "test_auto_scheduling_respects_cooldowns",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 96,
        "name": "test_cancel_event_removes_from_active",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.scheduler.perturbations",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 106,
    "module_name": "tests.test_perturbation_scheduler",
    "path": "tests/test_perturbation_scheduler.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 9,
        "name": "_make_world",
        "params": [
          {
            "annotation": "int | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "option_commit_ticks"
          }
        ],
        "return_type": "tuple[PolicyRuntime, WorldState]",
        "signature": "(option_commit_ticks: int | None = None) -> tuple[PolicyRuntime, WorldState]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 24,
        "name": "test_anneal_ratio_uses_provider_when_enabled",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 41,
        "name": "test_anneal_ratio_mix_respects_probability",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 64,
        "name": "test_blend_disabled_returns_scripted",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 77,
        "name": "test_option_commit_blocks_switch_until_expiry",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 128,
        "name": "test_option_commit_clears_on_termination",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 143,
        "name": "test_option_commit_respects_disabled_setting",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.policy.behavior",
        "townlet.policy.runner",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 155,
    "module_name": "tests.test_policy_anneal_blend",
    "path": "tests/test_policy_anneal_blend.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 11,
        "name": "test_conflict_policy_network_requires_torch_when_unavailable",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 20,
        "name": "test_conflict_policy_network_forward",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest",
        "torch"
      ],
      "internal": [
        "townlet.policy.models"
      ],
      "stdlib": []
    },
    "lines": 32,
    "module_name": "tests.test_policy_models",
    "path": "tests/test_policy_models.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "base_config",
        "params": [],
        "return_type": null,
        "signature": "()"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 17,
        "name": "_build_world",
        "params": [
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": null,
        "signature": "(base_config)"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 41,
        "name": "_occupy",
        "params": [
          {
            "annotation": "WorldState",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "world"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "object_id"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "agent_id"
          }
        ],
        "return_type": "None",
        "signature": "(world: WorldState, object_id: str, agent_id: str) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 45,
        "name": "test_agents_avoid_rivals_when_rivalry_high",
        "params": [
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": null,
        "signature": "(base_config)"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 56,
        "name": "test_agents_request_again_after_rivalry_decay",
        "params": [
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": null,
        "signature": "(base_config)"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.loader",
        "townlet.policy.behavior",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 67,
    "module_name": "tests.test_policy_rivalry_behavior",
    "path": "tests/test_policy_rivalry_behavior.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 8,
        "name": "test_compute_gae_single_step",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 23,
        "name": "test_value_baseline_from_old_preds_handles_bootstrap",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 33,
        "name": "test_policy_surrogate_clipping_behaviour",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 47,
        "name": "test_clipped_value_loss_respects_clip",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "torch"
      ],
      "internal": [
        "townlet.policy.ppo"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 65,
    "module_name": "tests.test_ppo_utils",
    "path": "tests/test_ppo_utils.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "PYTHON",
        "value": "Path(sys.executable)"
      },
      {
        "name": "SCRIPT",
        "value": "Path('scripts/promotion_evaluate.py')"
      }
    ],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 12,
        "name": "write_summary",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "accuracy"
          },
          {
            "annotation": "float",
            "default": "0.9",
            "kind": "positional_or_keyword",
            "name": "threshold"
          }
        ],
        "return_type": "Path",
        "signature": "(tmp_path: Path, accuracy: float, threshold: float = 0.9) -> Path"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 26,
        "name": "test_promotion_cli_pass",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 34,
        "name": "test_promotion_cli_fail",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 42,
        "name": "test_promotion_drill",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest",
        "subprocess",
        "sys"
      ],
      "internal": [],
      "stdlib": [
        "json",
        "pathlib"
      ]
    },
    "lines": 52,
    "module_name": "tests.test_promotion_cli",
    "path": "tests/test_promotion_cli.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "SCRIPT",
        "value": "Path('scripts/promotion_evaluate.py').resolve()"
      }
    ],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 11,
        "name": "_run",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "vararg",
            "name": "args"
          }
        ],
        "return_type": "subprocess.CompletedProcess[str]",
        "signature": "(*args: str) -> subprocess.CompletedProcess[str]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 16,
        "name": "test_promotion_evaluate_promote",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 40,
        "name": "test_promotion_evaluate_hold_flags",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 64,
        "name": "test_promotion_evaluate_dry_run",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "subprocess",
        "sys"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "json",
        "pathlib"
      ]
    },
    "lines": 84,
    "module_name": "tests.test_promotion_evaluate_cli",
    "path": "tests/test_promotion_evaluate_cli.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 8,
        "name": "make_manager",
        "params": [
          {
            "annotation": "Path | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "log_path"
          }
        ],
        "return_type": "PromotionManager",
        "signature": "(log_path: Path | None = None) -> PromotionManager"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 15,
        "name": "promotion_metrics",
        "params": [
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "pass_streak"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "required"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "ready"
          },
          {
            "annotation": "str | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "last_result"
          },
          {
            "annotation": "int | None",
            "default": "None",
            "kind": "positional_or_keyword",
            "name": "last_tick"
          }
        ],
        "return_type": "dict[str, object]",
        "signature": "(pass_streak: int, required: int, ready: bool, last_result: str | None = None, last_tick: int | None = None) -> dict[str, object]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 34,
        "name": "test_promotion_state_transitions",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 52,
        "name": "test_promotion_manager_export_import",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 73,
        "name": "test_mark_promoted_and_rollback",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 92,
        "name": "test_rollback_without_metadata_reverts_to_initial",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 100,
        "name": "test_promotion_log_written",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.stability.promotion"
      ],
      "stdlib": [
        "json",
        "pathlib"
      ]
    },
    "lines": 110,
    "module_name": "tests.test_promotion_manager",
    "path": "tests/test_promotion_manager.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 11,
        "name": "_make_queue_manager",
        "params": [],
        "return_type": "QueueManager",
        "signature": "() -> QueueManager"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 16,
        "name": "test_cooldown_blocks_repeat_entry_and_tracks_metric",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 38,
        "name": "test_ghost_step_promotes_waiter_after_blockages",
        "params": [
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "ghost_limit"
          }
        ],
        "return_type": "None",
        "signature": "(ghost_limit: int) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 61,
        "name": "test_queue_snapshot_reflects_waiting_order",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 79,
        "name": "test_queue_performance_metrics_accumulate_time",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.world.queue_manager"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 89,
    "module_name": "tests.test_queue_fairness",
    "path": "tests/test_queue_fairness.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "queue_manager",
        "params": [],
        "return_type": "QueueManager",
        "signature": "() -> QueueManager"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 16,
        "name": "test_queue_cooldown_enforced",
        "params": [
          {
            "annotation": "QueueManager",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "queue_manager"
          }
        ],
        "return_type": "None",
        "signature": "(queue_manager: QueueManager) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 26,
        "name": "test_queue_prioritises_wait_time",
        "params": [
          {
            "annotation": "QueueManager",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "queue_manager"
          }
        ],
        "return_type": "None",
        "signature": "(queue_manager: QueueManager) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 43,
        "name": "test_ghost_step_trigger",
        "params": [
          {
            "annotation": "QueueManager",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "queue_manager"
          }
        ],
        "return_type": "None",
        "signature": "(queue_manager: QueueManager) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 57,
        "name": "test_requeue_to_tail_rotates_agent",
        "params": [
          {
            "annotation": "QueueManager",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "queue_manager"
          }
        ],
        "return_type": "None",
        "signature": "(queue_manager: QueueManager) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 79,
        "name": "test_record_blocked_attempt_counts_and_triggers",
        "params": [
          {
            "annotation": "QueueManager",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "queue_manager"
          }
        ],
        "return_type": "None",
        "signature": "(queue_manager: QueueManager) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 86,
        "name": "test_cooldown_expiration_clears_entries",
        "params": [
          {
            "annotation": "QueueManager",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "queue_manager"
          }
        ],
        "return_type": "None",
        "signature": "(queue_manager: QueueManager) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.world.queue_manager"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 92,
    "module_name": "tests.test_queue_manager",
    "path": "tests/test_queue_manager.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 9,
        "name": "_make_world",
        "params": [],
        "return_type": "WorldState",
        "signature": "() -> WorldState"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 17,
        "name": "test_queue_metrics_capture_ghost_step_and_rotation",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 49,
        "name": "test_nightly_reset_preserves_queue_metrics",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 63,
    "module_name": "tests.test_queue_metrics",
    "path": "tests/test_queue_metrics.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 14,
        "name": "base_config",
        "params": [],
        "return_type": null,
        "signature": "()"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 21,
        "name": "_setup_loop",
        "params": [
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config"
          }
        ],
        "return_type": "SimulationLoop",
        "signature": "(config) -> SimulationLoop"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 36,
        "name": "test_queue_metrics_resume",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, base_config) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib",
        "random"
      ]
    },
    "lines": 55,
    "module_name": "tests.test_queue_resume",
    "path": "tests/test_queue_resume.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "base_config",
        "params": [],
        "return_type": "SimulationConfig",
        "signature": "() -> SimulationConfig"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 17,
        "name": "_with_relationship_modifiers",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "enabled"
          }
        ],
        "return_type": "SimulationConfig",
        "signature": "(config: SimulationConfig, enabled: bool) -> SimulationConfig"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 25,
        "name": "_build_world",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config"
          }
        ],
        "return_type": "WorldState",
        "signature": "(config: SimulationConfig) -> WorldState"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 44,
        "name": "_familiarity",
        "params": [
          {
            "annotation": "WorldState",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "world"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "owner"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "other"
          }
        ],
        "return_type": "float",
        "signature": "(world: WorldState, owner: str, other: str) -> float"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 49,
        "name": "test_chat_success_personality_bonus_applied",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": "None",
        "signature": "(base_config: SimulationConfig) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 59,
        "name": "test_chat_success_parity_when_disabled",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": "None",
        "signature": "(base_config: SimulationConfig) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.agents.models",
        "townlet.config",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 66,
    "module_name": "tests.test_relationship_integration",
    "path": "tests/test_relationship_integration.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 6,
        "name": "test_apply_delta_clamps_and_prunes",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 19,
        "name": "test_decay_removes_zero_ties",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 31,
        "name": "test_eviction_hook_invoked_for_capacity",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 48,
        "name": "test_eviction_hook_invoked_for_decay",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.world.relationships"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 64,
    "module_name": "tests.test_relationship_ledger",
    "path": "tests/test_relationship_ledger.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 15,
        "name": "test_record_eviction_tracks_counts",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 25,
        "name": "test_window_rolls_and_history_records_samples",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 48,
        "name": "test_latest_payload_round_trips_via_ingest",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 65,
        "name": "test_invalid_configuration_raises",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 73,
        "name": "test_world_relationship_metrics_records_evictions",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 86,
        "name": "test_world_relationship_update_symmetry",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 97,
        "name": "test_queue_events_modify_relationships",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 136,
        "name": "test_shared_meal_updates_relationship",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 170,
        "name": "test_absence_triggers_took_my_shift_relationships",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 212,
        "name": "test_late_help_creates_positive_relationship",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 254,
        "name": "test_chat_outcomes_adjust_relationships",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 276,
        "name": "test_relationship_tie_helper_returns_current_values",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 287,
        "name": "test_consume_chat_events_is_single_use",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.telemetry.relationship_metrics",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 308,
    "module_name": "tests.test_relationship_metrics",
    "path": "tests/test_relationship_metrics.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 8,
        "name": "test_modifiers_disabled_returns_baseline",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 20,
        "name": "test_forgiveness_scales_negative_values",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 34,
        "name": "test_extroversion_adds_chat_bonus",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 46,
        "name": "test_ambition_scales_conflict_rivalry",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 58,
        "name": "test_unforgiving_agent_intensifies_negative_hits",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.agents"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 67,
    "module_name": "tests.test_relationship_personality_modifiers",
    "path": "tests/test_relationship_personality_modifiers.py",
    "todos": []
  },
  {
    "classes": [
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": null,
        "lineno": 10,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 11,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "dict[str, float]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "needs"
              },
              {
                "annotation": "float",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "wallet"
              }
            ],
            "return_type": "None",
            "signature": "(self, needs: dict[str, float], wallet: float) -> None"
          }
        ],
        "name": "StubSnapshot"
      },
      {
        "attributes": [],
        "bases": [],
        "decorators": [],
        "docstring": null,
        "lineno": 16,
        "methods": [
          {
            "docstring": null,
            "is_async": false,
            "lineno": 17,
            "name": "__init__",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "config"
              },
              {
                "annotation": "StubSnapshot",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "snapshot"
              },
              {
                "annotation": "dict[str, float]",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "context"
              }
            ],
            "return_type": "None",
            "signature": "(self, config, snapshot: StubSnapshot, context: dict[str, float]) -> None"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 28,
            "name": "consume_chat_events",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              }
            ],
            "return_type": null,
            "signature": "(self)"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 31,
            "name": "agent_context",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              }
            ],
            "return_type": "dict[str, float]",
            "signature": "(self, agent_id: str) -> dict[str, float]"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 34,
            "name": "relationship_tie",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "subject"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "target"
              }
            ],
            "return_type": null,
            "signature": "(self, subject: str, target: str)"
          },
          {
            "docstring": null,
            "is_async": false,
            "lineno": 37,
            "name": "rivalry_top",
            "params": [
              {
                "annotation": null,
                "default": null,
                "kind": "positional_or_keyword",
                "name": "self"
              },
              {
                "annotation": "str",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "agent_id"
              },
              {
                "annotation": "int",
                "default": null,
                "kind": "positional_or_keyword",
                "name": "limit"
              }
            ],
            "return_type": null,
            "signature": "(self, agent_id: str, limit: int)"
          }
        ],
        "name": "StubWorld"
      }
    ],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 41,
        "name": "_make_world",
        "params": [
          {
            "annotation": "float",
            "default": "0.5",
            "kind": "positional_or_keyword",
            "name": "hunger"
          }
        ],
        "return_type": "WorldState",
        "signature": "(hunger: float = 0.5) -> WorldState"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 53,
        "name": "test_reward_negative_with_high_deficit",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 59,
        "name": "test_reward_clipped_by_config",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 66,
        "name": "test_survival_tick_positive_when_balanced",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 81,
        "name": "test_chat_reward_applied_for_successful_conversation",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 109,
        "name": "test_chat_reward_skipped_when_needs_override_triggers",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 135,
        "name": "test_chat_reward_blocked_within_termination_window",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 164,
        "name": "test_episode_clip_enforced",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 181,
        "name": "test_wage_and_punctuality_bonus",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 217,
        "name": "test_terminal_penalty_applied_for_faint",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 240,
        "name": "test_terminal_penalty_applied_for_eviction",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.rewards.engine",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 261,
    "module_name": "tests.test_reward_engine",
    "path": "tests/test_reward_engine.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 8,
        "name": "test_component_stats_mean_and_extremes",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 19,
        "name": "test_reward_aggregator_tracks_components",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "scripts.reward_summary"
      ],
      "stdlib": [
        "json",
        "pathlib"
      ]
    },
    "lines": 49,
    "module_name": "tests.test_reward_summary",
    "path": "tests/test_reward_summary.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 6,
        "name": "test_increment_and_clamp_and_eviction",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 20,
        "name": "test_decay_and_eviction_threshold",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 32,
        "name": "test_should_avoid_toggle",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.world.rivalry"
      ],
      "stdlib": []
    },
    "lines": 38,
    "module_name": "tests.test_rivalry_ledger",
    "path": "tests/test_rivalry_ledger.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 6,
        "name": "test_apply_conflict_clamps_to_max",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 17,
        "name": "test_decay_evicts_low_scores",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 26,
        "name": "test_should_avoid_threshold",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 35,
        "name": "test_encode_features_fixed_width",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.world.rivalry"
      ],
      "stdlib": [
        "__future__"
      ]
    },
    "lines": 43,
    "module_name": "tests.test_rivalry_state",
    "path": "tests/test_rivalry_state.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 14,
        "name": "_dummy_frame",
        "params": [
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "agent_id"
          },
          {
            "annotation": "float",
            "default": "0.0",
            "kind": "positional_or_keyword",
            "name": "reward"
          },
          {
            "annotation": "bool",
            "default": "False",
            "kind": "positional_or_keyword",
            "name": "done"
          }
        ],
        "return_type": "dict[str, object]",
        "signature": "(agent_id: str, reward: float = 0.0, done: bool = False) -> dict[str, object]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 28,
        "name": "test_rollout_buffer_grouping_to_samples",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 41,
        "name": "test_training_harness_capture_rollout",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 67,
        "name": "test_rollout_buffer_empty_build_dataset_raises",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 73,
        "name": "test_rollout_buffer_single_timestep_metrics",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy",
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.policy.rollout",
        "townlet.policy.runner"
      ],
      "stdlib": [
        "__future__",
        "json",
        "pathlib"
      ]
    },
    "lines": 85,
    "module_name": "tests.test_rollout_buffer",
    "path": "tests/test_rollout_buffer.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "SCENARIO_CONFIGS",
        "value": "[Path('configs/scenarios/kitchen_breakfast.yaml'), Path('configs/scenarios/queue_conflict.yaml'), Path('configs/scenarios/employment_punctuality.yaml'), Path('configs/scenarios/rivalry_decay.yaml'), Path('configs/scenarios/observation_baseline.yaml')]"
      },
      {
        "name": "GOLDEN_STATS_PATH",
        "value": "Path('docs/samples/rollout_scenario_stats.json')"
      },
      {
        "name": "GOLDEN_STATS",
        "value": "json.loads(GOLDEN_STATS_PATH.read_text()) if GOLDEN_STATS_PATH.exists() else {}"
      }
    ],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 27,
        "name": "test_capture_rollout_scenarios",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, config_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy",
        "pytest",
        "subprocess",
        "sys"
      ],
      "internal": [
        "townlet.config"
      ],
      "stdlib": [
        "__future__",
        "json",
        "pathlib"
      ]
    },
    "lines": 109,
    "module_name": "tests.test_rollout_capture",
    "path": "tests/test_rollout_capture.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 23,
        "name": "test_run_anneal_rehearsal_pass",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "importlib.util",
        "pytest",
        "sys"
      ],
      "internal": [
        "townlet.policy.models"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 33,
    "module_name": "tests.test_run_anneal_rehearsal",
    "path": "tests/test_run_anneal_rehearsal.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "test_scripted_behavior_determinism",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.policy.behavior",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 85,
    "module_name": "tests.test_scripted_behavior",
    "path": "tests/test_scripted_behavior.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 16,
        "name": "base_config",
        "params": [],
        "return_type": null,
        "signature": "()"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 23,
        "name": "test_simulation_loop_snapshot_round_trip",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, base_config) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 70,
        "name": "test_save_snapshot_uses_config_root_and_identity_override",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, base_config) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 98,
        "name": "test_simulation_resume_equivalence",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, base_config) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 174,
        "name": "test_policy_transitions_resume",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, base_config) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 201,
        "name": "_normalise_snapshot",
        "params": [
          {
            "annotation": "dict[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "snapshot"
          }
        ],
        "return_type": "dict[str, object]",
        "signature": "(snapshot: dict[str, object]) -> dict[str, object]"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.snapshots.state",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "json",
        "pathlib",
        "random"
      ]
    },
    "lines": 214,
    "module_name": "tests.test_sim_loop_snapshot",
    "path": "tests/test_sim_loop_snapshot.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 7,
        "name": "test_simulation_loop_runs_one_tick",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 14,
    "module_name": "tests.test_sim_loop_structure",
    "path": "tests/test_sim_loop_structure.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 24,
        "name": "sample_config",
        "params": [],
        "return_type": "SimulationConfig",
        "signature": "() -> SimulationConfig"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 31,
        "name": "test_snapshot_round_trip",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, sample_config) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 120,
        "name": "test_snapshot_config_mismatch_raises",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, sample_config) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 128,
        "name": "test_snapshot_missing_relationships_field_rejected",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, sample_config) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 142,
        "name": "test_snapshot_schema_version_mismatch",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, sample_config) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 153,
        "name": "_config_with_snapshot_updates",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config"
          },
          {
            "annotation": "dict[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "updates"
          }
        ],
        "return_type": "SimulationConfig",
        "signature": "(config: SimulationConfig, updates: dict[str, object]) -> SimulationConfig"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 163,
        "name": "test_snapshot_mismatch_allowed_when_guardrail_disabled",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, sample_config: SimulationConfig) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 179,
        "name": "test_snapshot_schema_downgrade_honours_allow_flag",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, sample_config: SimulationConfig) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 200,
        "name": "test_world_relationship_snapshot_round_trip",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, sample_config: SimulationConfig) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.scheduler.perturbations",
        "townlet.snapshots.state",
        "townlet.telemetry.publisher",
        "townlet.utils",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "json",
        "pathlib",
        "random"
      ]
    },
    "lines": 327,
    "module_name": "tests.test_snapshot_manager",
    "path": "tests/test_snapshot_manager.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 14,
        "name": "sample_config",
        "params": [],
        "return_type": "SimulationConfig",
        "signature": "() -> SimulationConfig"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 22,
        "name": "reset_registry",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 28,
        "name": "_basic_state",
        "params": [
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config"
          }
        ],
        "return_type": "SnapshotState",
        "signature": "(config: SimulationConfig) -> SnapshotState"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 32,
        "name": "test_snapshot_migration_applied",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, sample_config: SimulationConfig) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 51,
        "name": "test_snapshot_migration_multi_step",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, sample_config: SimulationConfig) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 74,
        "name": "test_snapshot_migration_missing_path_raises",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": "SimulationConfig",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample_config"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, sample_config: SimulationConfig) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.snapshots",
        "townlet.snapshots.migrations"
      ],
      "stdlib": [
        "__future__",
        "dataclasses",
        "pathlib"
      ]
    },
    "lines": 82,
    "module_name": "tests.test_snapshot_migrations",
    "path": "tests/test_snapshot_migrations.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 7,
        "name": "make_monitor",
        "params": [],
        "return_type": "StabilityMonitor",
        "signature": "() -> StabilityMonitor"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 19,
        "name": "_track_minimal",
        "params": [
          {
            "annotation": "StabilityMonitor",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "monitor"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "keyword_only",
            "name": "tick"
          },
          {
            "annotation": "bool",
            "default": "False",
            "kind": "keyword_only",
            "name": "embedding_warning"
          },
          {
            "annotation": "bool",
            "default": "False",
            "kind": "keyword_only",
            "name": "queue_alert"
          }
        ],
        "return_type": "None",
        "signature": "(monitor: StabilityMonitor, *, tick: int, embedding_warning: bool = False, queue_alert: bool = False) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 42,
        "name": "test_starvation_spike_alert_triggers_after_streak",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 59,
        "name": "test_option_thrash_alert_averages_over_window",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 76,
        "name": "test_reward_variance_alert_exports_state",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 107,
        "name": "test_queue_fairness_alerts_include_metrics",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 128,
        "name": "test_rivalry_spike_alert_triggers_on_intensity",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 147,
        "name": "test_promotion_window_tracking",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 188,
        "name": "test_promotion_window_respects_allowed_alerts",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.stability.monitor"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 212,
    "module_name": "tests.test_stability_monitor",
    "path": "tests/test_stability_monitor.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "test_stability_alerts_exposed_via_telemetry_snapshot",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.console.handlers",
        "townlet.core.sim_loop",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 47,
    "module_name": "tests.test_stability_telemetry",
    "path": "tests/test_stability_telemetry.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 11,
        "name": "make_simulation",
        "params": [
          {
            "annotation": "bool",
            "default": "True",
            "kind": "positional_or_keyword",
            "name": "enforce_job_loop"
          }
        ],
        "return_type": "SimulationLoop",
        "signature": "(enforce_job_loop: bool = True) -> SimulationLoop"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 30,
        "name": "test_telemetry_client_parses_console_snapshot",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 59,
        "name": "test_telemetry_client_warns_on_newer_schema",
        "params": [
          {
            "annotation": "pytest.MonkeyPatch",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "monkeypatch"
          }
        ],
        "return_type": "None",
        "signature": "(monkeypatch: pytest.MonkeyPatch) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 74,
        "name": "test_telemetry_client_raises_on_major_mismatch",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.console.handlers",
        "townlet.core.sim_loop",
        "townlet.world.grid",
        "townlet_ui.telemetry"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 78,
    "module_name": "tests.test_telemetry_client",
    "path": "tests/test_telemetry_client.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 11,
        "name": "test_telemetry_captures_job_snapshot",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 40,
        "name": "test_stability_monitor_lateness_alert",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.stability.monitor",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 55,
    "module_name": "tests.test_telemetry_jobs",
    "path": "tests/test_telemetry_jobs.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 11,
        "name": "test_narration_rate_limiter_enforces_cooldowns",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 32,
        "name": "test_narration_rate_limiter_priority_bypass",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 49,
        "name": "test_telemetry_publisher_emits_queue_conflict_narration",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.telemetry.narration",
        "townlet.telemetry.publisher",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 107,
    "module_name": "tests.test_telemetry_narration",
    "path": "tests/test_telemetry_narration.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "make_loop",
        "params": [],
        "return_type": "SimulationLoop",
        "signature": "() -> SimulationLoop"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 17,
        "name": "test_shower_events_in_telemetry",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 80,
        "name": "test_shower_complete_narration",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 139,
        "name": "test_sleep_events_in_telemetry",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 200,
        "name": "test_rivalry_events_surface_in_telemetry",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 236,
    "module_name": "tests.test_telemetry_new_events",
    "path": "tests/test_telemetry_new_events.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 11,
        "name": "_ensure_agents",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "loop"
          }
        ],
        "return_type": "None",
        "signature": "(loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 26,
        "name": "test_file_transport_stream_smoke",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.world.grid",
        "townlet_ui.telemetry"
      ],
      "stdlib": [
        "__future__",
        "json",
        "pathlib"
      ]
    },
    "lines": 51,
    "module_name": "tests.test_telemetry_stream_smoke",
    "path": "tests/test_telemetry_stream_smoke.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 17,
        "name": "test_summary_includes_new_events",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "importlib.util",
        "sys"
      ],
      "internal": [],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 69,
    "module_name": "tests.test_telemetry_summary",
    "path": "tests/test_telemetry_summary.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 13,
        "name": "_ensure_agents",
        "params": [
          {
            "annotation": "SimulationLoop",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "loop"
          }
        ],
        "return_type": "None",
        "signature": "(loop: SimulationLoop) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 28,
        "name": "test_transport_buffer_drop_until_capacity",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 39,
        "name": "test_telemetry_publisher_flushes_payload",
        "params": [
          {
            "annotation": "pytest.MonkeyPatch",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "monkeypatch"
          }
        ],
        "return_type": "None",
        "signature": "(monkeypatch: pytest.MonkeyPatch) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 70,
        "name": "test_telemetry_publisher_retries_on_failure",
        "params": [
          {
            "annotation": "pytest.MonkeyPatch",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "monkeypatch"
          }
        ],
        "return_type": "None",
        "signature": "(monkeypatch: pytest.MonkeyPatch) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.telemetry.transport",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "json",
        "pathlib"
      ]
    },
    "lines": 116,
    "module_name": "tests.test_telemetry_transport",
    "path": "tests/test_telemetry_transport.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "VALID_RECORD",
        "value": "{'epoch': 1.0, 'updates': 2.0, 'transitions': 4.0, 'loss_policy': 0.1, 'loss_value': 0.2, 'loss_entropy': 0.3, 'loss_total': 0.4, 'clip_fraction': 0.1, 'adv_mean': 0.0, 'adv_std': 0.1, 'adv_zero_std_batches': 0.0, 'adv_min_std': 0.1, 'clip_triggered_minibatches': 0.0, 'clip_fraction_max': 0.1, 'grad_norm': 1.5, 'kl_divergence': 0.01, 'telemetry_version': 1.0, 'lr': 0.0003, 'steps': 4.0, 'baseline_sample_count': 2.0, 'baseline_reward_mean': 0.25, 'baseline_reward_sum': 1.0, 'baseline_reward_sum_mean': 0.5, 'baseline_log_prob_mean': -0.2, 'conflict.rivalry_max_mean_avg': 0.05, 'conflict.rivalry_max_max_avg': 0.1, 'conflict.rivalry_avoid_count_mean_avg': 0.0, 'conflict.rivalry_avoid_count_max_avg': 0.0}"
      }
    ],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 42,
        "name": "_write_ndjson",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "path"
          },
          {
            "annotation": "dict[str, float]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "record"
          }
        ],
        "return_type": "None",
        "signature": "(path: Path, record: dict[str, float]) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 46,
        "name": "test_validate_ppo_telemetry_accepts_valid_log",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 66,
        "name": "test_validate_ppo_telemetry_raises_for_missing_conflict",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 81,
        "name": "test_validate_ppo_telemetry_accepts_version_1_1",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 106,
        "name": "test_validate_ppo_telemetry_v1_1_missing_field_raises",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "scripts.validate_ppo_telemetry"
      ],
      "stdlib": [
        "__future__",
        "json",
        "pathlib"
      ]
    },
    "lines": 119,
    "module_name": "tests.test_telemetry_validator",
    "path": "tests/test_telemetry_validator.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 17,
        "name": "write_log",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": "list[dict[str, object]]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "records"
          }
        ],
        "return_type": "Path",
        "signature": "(tmp_path: Path, records: list[dict[str, object]]) -> Path"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 26,
        "name": "test_anneal_bc_threshold",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "bc_accuracy"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, bc_accuracy: float) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 67,
        "name": "test_new_event_thresholds",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "importlib.util",
        "pytest",
        "sys"
      ],
      "internal": [],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 105,
    "module_name": "tests.test_telemetry_watch",
    "path": "tests/test_telemetry_watch.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 15,
        "name": "_write_sample",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "output_dir"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "stem"
          },
          {
            "annotation": "int",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "timesteps"
          },
          {
            "annotation": "int",
            "default": "2",
            "kind": "positional_or_keyword",
            "name": "action_dim"
          }
        ],
        "return_type": "tuple[Path, Path]",
        "signature": "(output_dir: Path, stem: str, timesteps: int, action_dim: int = 2) -> tuple[Path, Path]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 56,
        "name": "test_run_anneal_bc_then_ppo",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy",
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.policy.models",
        "townlet.policy.replay",
        "townlet.policy.runner"
      ],
      "stdlib": [
        "__future__",
        "json",
        "pathlib"
      ]
    },
    "lines": 108,
    "module_name": "tests.test_training_anneal",
    "path": "tests/test_training_anneal.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "_make_namespace",
        "params": [
          {
            "annotation": "object",
            "default": null,
            "kind": "varkw",
            "name": "kwargs"
          }
        ],
        "return_type": "Namespace",
        "signature": "(**kwargs: object) -> Namespace"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 29,
        "name": "test_collect_ppo_overrides_handles_values",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 59,
        "name": "test_apply_ppo_overrides_creates_config_when_missing",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 74,
        "name": "test_apply_ppo_overrides_updates_existing_model",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "scripts",
        "townlet.config"
      ],
      "stdlib": [
        "__future__",
        "argparse",
        "pathlib"
      ]
    },
    "lines": 81,
    "module_name": "tests.test_training_cli",
    "path": "tests/test_training_cli.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [
      {
        "name": "SCENARIO_CONFIGS",
        "value": "[Path('configs/scenarios/kitchen_breakfast.yaml'), Path('configs/scenarios/queue_conflict.yaml'), Path('configs/scenarios/employment_punctuality.yaml'), Path('configs/scenarios/rivalry_decay.yaml'), Path('configs/scenarios/observation_baseline.yaml')]"
      },
      {
        "name": "GOLDEN_STATS_PATH",
        "value": "Path('docs/samples/rollout_scenario_stats.json')"
      },
      {
        "name": "GOLDEN_STATS",
        "value": "json.loads(GOLDEN_STATS_PATH.read_text()) if GOLDEN_STATS_PATH.exists() else {}"
      },
      {
        "name": "REQUIRED_PPO_KEYS",
        "value": "{'epoch', 'updates', 'transitions', 'loss_policy', 'loss_value', 'loss_entropy', 'loss_total', 'clip_fraction', 'adv_mean', 'adv_std', 'adv_zero_std_batches', 'adv_min_std', 'clip_triggered_minibatches', 'clip_fraction_max', 'grad_norm', 'kl_divergence', 'telemetry_version', 'lr', 'steps', 'epoch_duration_sec', 'data_mode', 'cycle_id', 'batch_entropy_mean', 'batch_entropy_std', 'grad_norm_max', 'kl_divergence_max', 'reward_advantage_corr', 'rollout_ticks', 'log_stream_offset', 'queue_conflict_events', 'queue_conflict_intensity_sum', 'shared_meal_events', 'late_help_events', 'shift_takeover_events', 'chat_success_events', 'chat_failure_events', 'chat_quality_mean'}"
      },
      {
        "name": "REQUIRED_PPO_NUMERIC_KEYS",
        "value": "REQUIRED_PPO_KEYS - {'data_mode'}"
      },
      {
        "name": "BASELINE_KEYS_REQUIRED",
        "value": "{'baseline_sample_count', 'baseline_reward_sum', 'baseline_reward_sum_mean', 'baseline_reward_mean'}"
      },
      {
        "name": "BASELINE_KEYS_OPTIONAL",
        "value": "{'baseline_log_prob_mean'}"
      },
      {
        "name": "ALLOWED_KEY_PREFIXES",
        "value": "('conflict.',)"
      }
    ],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 97,
        "name": "_validate_numeric",
        "params": [
          {
            "annotation": "object",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "value"
          }
        ],
        "return_type": "None",
        "signature": "(value: object) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 102,
        "name": "_assert_ppo_log_schema",
        "params": [
          {
            "annotation": "dict[str, object]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "summary"
          },
          {
            "annotation": "bool",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "require_baseline"
          }
        ],
        "return_type": "None",
        "signature": "(summary: dict[str, object], require_baseline: bool) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 138,
        "name": "_load_expected_stats",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config_path"
          }
        ],
        "return_type": "dict[str, dict[str, float]]",
        "signature": "(config_path: Path) -> dict[str, dict[str, float]]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 146,
        "name": "_aggregate_expected_metrics",
        "params": [
          {
            "annotation": "dict[str, dict[str, float]]",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "sample_stats"
          }
        ],
        "return_type": "dict[str, float]",
        "signature": "(sample_stats: dict[str, dict[str, float]]) -> dict[str, float]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 184,
        "name": "_make_sample",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "base_dir"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "rivalry_increment"
          },
          {
            "annotation": "float",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "avoid_threshold"
          },
          {
            "annotation": "str",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "suffix"
          }
        ],
        "return_type": "tuple[Path, Path]",
        "signature": "(base_dir: Path, rivalry_increment: float, avoid_threshold: float, suffix: str) -> tuple[Path, Path]"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 251,
        "name": "_make_social_sample",
        "params": [],
        "return_type": "ReplaySample",
        "signature": "() -> ReplaySample"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 309,
        "name": "test_training_harness_replay_stats",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 318,
        "name": "test_replay_dataset_batch_iteration",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 348,
        "name": "test_replay_loader_schema_guard",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 357,
        "name": "test_replay_dataset_streaming",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 383,
        "name": "test_replay_loader_missing_training_arrays",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 400,
        "name": "test_replay_loader_value_length_mismatch",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 423,
        "name": "test_training_harness_run_ppo_on_capture",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          },
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "config_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path, config_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 539,
        "name": "test_training_harness_run_ppo",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 554,
        "name": "test_run_ppo_rejects_nan_advantages",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 566,
        "name": "test_training_harness_log_sampling_and_rotation",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 609,
        "name": "test_training_harness_run_rollout_ppo",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 629,
        "name": "test_training_harness_ppo_conflict_telemetry",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 685,
        "name": "test_training_harness_run_rollout_ppo_multiple_cycles",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 727,
        "name": "test_training_harness_rollout_capture_and_train_cycles",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 794,
        "name": "test_training_harness_streaming_log_offsets",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 844,
        "name": "test_training_harness_rollout_queue_conflict_metrics",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 873,
        "name": "test_ppo_social_chat_drift",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 918,
        "name": "test_policy_runtime_collects_frames",
        "params": [
          {
            "annotation": "Path",
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tmp_path"
          }
        ],
        "return_type": "None",
        "signature": "(tmp_path: Path) -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "numpy",
        "pytest",
        "subprocess",
        "sys",
        "torch"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.observations.builder",
        "townlet.policy.models",
        "townlet.policy.replay",
        "townlet.policy.replay_buffer",
        "townlet.policy.runner",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "json",
        "math",
        "pathlib"
      ]
    },
    "lines": 955,
    "module_name": "tests.test_training_replay",
    "path": "tests/test_training_replay.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "test_encode_decode_rng_state_round_trip",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 20,
        "name": "test_decode_rng_state_invalid_payload",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.utils"
      ],
      "stdlib": [
        "__future__",
        "random"
      ]
    },
    "lines": 22,
    "module_name": "tests.test_utils_rng",
    "path": "tests/test_utils_rng.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "make_loop",
        "params": [],
        "return_type": "SimulationLoop",
        "signature": "() -> SimulationLoop"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 17,
        "name": "tile_for_position",
        "params": [
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "tiles"
          },
          {
            "annotation": null,
            "default": null,
            "kind": "positional_or_keyword",
            "name": "position"
          }
        ],
        "return_type": null,
        "signature": "(tiles, position)"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 25,
        "name": "test_local_view_includes_objects_and_agents",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 55,
        "name": "test_agent_context_defaults",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 71,
    "module_name": "tests.test_world_local_view",
    "path": "tests/test_world_local_view.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "_setup_world",
        "params": [],
        "return_type": "WorldState",
        "signature": "() -> WorldState"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 18,
        "name": "test_apply_nightly_reset_returns_agents_home",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 50,
        "name": "test_simulation_loop_triggers_nightly_reset",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.world.grid"
      ],
      "stdlib": [
        "__future__",
        "pathlib"
      ]
    },
    "lines": 74,
    "module_name": "tests.test_world_nightly_reset",
    "path": "tests/test_world_nightly_reset.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 10,
        "name": "_make_world",
        "params": [],
        "return_type": "WorldState",
        "signature": "() -> WorldState"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 34,
        "name": "test_queue_assignment_flow",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 54,
        "name": "test_queue_ghost_step_promotes_waiter",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 75,
        "name": "test_affordance_completion_applies_effects",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 101,
        "name": "test_eat_meal_adjusts_needs_and_wallet",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 132,
        "name": "test_affordance_failure_skips_effects",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 164,
        "name": "test_affordances_loaded_from_yaml",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 172,
        "name": "test_affordance_events_emitted",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 199,
        "name": "test_need_decay_applied_each_tick",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 210,
        "name": "test_eat_meal_deducts_wallet_and_stock",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 237,
        "name": "test_wage_income_applied_on_shift",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 253,
        "name": "test_stove_restock_event_emitted",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 263,
        "name": "test_scripted_behavior_handles_sleep",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.core.sim_loop",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 280,
    "module_name": "tests.test_world_queue_integration",
    "path": "tests/test_world_queue_integration.py",
    "todos": []
  },
  {
    "classes": [],
    "constants": [],
    "docstring": null,
    "env_vars": [],
    "functions": [
      {
        "docstring": null,
        "is_async": false,
        "lineno": 9,
        "name": "_make_world",
        "params": [],
        "return_type": "WorldState",
        "signature": "() -> WorldState"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 28,
        "name": "test_register_rivalry_conflict_updates_snapshot",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 35,
        "name": "test_rivalry_events_record_reason",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 51,
        "name": "test_rivalry_decays_over_time",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      },
      {
        "docstring": null,
        "is_async": false,
        "lineno": 73,
        "name": "test_queue_conflict_event_emitted_with_intensity",
        "params": [],
        "return_type": "None",
        "signature": "() -> None"
      }
    ],
    "has_dataclasses": false,
    "has_logging": false,
    "has_type_hints": true,
    "imports": {
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config",
        "townlet.world.grid"
      ],
      "stdlib": [
        "pathlib"
      ]
    },
    "lines": 94,
    "module_name": "tests.test_world_rivalry",
    "path": "tests/test_world_rivalry.py",
    "todos": []
  }
]