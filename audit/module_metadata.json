[
  {
    "path": "scripts/audit_bc_datasets.py",
    "module": "scripts.audit_bc_datasets",
    "docstring": "Audit behaviour cloning datasets for checksum and metadata freshness.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "datetime.datetime",
        "hashlib",
        "json",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Mapping"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 16,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "load_versions",
        "lineno": 32,
        "signature": "(path: Path) -> Mapping[str, Mapping[str, object]]",
        "docstring": null
      },
      {
        "name": "audit_dataset",
        "lineno": 41,
        "signature": "(name: str, payload: Mapping[str, object]) -> dict[str, object]",
        "docstring": null
      },
      {
        "name": "audit_catalog",
        "lineno": 129,
        "signature": "(versions_path: Path) -> dict[str, object]",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 152,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "DEFAULT_VERSIONS_PATH",
        "value": "Path('data/bc_datasets/versions.json')",
        "lineno": 12
      },
      {
        "name": "REQUIRED_VERSION_KEYS",
        "value": "{'manifest', 'checksums', 'captures_dir'}",
        "lineno": 13
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 161
  },
  {
    "path": "scripts/bc_metrics_summary.py",
    "module": "scripts.bc_metrics_summar",
    "docstring": "Summarise behaviour cloning evaluation metrics.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "pathlib.Path"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 10,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "load_metrics",
        "lineno": 17,
        "signature": "(path: Path) -> list[dict[str, float]]",
        "docstring": null
      },
      {
        "name": "summarise",
        "lineno": 26,
        "signature": "(metrics: list[dict[str, float]]) -> dict[str, float]",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 37,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 52
  },
  {
    "path": "scripts/benchmark_tick.py",
    "module": "scripts.benchmark_tick",
    "docstring": "Simple benchmark to estimate average tick duration.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "pathlib.Path",
        "time"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 12,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "benchmark",
        "lineno": 20,
        "signature": "(config_path: Path, ticks: int, enforce: bool) -> float",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 31,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 38
  },
  {
    "path": "scripts/capture_rollout.py",
    "module": "scripts.capture_rollout",
    "docstring": "CLI to capture Townlet rollout trajectories into replay samples.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "datetime.datetime",
        "datetime.timezone",
        "json",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config.loader.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.policy.metrics.compute_sample_metrics",
        "townlet.policy.replay.ReplaySample",
        "townlet.policy.replay.frames_to_replay_sample",
        "townlet.policy.scenario_utils.apply_scenario",
        "townlet.policy.scenario_utils.seed_default_agents"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 19,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 59,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 140
  },
  {
    "path": "scripts/capture_rollout_suite.py",
    "module": "scripts.capture_rollout_suite",
    "docstring": "Run rollout capture across a suite of configs.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "pathlib.Path",
        "subprocess",
        "sys",
        "typing.List"
      ],
      "external": [],
      "internal": [
        "townlet.config.loader.load_config"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 13,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "run_capture",
        "lineno": 58,
        "signature": "(config: Path, ticks: int, output: Path, auto_seed: bool, agent_filter: str | None, compress: bool, retries: int) -> None",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 95,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 112
  },
  {
    "path": "scripts/capture_scripted.py",
    "module": "scripts.capture_scripted",
    "docstring": "Capture scripted trajectories for behaviour cloning datasets.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "collections.defaultdict",
        "json",
        "pathlib.Path",
        "typing.Dict",
        "typing.List"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.policy.replay.frames_to_replay_sample",
        "townlet.policy.scenario_utils.seed_default_agents",
        "townlet.policy.scripted.ScriptedPolicyAdapter",
        "townlet.policy.scripted.get_scripted_policy"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 20,
        "signature": "(argv: List[str] | None = None) -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "_build_frame",
        "lineno": 35,
        "signature": "(adapter: ScriptedPolicyAdapter, agent_id: str, observation: Dict[str, np.ndarray], reward: float, terminated: bool, trajectory_id: str) -> Dict[str, object]",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 65,
        "signature": "(argv: List[str] | None = None) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 131
  },
  {
    "path": "scripts/console_dry_run.py",
    "module": "scripts.console_dry_run",
    "docstring": "Employment console dry-run harness.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path",
        "tempfile"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.console.handlers.ConsoleCommand",
        "townlet.console.handlers.create_console_router",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.snapshots.SnapshotManager",
        "townlet.snapshots.state.snapshot_from_world",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "main",
        "lineno": 15,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 126
  },
  {
    "path": "scripts/curate_trajectories.py",
    "module": "scripts.curate_trajectories",
    "docstring": "Filter and summarise behaviour-cloning trajectories.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "dataclasses.dataclass",
        "json",
        "pathlib.Path",
        "typing.Iterable",
        "typing.List",
        "typing.Mapping"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.policy.replay.load_replay_sample"
      ]
    },
    "classes": [
      {
        "name": "EvaluationResult",
        "lineno": 17,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "sample_path",
            "annotation": "Path",
            "value": null,
            "lineno": 18
          },
          {
            "name": "meta_path",
            "annotation": "Path",
            "value": null,
            "lineno": 19
          },
          {
            "name": "metrics",
            "annotation": "Mapping[str, float]",
            "value": null,
            "lineno": 20
          },
          {
            "name": "accepted",
            "annotation": "bool",
            "value": null,
            "lineno": 21
          }
        ],
        "methods": []
      }
    ],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 24,
        "signature": "(argv: List[str] | None = None) -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "_pair_files",
        "lineno": 33,
        "signature": "(directory: Path) -> Iterable[tuple[Path, Path]]",
        "docstring": null
      },
      {
        "name": "evaluate_sample",
        "lineno": 40,
        "signature": "(npz_path: Path, json_path: Path) -> EvaluationResult",
        "docstring": null
      },
      {
        "name": "curate",
        "lineno": 57,
        "signature": "(result: EvaluationResult, *, min_timesteps: int, min_reward: float | None) -> EvaluationResult",
        "docstring": null
      },
      {
        "name": "write_manifest",
        "lineno": 65,
        "signature": "(results: Iterable[EvaluationResult], output: Path) -> None",
        "docstring": null
      },
      {
        "name": "summarise",
        "lineno": 79,
        "signature": "(results: Iterable[EvaluationResult]) -> Mapping[str, float]",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 89,
        "signature": "(argv: List[str] | None = None) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 104
  },
  {
    "path": "scripts/manage_phase_c.py",
    "module": "scripts.manage_phase_c",
    "docstring": "Helper script to toggle Phase C social reward stages in configs.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict",
        "typing.List"
      ],
      "external": [
        "yaml"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 13,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "load_config",
        "lineno": 70,
        "signature": "(path: Path) -> Dict[str, Any]",
        "docstring": null
      },
      {
        "name": "ensure_nested",
        "lineno": 79,
        "signature": "(mapping: Dict[str, Any], keys: List[str]) -> Dict[str, Any]",
        "docstring": null
      },
      {
        "name": "write_config",
        "lineno": 90,
        "signature": "(data: Dict[str, Any], *, output: Path | None, in_place: bool, source: Path) -> None",
        "docstring": null
      },
      {
        "name": "handle_set_stage",
        "lineno": 104,
        "signature": "(args: argparse.Namespace) -> None",
        "docstring": null
      },
      {
        "name": "parse_schedule_entries",
        "lineno": 111,
        "signature": "(entries: List[str]) -> List[Dict[str, Any]]",
        "docstring": null
      },
      {
        "name": "handle_schedule",
        "lineno": 130,
        "signature": "(args: argparse.Namespace) -> None",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 153,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "VALID_STAGES",
        "value": "{'OFF', 'C1', 'C2', 'C3'}",
        "lineno": 10
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 164
  },
  {
    "path": "scripts/merge_rollout_metrics.py",
    "module": "scripts.merge_rollout_metrics",
    "docstring": "Merge captured rollout metrics into the golden stats JSON.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "pathlib.Path"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 12,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "_load_metrics_from_dir",
        "lineno": 55,
        "signature": "(scenario_dir: Path) -> dict[str, dict[str, float]] | None",
        "docstring": null
      },
      {
        "name": "_collect_input_metrics",
        "lineno": 68,
        "signature": "(root: Path, allow_template: bool) -> dict[str, dict[str, dict[str, float]]]",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 85,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "DEFAULT_GOLDEN_PATH",
        "value": "Path('docs/samples/rollout_scenario_stats.json')",
        "lineno": 8
      },
      {
        "name": "METRICS_FILENAME",
        "value": "'rollout_sample_metrics.json'",
        "lineno": 9
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 132
  },
  {
    "path": "scripts/observer_ui.py",
    "module": "scripts.observer_ui",
    "docstring": "Launch the Townlet observer dashboard against a local simulation.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet_ui.dashboard.run_dashboard"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 13,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 46,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 62
  },
  {
    "path": "scripts/ppo_telemetry_plot.py",
    "module": "scripts.ppo_telemetry_plot",
    "docstring": "Quick-look plotting utility for PPO telemetry JSONL logs.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "pathlib.Path",
        "typing.Any"
      ],
      "external": [
        "matplotlib.pyplot"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 10,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "load_entries",
        "lineno": 33,
        "signature": "(log_path: Path) -> list[dict[str, Any]]",
        "docstring": null
      },
      {
        "name": "summarise",
        "lineno": 48,
        "signature": "(entries: list[dict[str, Any]]) -> None",
        "docstring": null
      },
      {
        "name": "plot",
        "lineno": 57,
        "signature": "(entries: list[dict[str, Any]], show: bool, output: Path | None) -> None",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 93,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 101
  },
  {
    "path": "scripts/profile_observation_tensor.py",
    "module": "scripts.profile_observation_tensor",
    "docstring": "Profile observation tensor dimensions for a given config.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "pathlib.Path",
        "statistics.mean"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.observations.builder.ObservationBuilder",
        "townlet.world.AgentSnapshot",
        "townlet.world.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 16,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "bootstrap_world",
        "lineno": 25,
        "signature": "(config_path: Path, agent_count: int) -> tuple[WorldState, ObservationBuilder]",
        "docstring": null
      },
      {
        "name": "profile",
        "lineno": 41,
        "signature": "(world: WorldState, builder: ObservationBuilder, ticks: int) -> dict[str, object]",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 74,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 86
  },
  {
    "path": "scripts/promotion_drill.py",
    "module": "scripts.promotion_drill",
    "docstring": "Run a scripted promotion/rollback drill and capture artefacts.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "pathlib.Path",
        "typing.Any"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.console.handlers.ConsoleCommand",
        "townlet.console.handlers.create_console_router",
        "townlet.core.sim_loop.SimulationLoop"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_ensure_candidate_ready",
        "lineno": 16,
        "signature": "(loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "run_drill",
        "lineno": 31,
        "signature": "(config_path: Path, output_dir: Path, checkpoint: Path) -> dict[str, Any]",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 80,
        "signature": "(argv: list[str] | None = None) -> int",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 107
  },
  {
    "path": "scripts/promotion_evaluate.py",
    "module": "scripts.promotion_evaluate",
    "docstring": "Evaluate promotion readiness from anneal results payloads.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "pathlib.Path",
        "sys",
        "typing.Any",
        "typing.Dict",
        "typing.List"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 15,
        "signature": "(argv: list[str] | None = None) -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "_load_payload",
        "lineno": 50,
        "signature": "(path: Path | None) -> Dict[str, Any]",
        "docstring": null
      },
      {
        "name": "_derive_status",
        "lineno": 60,
        "signature": "(results: List[Dict[str, Any]]) -> str",
        "docstring": null
      },
      {
        "name": "_collect_reasons",
        "lineno": 75,
        "signature": "(results: List[Dict[str, Any]]) -> List[str]",
        "docstring": null
      },
      {
        "name": "evaluate",
        "lineno": 91,
        "signature": "(payload: Dict[str, Any]) -> Dict[str, Any]",
        "docstring": null
      },
      {
        "name": "_print_human",
        "lineno": 147,
        "signature": "(summary: Dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 167,
        "signature": "(argv: list[str] | None = None) -> int",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "DEFAULT_INPUT_PATH",
        "value": "Path('artifacts/m7/anneal_results.json')",
        "lineno": 12
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 190
  },
  {
    "path": "scripts/reward_summary.py",
    "module": "scripts.reward_summar",
    "docstring": "Summarise reward breakdown telemetry for operations teams.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "collections.defaultdict",
        "dataclasses.dataclass",
        "json",
        "pathlib.Path",
        "sys",
        "typing.Iterable",
        "typing.Iterator",
        "typing.Mapping",
        "typing.Sequence"
      ],
      "external": [],
      "internal": []
    },
    "classes": [
      {
        "name": "ComponentStats",
        "lineno": 16,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "count",
            "annotation": "int",
            "value": "0",
            "lineno": 17
          },
          {
            "name": "total",
            "annotation": "float",
            "value": "0.0",
            "lineno": 18
          },
          {
            "name": "minimum",
            "annotation": "float",
            "value": "float('inf')",
            "lineno": 19
          },
          {
            "name": "maximum",
            "annotation": "float",
            "value": "float('-inf')",
            "lineno": 20
          }
        ],
        "methods": [
          {
            "name": "update",
            "signature": "(self, value: float) -> None",
            "lineno": 22,
            "docstring": null
          },
          {
            "name": "mean",
            "signature": "(self) -> float",
            "lineno": 30,
            "docstring": null
          },
          {
            "name": "as_dict",
            "signature": "(self) -> dict[str, float | int]",
            "lineno": 35,
            "docstring": null
          }
        ]
      },
      {
        "name": "RewardAggregator",
        "lineno": 46,
        "bases": [],
        "decorators": [],
        "docstring": "Aggregate reward breakdowns from telemetry payloads.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self) -> None",
            "lineno": 49,
            "docstring": null
          },
          {
            "name": "add_payload",
            "signature": "(self, payload: Mapping[str, object], source: str) -> None",
            "lineno": 58,
            "docstring": null
          },
          {
            "name": "summary",
            "signature": "(self) -> dict[str, object]",
            "lineno": 85,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "_is_number",
        "lineno": 108,
        "signature": "(value: object) -> bool",
        "docstring": null
      },
      {
        "name": "iter_payloads",
        "lineno": 112,
        "signature": "(path: Path) -> Iterator[tuple[Mapping[str, object], str]]",
        "docstring": null
      },
      {
        "name": "collect_statistics",
        "lineno": 138,
        "signature": "(paths: Sequence[Path]) -> RewardAggregator",
        "docstring": null
      },
      {
        "name": "render_text",
        "lineno": 146,
        "signature": "(summary: Mapping[str, object], *, top: int, agent_filters: set[str] | None) -> str",
        "docstring": null
      },
      {
        "name": "render_markdown",
        "lineno": 218,
        "signature": "(summary: Mapping[str, object], *, top: int, agent_filters: set[str] | None) -> str",
        "docstring": null
      },
      {
        "name": "render_json",
        "lineno": 273,
        "signature": "(summary: Mapping[str, object]) -> str",
        "docstring": null
      },
      {
        "name": "parse_args",
        "lineno": 277,
        "signature": "(argv: Sequence[str] | None = None) -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 301,
        "signature": "(argv: Sequence[str] | None = None) -> int",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 323
  },
  {
    "path": "scripts/run_anneal_rehearsal.py",
    "module": "scripts.run_anneal_rehearsal",
    "docstring": "Run BC + anneal rehearsal using production manifests and capture artefacts.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "importlib.util",
        "json",
        "pathlib.Path",
        "sys",
        "typing.Dict"
      ],
      "external": [
        "promotion_evaluate"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.policy.replay.ReplayDatasetConfig",
        "townlet.policy.runner.TrainingHarness"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 20,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "run_rehearsal",
        "lineno": 49,
        "signature": "(config_path: Path, manifest_path: Path, log_dir: Path) -> Dict[str, object]",
        "docstring": null
      },
      {
        "name": "evaluate_summary",
        "lineno": 76,
        "signature": "(summary: Dict[str, object]) -> Dict[str, object]",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 100,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "DEFAULT_CONFIG",
        "value": "Path('artifacts/m5/acceptance/config_idle_v1.yaml')",
        "lineno": 15
      },
      {
        "name": "DEFAULT_MANIFEST",
        "value": "Path('data/bc_datasets/manifests/idle_v1.json')",
        "lineno": 16
      },
      {
        "name": "DEFAULT_LOG_DIR",
        "value": "Path('artifacts/m5/acceptance/logs')",
        "lineno": 17
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 111
  },
  {
    "path": "scripts/run_employment_smoke.py",
    "module": "scripts.run_employment_smoke",
    "docstring": "Employment loop smoke test runner for R2 mitigation.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict",
        "typing.List"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 13,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "run_smoke",
        "lineno": 36,
        "signature": "(config_path: Path, ticks: int, enforce: bool) -> Dict[str, Any]",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 73,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 81
  },
  {
    "path": "scripts/run_mixed_soak.py",
    "module": "scripts.run_mixed_soak",
    "docstring": "Run alternating replay/rollout PPO cycles for soak testing.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "pathlib.Path",
        "sys"
      ],
      "external": [],
      "internal": [
        "townlet.config.loader.load_config",
        "townlet.policy.replay.ReplayDatasetConfig",
        "townlet.policy.runner.TrainingHarness"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 18,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 72,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "ROOT",
        "value": "Path(__file__).resolve().parents[1]",
        "lineno": 8
      },
      {
        "name": "SRC",
        "value": "ROOT / 'src'",
        "lineno": 9
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 110
  },
  {
    "path": "scripts/run_replay.py",
    "module": "scripts.run_repla",
    "docstring": "Utility to replay observation/telemetry samples for analysis or tutorials.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.policy.replay.load_replay_sample"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 14,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "render_observation",
        "lineno": 41,
        "signature": "(sample: Dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "inspect_telemetry",
        "lineno": 54,
        "signature": "(path: Path) -> None",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 71,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 84
  },
  {
    "path": "scripts/run_simulation.py",
    "module": "scripts.run_simulation",
    "docstring": "Run a headless Townlet simulation loop for debugging.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.loader.load_config",
        "townlet.core.sim_loop.SimulationLoop"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 11,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 23,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 31
  },
  {
    "path": "scripts/run_training.py",
    "module": "scripts.run_training",
    "docstring": "CLI entry point for training Townlet policies.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.PPOConfig",
        "townlet.config.loader.load_config",
        "townlet.policy.replay.ReplayDatasetConfig",
        "townlet.policy.runner.TrainingHarness"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 14,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "_collect_ppo_overrides",
        "lineno": 224,
        "signature": "(args: argparse.Namespace) -> dict[str, object]",
        "docstring": null
      },
      {
        "name": "_apply_ppo_overrides",
        "lineno": 247,
        "signature": "(config, overrides: dict[str, object]) -> None",
        "docstring": null
      },
      {
        "name": "_build_dataset_config_from_args",
        "lineno": 253,
        "signature": "(args: argparse.Namespace, default_manifest: Path | None) -> ReplayDatasetConfig | None",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 279,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 466
  },
  {
    "path": "scripts/telemetry_check.py",
    "module": "scripts.telemetry_check",
    "docstring": "Validate Townlet telemetry payloads against known schema versions.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "pathlib.Path",
        "typing.Any",
        "typing.Dict"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 32,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "load_payload",
        "lineno": 43,
        "signature": "(path: Path) -> Dict[str, Any]",
        "docstring": null
      },
      {
        "name": "validate",
        "lineno": 50,
        "signature": "(payload: Dict[str, Any], schema_version: str) -> None",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 73,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "SUPPORTED_SCHEMAS",
        "value": "{'0.2.0': {'employment_keys': {'pending', 'pending_count', 'exits_today', 'daily_exit_cap', 'queue_limit', 'review_window'}, 'job_required_keys': {'job_id', 'on_shift', 'wallet', 'shift_state', 'attendance_ratio', 'late_ticks_today', 'wages_withheld'}}}",
        "lineno": 9
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 84
  },
  {
    "path": "scripts/telemetry_summary.py",
    "module": "scripts.telemetry_summar",
    "docstring": "Produce summaries for PPO telemetry logs.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "pathlib.Path",
        "typing.Sequence"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 10,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "load_records",
        "lineno": 33,
        "signature": "(path: Path) -> list[dict[str, object]]",
        "docstring": null
      },
      {
        "name": "load_baseline",
        "lineno": 50,
        "signature": "(path: Path | None) -> dict[str, float] | None",
        "docstring": null
      },
      {
        "name": "summarise",
        "lineno": 59,
        "signature": "(records: Sequence[dict[str, object]], baseline: dict[str, float] | None) -> dict[str, object]",
        "docstring": null
      },
      {
        "name": "_format_optional_float",
        "lineno": 183,
        "signature": "(value: object, precision: int = 3) -> str",
        "docstring": null
      },
      {
        "name": "render_text",
        "lineno": 192,
        "signature": "(summary: dict[str, object]) -> str",
        "docstring": null
      },
      {
        "name": "render_markdown",
        "lineno": 263,
        "signature": "(summary: dict[str, object]) -> str",
        "docstring": null
      },
      {
        "name": "render",
        "lineno": 319,
        "signature": "(summary: dict[str, object], fmt: str) -> str",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 327,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 338
  },
  {
    "path": "scripts/telemetry_watch.py",
    "module": "scripts.telemetry_watch",
    "docstring": "Tail PPO telemetry logs and alert on metric thresholds.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "pathlib.Path",
        "sys",
        "time",
        "typing.Iterator"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "build_parser",
        "lineno": 60,
        "signature": "() -> argparse.ArgumentParser",
        "docstring": null
      },
      {
        "name": "parse_args",
        "lineno": 229,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "parse_args_from_list",
        "lineno": 233,
        "signature": "(argv: list[str]) -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "stream_records",
        "lineno": 237,
        "signature": "(path: Path, follow: bool, interval: float) -> Iterator[dict[str, float]]",
        "docstring": null
      },
      {
        "name": "_parse_health_line",
        "lineno": 284,
        "signature": "(line: str) -> dict[str, float]",
        "docstring": null
      },
      {
        "name": "stream_health_records",
        "lineno": 315,
        "signature": "(path: Path, follow: bool, interval: float) -> Iterator[dict[str, float]]",
        "docstring": null
      },
      {
        "name": "check_thresholds",
        "lineno": 341,
        "signature": "(record: dict[str, object], args: argparse.Namespace) -> None",
        "docstring": null
      },
      {
        "name": "check_health_thresholds",
        "lineno": 445,
        "signature": "(record: dict[str, float], args: argparse.Namespace) -> None",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 473,
        "signature": "(args: list[str] | None = None) -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "MODES",
        "value": "{'ppo', 'health'}",
        "lineno": 11
      },
      {
        "name": "REQUIRED_KEYS",
        "value": "{'epoch', 'loss_total', 'kl_divergence', 'grad_norm', 'batch_entropy_mean', 'reward_advantage_corr', 'log_stream_offset', 'data_mode', 'queue_conflict_events', 'queue_conflict_intensity_sum', 'shared_meal_events', 'late_help_events', 'shift_takeover_events', 'chat_success_events', 'chat_failure_events', 'chat_quality_mean'}",
        "lineno": 13
      },
      {
        "name": "OPTIONAL_NUMERIC_KEYS",
        "value": "{'anneal_cycle', 'anneal_bc_accuracy', 'anneal_bc_threshold', 'anneal_loss_baseline', 'anneal_queue_baseline', 'anneal_intensity_baseline'}",
        "lineno": 32
      },
      {
        "name": "OPTIONAL_BOOL_KEYS",
        "value": "{'anneal_bc_passed', 'anneal_loss_flag', 'anneal_queue_flag', 'anneal_intensity_flag'}",
        "lineno": 41
      },
      {
        "name": "OPTIONAL_TEXT_KEYS",
        "value": "{'anneal_stage', 'anneal_dataset'}",
        "lineno": 48
      },
      {
        "name": "OPTIONAL_EVENT_KEYS",
        "value": "{'utility_outage_events', 'shower_complete_events', 'sleep_complete_events'}",
        "lineno": 53
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 525
  },
  {
    "path": "scripts/validate_affordances.py",
    "module": "scripts.validate_affordances",
    "docstring": "Validate affordance manifest files for schema compliance.\n\nThis CLI loads each supplied YAML manifest using the Townlet affordance manifest\nloader, reporting checksums and entry counts. Non-compliant manifests cause a\nnon-zero exit status so the script can run in CI.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "pathlib.Path",
        "sys",
        "typing.Iterable",
        "typing.List"
      ],
      "external": [],
      "internal": [
        "townlet.config.affordance_manifest.AffordanceManifest",
        "townlet.config.affordance_manifest.AffordanceManifestError",
        "townlet.config.affordance_manifest.load_affordance_manifest",
        "townlet.world.preconditions.PreconditionSyntaxError",
        "townlet.world.preconditions.compile_preconditions"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 27,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "discover_manifests",
        "lineno": 48,
        "signature": "(inputs: Iterable[str]) -> List[Path]",
        "docstring": null
      },
      {
        "name": "validate_manifest",
        "lineno": 74,
        "signature": "(path: Path) -> AffordanceManifest",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 93,
        "signature": "() -> int",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "DEFAULT_SEARCH_ROOT",
        "value": "Path('configs/affordances')",
        "lineno": 24
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 126
  },
  {
    "path": "scripts/validate_ppo_telemetry.py",
    "module": "scripts.validate_ppo_telemetr",
    "docstring": "Validate PPO telemetry NDJSON logs and report baseline drift.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse",
        "json",
        "math",
        "pathlib.Path",
        "typing.Iterable",
        "typing.List"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "parse_args",
        "lineno": 47,
        "signature": "() -> argparse.Namespace",
        "docstring": null
      },
      {
        "name": "_ensure_numeric",
        "lineno": 69,
        "signature": "(key: str, value: object) -> None",
        "docstring": null
      },
      {
        "name": "_load_records",
        "lineno": 74,
        "signature": "(path: Path) -> List[dict[str, object]]",
        "docstring": null
      },
      {
        "name": "_validate_record",
        "lineno": 108,
        "signature": "(record: dict[str, object], source: Path) -> None",
        "docstring": null
      },
      {
        "name": "_load_baseline",
        "lineno": 157,
        "signature": "(path: Path | None) -> dict[str, float] | None",
        "docstring": null
      },
      {
        "name": "_relative_delta",
        "lineno": 174,
        "signature": "(delta: float, base_value: float) -> float | None",
        "docstring": null
      },
      {
        "name": "_report_drift",
        "lineno": 180,
        "signature": "(records: list[dict[str, object]], baseline: dict[str, float], threshold: float | None, include_relative: bool) -> None",
        "docstring": null
      },
      {
        "name": "validate_logs",
        "lineno": 226,
        "signature": "(paths: Iterable[Path], baseline_path: Path | None, drift_threshold: float | None, include_relative: bool) -> None",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 242,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "BASE_REQUIRED_KEYS",
        "value": "{'epoch', 'updates', 'transitions', 'loss_policy', 'loss_value', 'loss_entropy', 'loss_total', 'clip_fraction', 'clip_fraction_max', 'clip_triggered_minibatches', 'adv_mean', 'adv_std', 'adv_zero_std_batches', 'adv_min_std', 'grad_norm', 'kl_divergence', 'telemetry_version', 'lr', 'steps'}",
        "lineno": 10
      },
      {
        "name": "CONFLICT_KEYS",
        "value": "{'conflict.rivalry_max_mean_avg', 'conflict.rivalry_max_max_avg', 'conflict.rivalry_avoid_count_mean_avg', 'conflict.rivalry_avoid_count_max_avg'}",
        "lineno": 32
      },
      {
        "name": "BASELINE_KEYS",
        "value": "{'baseline_sample_count', 'baseline_reward_mean', 'baseline_reward_sum', 'baseline_reward_sum_mean'}",
        "lineno": 39
      },
      {
        "name": "REQUIRED_V1_1_NUMERIC_KEYS",
        "value": "{'epoch_duration_sec', 'cycle_id', 'batch_entropy_mean', 'batch_entropy_std', 'grad_norm_max', 'kl_divergence_max', 'reward_advantage_corr', 'rollout_ticks', 'log_stream_offset', 'queue_conflict_events', 'queue_conflict_intensity_sum'}",
        "lineno": 91
      },
      {
        "name": "REQUIRED_V1_1_STRING_KEYS",
        "value": "{'data_mode'}",
        "lineno": 105
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 248
  },
  {
    "path": "src/townlet/__init__.py",
    "module": "src.townlet.__init__",
    "docstring": "Townlet simulation package.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 9
  },
  {
    "path": "src/townlet/agents/__init__.py",
    "module": "src.townlet.agents.__init__",
    "docstring": "Agent state models.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "models.AgentState",
        "models.Personality",
        "models.RelationshipEdge",
        "relationship_modifiers.RelationshipDelta",
        "relationship_modifiers.RelationshipEvent",
        "relationship_modifiers.apply_personality_modifiers"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 19
  },
  {
    "path": "src/townlet/agents/models.py",
    "module": "src.townlet.agents.models",
    "docstring": "Agent-related dataclasses and helpers.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "dataclasses.dataclass",
        "dataclasses.field"
      ],
      "external": [],
      "internal": []
    },
    "classes": [
      {
        "name": "Personality",
        "lineno": 9,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "extroversion",
            "annotation": "float",
            "value": null,
            "lineno": 10
          },
          {
            "name": "forgiveness",
            "annotation": "float",
            "value": null,
            "lineno": 11
          },
          {
            "name": "ambition",
            "annotation": "float",
            "value": null,
            "lineno": 12
          }
        ],
        "methods": []
      },
      {
        "name": "RelationshipEdge",
        "lineno": 16,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "other_id",
            "annotation": "str",
            "value": null,
            "lineno": 17
          },
          {
            "name": "trust",
            "annotation": "float",
            "value": null,
            "lineno": 18
          },
          {
            "name": "familiarity",
            "annotation": "float",
            "value": null,
            "lineno": 19
          },
          {
            "name": "rivalry",
            "annotation": "float",
            "value": null,
            "lineno": 20
          }
        ],
        "methods": []
      },
      {
        "name": "AgentState",
        "lineno": 24,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Canonical agent state used across modules.",
        "attrs": [
          {
            "name": "agent_id",
            "annotation": "str",
            "value": null,
            "lineno": 27
          },
          {
            "name": "needs",
            "annotation": "dict[str, float]",
            "value": null,
            "lineno": 28
          },
          {
            "name": "wallet",
            "annotation": "float",
            "value": null,
            "lineno": 29
          },
          {
            "name": "personality",
            "annotation": "Personality",
            "value": null,
            "lineno": 30
          },
          {
            "name": "relationships",
            "annotation": "list[RelationshipEdge]",
            "value": "field(default_factory=list)",
            "lineno": 31
          }
        ],
        "methods": []
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 31
  },
  {
    "path": "src/townlet/agents/relationship_modifiers.py",
    "module": "src.townlet.agents.relationship_modifiers",
    "docstring": "Relationship delta adjustment helpers respecting personality flags.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "dataclasses.dataclass",
        "typing.Literal"
      ],
      "external": [],
      "internal": [
        "townlet.agents.models.Personality"
      ]
    },
    "classes": [
      {
        "name": "RelationshipDelta",
        "lineno": 23,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": "Represents trust/familiarity/rivalry deltas for a single event.",
        "attrs": [
          {
            "name": "trust",
            "annotation": "float",
            "value": "0.0",
            "lineno": 26
          },
          {
            "name": "familiarity",
            "annotation": "float",
            "value": "0.0",
            "lineno": 27
          },
          {
            "name": "rivalry",
            "annotation": "float",
            "value": "0.0",
            "lineno": 28
          }
        ],
        "methods": []
      }
    ],
    "functions": [
      {
        "name": "apply_personality_modifiers",
        "lineno": 31,
        "signature": "(*, delta: RelationshipDelta, personality: Personality, event: RelationshipEvent, enabled: bool) -> RelationshipDelta",
        "docstring": "Adjust ``delta`` based on personality traits when enabled.\n\nWhen ``enabled`` is ``False`` the input delta is returned unchanged so tests\ncan assert parity with the pre-personality behaviour. This hook allows the\nrelationship system to opt-in once the feature flag is flipped."
      },
      {
        "name": "_apply_forgiveness",
        "lineno": 68,
        "signature": "(value: float, forgiveness: float) -> float",
        "docstring": null
      },
      {
        "name": "_apply_extroversion",
        "lineno": 79,
        "signature": "(value: float, extroversion: float) -> float",
        "docstring": null
      },
      {
        "name": "_apply_ambition",
        "lineno": 84,
        "signature": "(value: float, ambition: float) -> float",
        "docstring": null
      },
      {
        "name": "_clamp",
        "lineno": 94,
        "signature": "(value: float, low: float, high: float) -> float",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 102
  },
  {
    "path": "src/townlet/config/__init__.py",
    "module": "src.townlet.config.__init__",
    "docstring": "Config utilities for Townlet.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "loader.AffordanceConfig",
        "loader.AnnealStage",
        "loader.ArrangedMeetEventConfig",
        "loader.BCTrainingSettings",
        "loader.BlackoutEventConfig",
        "loader.ConflictConfig",
        "loader.ConsoleMode",
        "loader.CuriosityToggle",
        "loader.EmbeddingAllocatorConfig",
        "loader.EmploymentConfig",
        "loader.FloatRange",
        "loader.IntRange",
        "loader.LifecycleToggle",
        "loader.NarrationThrottleConfig",
        "loader.ObservationVariant",
        "loader.ObservationsConfig",
        "loader.OptionThrashCanaryConfig",
        "loader.OutageEventConfig",
        "loader.PPOConfig",
        "loader.PerturbationEventConfig",
        "loader.PerturbationKind",
        "loader.PerturbationSchedulerConfig",
        "loader.PriceSpikeEventConfig",
        "loader.PromotionGateConfig",
        "loader.QueueFairnessConfig",
        "loader.RewardVarianceCanaryConfig",
        "loader.RivalryConfig",
        "loader.SimulationConfig",
        "loader.SnapshotAutosaveConfig",
        "loader.SnapshotConfig",
        "loader.SnapshotGuardrailsConfig",
        "loader.SnapshotIdentityConfig",
        "loader.SnapshotMigrationsConfig",
        "loader.SnapshotStorageConfig",
        "loader.SocialRewardScheduleEntry",
        "loader.SocialRewardStage",
        "loader.StarvationCanaryConfig",
        "loader.TelemetryBufferConfig",
        "loader.TelemetryConfig",
        "loader.TelemetryRetryPolicy",
        "loader.TelemetryTransportConfig",
        "loader.TrainingConfig",
        "loader.TrainingSource",
        "loader.load_config"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 97
  },
  {
    "path": "src/townlet/config/affordance_manifest.py",
    "module": "src.townlet.config.affordance_manifest",
    "docstring": "Utilities for validating affordance manifest files.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Iterable",
        "collections.abc.Mapping",
        "dataclasses.dataclass",
        "hashlib",
        "logging",
        "pathlib.Path"
      ],
      "external": [
        "yaml"
      ],
      "internal": []
    },
    "classes": [
      {
        "name": "ManifestObject",
        "lineno": 17,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": "Represents an interactive object entry from the manifest.",
        "attrs": [
          {
            "name": "object_id",
            "annotation": "str",
            "value": null,
            "lineno": 20
          },
          {
            "name": "object_type",
            "annotation": "str",
            "value": null,
            "lineno": 21
          },
          {
            "name": "stock",
            "annotation": "dict[str, int]",
            "value": null,
            "lineno": 22
          },
          {
            "name": "position",
            "annotation": "tuple[int, int] | None",
            "value": "None",
            "lineno": 23
          }
        ],
        "methods": []
      },
      {
        "name": "ManifestAffordance",
        "lineno": 27,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": "Represents an affordance definition with preconditions and hooks.",
        "attrs": [
          {
            "name": "affordance_id",
            "annotation": "str",
            "value": null,
            "lineno": 30
          },
          {
            "name": "object_type",
            "annotation": "str",
            "value": null,
            "lineno": 31
          },
          {
            "name": "duration",
            "annotation": "int",
            "value": null,
            "lineno": 32
          },
          {
            "name": "effects",
            "annotation": "dict[str, float]",
            "value": null,
            "lineno": 33
          },
          {
            "name": "preconditions",
            "annotation": "list[str]",
            "value": null,
            "lineno": 34
          },
          {
            "name": "hooks",
            "annotation": "dict[str, list[str]]",
            "value": null,
            "lineno": 35
          }
        ],
        "methods": []
      },
      {
        "name": "AffordanceManifest",
        "lineno": 39,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": "Normalised manifest contents and checksum metadata.",
        "attrs": [
          {
            "name": "path",
            "annotation": "Path",
            "value": null,
            "lineno": 42
          },
          {
            "name": "checksum",
            "annotation": "str",
            "value": null,
            "lineno": 43
          },
          {
            "name": "objects",
            "annotation": "list[ManifestObject]",
            "value": null,
            "lineno": 44
          },
          {
            "name": "affordances",
            "annotation": "list[ManifestAffordance]",
            "value": null,
            "lineno": 45
          }
        ],
        "methods": [
          {
            "name": "object_count",
            "signature": "(self) -> int",
            "lineno": 48,
            "docstring": null
          },
          {
            "name": "affordance_count",
            "signature": "(self) -> int",
            "lineno": 52,
            "docstring": null
          }
        ]
      },
      {
        "name": "AffordanceManifestError",
        "lineno": 56,
        "bases": [
          "ValueError"
        ],
        "decorators": [],
        "docstring": "Raised when an affordance manifest fails validation.",
        "attrs": [],
        "methods": []
      }
    ],
    "functions": [
      {
        "name": "load_affordance_manifest",
        "lineno": 63,
        "signature": "(path: Path) -> AffordanceManifest",
        "docstring": "Load and validate an affordance manifest, returning structured entries.\n\nArgs:\n    path: Path to the YAML manifest file.\n\nRaises:\n    FileNotFoundError: If the manifest does not exist.\n    AffordanceManifestError: If schema validation or duplicate detection fails."
      },
      {
        "name": "_parse_object_entry",
        "lineno": 123,
        "signature": "(entry: Mapping[str, object], path: Path, index: int) -> ManifestObject",
        "docstring": null
      },
      {
        "name": "_parse_affordance_entry",
        "lineno": 161,
        "signature": "(entry: Mapping[str, object], path: Path, index: int) -> ManifestAffordance",
        "docstring": null
      },
      {
        "name": "_parse_position",
        "lineno": 240,
        "signature": "(value: object, *, path: Path, index: int, entry_id: str) -> tuple[int, int] | None",
        "docstring": null
      },
      {
        "name": "_parse_string_list",
        "lineno": 263,
        "signature": "(value: object, *, field: str, path: Path, index: int, entry_id: str) -> list[str]",
        "docstring": null
      },
      {
        "name": "_require_string",
        "lineno": 293,
        "signature": "(entry: Mapping[str, object], field: str, path: Path, index: int) -> str",
        "docstring": null
      },
      {
        "name": "_ensure_unique",
        "lineno": 311,
        "signature": "(entry_id: str, seen: set[str], path: Path, index: int) -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "_ALLOWED_HOOK_KEYS",
        "value": "{'before', 'after', 'fail'}",
        "lineno": 60
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 316
  },
  {
    "path": "src/townlet/config/loader.py",
    "module": "src.townlet.config.loader",
    "docstring": "Configuration loader and validation layer.\n\nThis module reflects the expectations in docs/REQUIREMENTS.md#1 and related\nsections. It centralises config parsing, feature flag handling, and sanity\nchecks such as observation variant validation and reward guardrails.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Mapping",
        "enum.Enum",
        "importlib",
        "pathlib.Path",
        "re",
        "typing.Annotated",
        "typing.Literal"
      ],
      "external": [
        "pydantic.BaseModel",
        "pydantic.ConfigDict",
        "pydantic.Field",
        "pydantic.ValidationError",
        "pydantic.model_validator",
        "yaml"
      ],
      "internal": [
        "townlet.snapshots.register_migration"
      ]
    },
    "classes": [
      {
        "name": "StageFlags",
        "lineno": 30,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "relationships",
            "annotation": "RelationshipStage",
            "value": "'OFF'",
            "lineno": 31
          },
          {
            "name": "social_rewards",
            "annotation": "SocialRewardStage",
            "value": "'OFF'",
            "lineno": 32
          }
        ],
        "methods": []
      },
      {
        "name": "SystemFlags",
        "lineno": 35,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "lifecycle",
            "annotation": "LifecycleToggle",
            "value": "'on'",
            "lineno": 36
          },
          {
            "name": "observations",
            "annotation": "ObservationVariant",
            "value": "'hybrid'",
            "lineno": 37
          }
        ],
        "methods": []
      },
      {
        "name": "TrainingFlags",
        "lineno": 40,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "curiosity",
            "annotation": "CuriosityToggle",
            "value": "'phase_A'",
            "lineno": 41
          }
        ],
        "methods": []
      },
      {
        "name": "PolicyRuntimeConfig",
        "lineno": 44,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "option_commit_ticks",
            "annotation": "int",
            "value": "Field(15, ge=0, le=100000)",
            "lineno": 45
          }
        ],
        "methods": []
      },
      {
        "name": "ConsoleFlags",
        "lineno": 48,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "mode",
            "annotation": "ConsoleMode",
            "value": "'viewer'",
            "lineno": 49
          }
        ],
        "methods": []
      },
      {
        "name": "FeatureFlags",
        "lineno": 52,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "stages",
            "annotation": "StageFlags",
            "value": null,
            "lineno": 53
          },
          {
            "name": "systems",
            "annotation": "SystemFlags",
            "value": null,
            "lineno": 54
          },
          {
            "name": "training",
            "annotation": "TrainingFlags",
            "value": null,
            "lineno": 55
          },
          {
            "name": "console",
            "annotation": "ConsoleFlags",
            "value": null,
            "lineno": 56
          },
          {
            "name": "relationship_modifiers",
            "annotation": "bool",
            "value": "False",
            "lineno": 57
          }
        ],
        "methods": []
      },
      {
        "name": "NeedsWeights",
        "lineno": 60,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "hunger",
            "annotation": "float",
            "value": "Field(1.0, ge=0.5, le=2.0)",
            "lineno": 61
          },
          {
            "name": "hygiene",
            "annotation": "float",
            "value": "Field(0.6, ge=0.2, le=1.0)",
            "lineno": 62
          },
          {
            "name": "energy",
            "annotation": "float",
            "value": "Field(0.8, ge=0.4, le=1.5)",
            "lineno": 63
          }
        ],
        "methods": []
      },
      {
        "name": "SocialRewardWeights",
        "lineno": 66,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "C1_chat_base",
            "annotation": "float",
            "value": "Field(0.01, ge=0.0, le=0.05)",
            "lineno": 67
          },
          {
            "name": "C1_coeff_trust",
            "annotation": "float",
            "value": "Field(0.3, ge=0.0, le=1.0)",
            "lineno": 68
          },
          {
            "name": "C1_coeff_fam",
            "annotation": "float",
            "value": "Field(0.2, ge=0.0, le=1.0)",
            "lineno": 69
          },
          {
            "name": "C2_avoid_conflict",
            "annotation": "float",
            "value": "Field(0.005, ge=0.0, le=0.02)",
            "lineno": 70
          }
        ],
        "methods": []
      },
      {
        "name": "RewardClips",
        "lineno": 73,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "clip_per_tick",
            "annotation": "float",
            "value": "Field(0.2, ge=0.01, le=1.0)",
            "lineno": 74
          },
          {
            "name": "clip_per_episode",
            "annotation": "float",
            "value": "Field(50, ge=1, le=200)",
            "lineno": 75
          },
          {
            "name": "no_positive_within_death_ticks",
            "annotation": "int",
            "value": "Field(10, ge=0, le=200)",
            "lineno": 76
          }
        ],
        "methods": []
      },
      {
        "name": "RewardsConfig",
        "lineno": 79,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "needs_weights",
            "annotation": "NeedsWeights",
            "value": null,
            "lineno": 80
          },
          {
            "name": "decay_rates",
            "annotation": "dict[str, float]",
            "value": "Field(default_factory=lambda: {'hunger': 0.01, 'hygiene': 0.005, 'energy': 0.008})",
            "lineno": 81
          },
          {
            "name": "punctuality_bonus",
            "annotation": "float",
            "value": "Field(0.05, ge=0.0, le=0.1)",
            "lineno": 88
          },
          {
            "name": "wage_rate",
            "annotation": "float",
            "value": "Field(0.01, ge=0.0, le=0.05)",
            "lineno": 89
          },
          {
            "name": "survival_tick",
            "annotation": "float",
            "value": "Field(0.002, ge=0.0, le=0.01)",
            "lineno": 90
          },
          {
            "name": "faint_penalty",
            "annotation": "float",
            "value": "Field(-1.0, ge=-5.0, le=0.0)",
            "lineno": 91
          },
          {
            "name": "eviction_penalty",
            "annotation": "float",
            "value": "Field(-2.0, ge=-5.0, le=0.0)",
            "lineno": 92
          },
          {
            "name": "social",
            "annotation": "SocialRewardWeights",
            "value": "SocialRewardWeights()",
            "lineno": 93
          },
          {
            "name": "clip",
            "annotation": "RewardClips",
            "value": "RewardClips()",
            "lineno": 94
          }
        ],
        "methods": [
          {
            "name": "_sanity_check_punctuality",
            "signature": "(self) -> 'RewardsConfig'",
            "lineno": 97,
            "docstring": null
          }
        ]
      },
      {
        "name": "ShapingConfig",
        "lineno": 105,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "use_potential",
            "annotation": "bool",
            "value": "True",
            "lineno": 106
          }
        ],
        "methods": []
      },
      {
        "name": "CuriosityConfig",
        "lineno": 109,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "phase_A_weight",
            "annotation": "float",
            "value": "Field(0.02, ge=0.0, le=0.1)",
            "lineno": 110
          },
          {
            "name": "decay_by_milestone",
            "annotation": "Literal['M2', 'never']",
            "value": "'M2'",
            "lineno": 111
          }
        ],
        "methods": []
      },
      {
        "name": "QueueFairnessConfig",
        "lineno": 114,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": "Queue fairness tuning parameters (see REQUIREMENTS#5).",
        "attrs": [
          {
            "name": "cooldown_ticks",
            "annotation": "int",
            "value": "Field(60, ge=0, le=600)",
            "lineno": 117
          },
          {
            "name": "ghost_step_after",
            "annotation": "int",
            "value": "Field(3, ge=0, le=100)",
            "lineno": 118
          },
          {
            "name": "age_priority_weight",
            "annotation": "float",
            "value": "Field(0.1, ge=0.0, le=1.0)",
            "lineno": 119
          }
        ],
        "methods": []
      },
      {
        "name": "RivalryConfig",
        "lineno": 122,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": "Conflict/rivalry tuning knobs (see REQUIREMENTS#5).",
        "attrs": [
          {
            "name": "increment_per_conflict",
            "annotation": "float",
            "value": "Field(0.15, ge=0.0, le=1.0)",
            "lineno": 125
          },
          {
            "name": "decay_per_tick",
            "annotation": "float",
            "value": "Field(0.005, ge=0.0, le=1.0)",
            "lineno": 126
          },
          {
            "name": "min_value",
            "annotation": "float",
            "value": "Field(0.0, ge=0.0, le=1.0)",
            "lineno": 127
          },
          {
            "name": "max_value",
            "annotation": "float",
            "value": "Field(1.0, ge=0.0, le=1.0)",
            "lineno": 128
          },
          {
            "name": "avoid_threshold",
            "annotation": "float",
            "value": "Field(0.7, ge=0.0, le=1.0)",
            "lineno": 129
          },
          {
            "name": "eviction_threshold",
            "annotation": "float",
            "value": "Field(0.05, ge=0.0, le=1.0)",
            "lineno": 130
          },
          {
            "name": "max_edges",
            "annotation": "int",
            "value": "Field(6, ge=1, le=32)",
            "lineno": 131
          },
          {
            "name": "ghost_step_boost",
            "annotation": "float",
            "value": "Field(1.5, ge=0.0, le=5.0)",
            "lineno": 132
          },
          {
            "name": "handover_boost",
            "annotation": "float",
            "value": "Field(0.4, ge=0.0, le=5.0)",
            "lineno": 133
          },
          {
            "name": "queue_length_boost",
            "annotation": "float",
            "value": "Field(0.25, ge=0.0, le=2.0)",
            "lineno": 134
          }
        ],
        "methods": [
          {
            "name": "_validate_ranges",
            "signature": "(self) -> 'RivalryConfig'",
            "lineno": 137,
            "docstring": null
          }
        ]
      },
      {
        "name": "ConflictConfig",
        "lineno": 147,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "rivalry",
            "annotation": "RivalryConfig",
            "value": "RivalryConfig()",
            "lineno": 148
          }
        ],
        "methods": []
      },
      {
        "name": "PPOConfig",
        "lineno": 151,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": "Config for PPO training hyperparameters.",
        "attrs": [
          {
            "name": "learning_rate",
            "annotation": "float",
            "value": "Field(0.0003, gt=0.0)",
            "lineno": 154
          },
          {
            "name": "clip_param",
            "annotation": "float",
            "value": "Field(0.2, ge=0.0, le=1.0)",
            "lineno": 155
          },
          {
            "name": "value_loss_coef",
            "annotation": "float",
            "value": "Field(0.5, ge=0.0)",
            "lineno": 156
          },
          {
            "name": "entropy_coef",
            "annotation": "float",
            "value": "Field(0.01, ge=0.0)",
            "lineno": 157
          },
          {
            "name": "num_epochs",
            "annotation": "int",
            "value": "Field(4, ge=1, le=64)",
            "lineno": 158
          },
          {
            "name": "mini_batch_size",
            "annotation": "int",
            "value": "Field(32, ge=1)",
            "lineno": 159
          },
          {
            "name": "gae_lambda",
            "annotation": "float",
            "value": "Field(0.95, ge=0.0, le=1.0)",
            "lineno": 160
          },
          {
            "name": "gamma",
            "annotation": "float",
            "value": "Field(0.99, ge=0.0, le=1.0)",
            "lineno": 161
          },
          {
            "name": "max_grad_norm",
            "annotation": "float",
            "value": "Field(0.5, ge=0.0)",
            "lineno": 162
          },
          {
            "name": "value_clip",
            "annotation": "float",
            "value": "Field(0.2, ge=0.0, le=1.0)",
            "lineno": 163
          },
          {
            "name": "advantage_normalization",
            "annotation": "bool",
            "value": "True",
            "lineno": 164
          },
          {
            "name": "num_mini_batches",
            "annotation": "int",
            "value": "Field(4, ge=1, le=1024)",
            "lineno": 165
          }
        ],
        "methods": []
      },
      {
        "name": "EmbeddingAllocatorConfig",
        "lineno": 168,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": "Embedding slot reuse guardrails (see REQUIREMENTS#3).",
        "attrs": [
          {
            "name": "cooldown_ticks",
            "annotation": "int",
            "value": "Field(2000, ge=0, le=10000)",
            "lineno": 171
          },
          {
            "name": "reuse_warning_threshold",
            "annotation": "float",
            "value": "Field(0.05, ge=0.0, le=0.5)",
            "lineno": 172
          },
          {
            "name": "log_forced_reuse",
            "annotation": "bool",
            "value": "True",
            "lineno": 173
          },
          {
            "name": "max_slots",
            "annotation": "int",
            "value": "Field(64, ge=1, le=256)",
            "lineno": 174
          }
        ],
        "methods": []
      },
      {
        "name": "HybridObservationConfig",
        "lineno": 177,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "local_window",
            "annotation": "int",
            "value": "Field(11, ge=3)",
            "lineno": 178
          },
          {
            "name": "include_targets",
            "annotation": "bool",
            "value": "False",
            "lineno": 179
          },
          {
            "name": "time_ticks_per_day",
            "annotation": "int",
            "value": "Field(1440, ge=1)",
            "lineno": 180
          }
        ],
        "methods": [
          {
            "name": "_validate_window",
            "signature": "(self) -> 'HybridObservationConfig'",
            "lineno": 183,
            "docstring": null
          }
        ]
      },
      {
        "name": "SocialSnippetConfig",
        "lineno": 189,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "top_friends",
            "annotation": "int",
            "value": "Field(2, ge=0, le=8)",
            "lineno": 190
          },
          {
            "name": "top_rivals",
            "annotation": "int",
            "value": "Field(2, ge=0, le=8)",
            "lineno": 191
          },
          {
            "name": "embed_dim",
            "annotation": "int",
            "value": "Field(8, ge=1, le=32)",
            "lineno": 192
          },
          {
            "name": "include_aggregates",
            "annotation": "bool",
            "value": "True",
            "lineno": 193
          }
        ],
        "methods": [
          {
            "name": "_validate_totals",
            "signature": "(self) -> 'SocialSnippetConfig'",
            "lineno": 196,
            "docstring": null
          }
        ]
      },
      {
        "name": "ObservationsConfig",
        "lineno": 204,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "hybrid",
            "annotation": "HybridObservationConfig",
            "value": "HybridObservationConfig()",
            "lineno": 205
          },
          {
            "name": "social_snippet",
            "annotation": "SocialSnippetConfig",
            "value": "SocialSnippetConfig()",
            "lineno": 206
          }
        ],
        "methods": []
      },
      {
        "name": "StarvationCanaryConfig",
        "lineno": 209,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "window_ticks",
            "annotation": "int",
            "value": "Field(1000, ge=1, le=100000)",
            "lineno": 210
          },
          {
            "name": "max_incidents",
            "annotation": "int",
            "value": "Field(0, ge=0, le=10000)",
            "lineno": 211
          },
          {
            "name": "hunger_threshold",
            "annotation": "float",
            "value": "Field(0.05, ge=0.0, le=1.0)",
            "lineno": 212
          },
          {
            "name": "min_duration_ticks",
            "annotation": "int",
            "value": "Field(30, ge=1, le=10000)",
            "lineno": 213
          }
        ],
        "methods": []
      },
      {
        "name": "RewardVarianceCanaryConfig",
        "lineno": 216,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "window_ticks",
            "annotation": "int",
            "value": "Field(1000, ge=1, le=100000)",
            "lineno": 217
          },
          {
            "name": "max_variance",
            "annotation": "float",
            "value": "Field(0.25, ge=0.0)",
            "lineno": 218
          },
          {
            "name": "min_samples",
            "annotation": "int",
            "value": "Field(20, ge=1, le=100000)",
            "lineno": 219
          }
        ],
        "methods": []
      },
      {
        "name": "OptionThrashCanaryConfig",
        "lineno": 222,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "window_ticks",
            "annotation": "int",
            "value": "Field(600, ge=1, le=100000)",
            "lineno": 223
          },
          {
            "name": "max_switch_rate",
            "annotation": "float",
            "value": "Field(0.25, ge=0.0, le=10.0)",
            "lineno": 224
          },
          {
            "name": "min_samples",
            "annotation": "int",
            "value": "Field(10, ge=1, le=100000)",
            "lineno": 225
          }
        ],
        "methods": []
      },
      {
        "name": "PromotionGateConfig",
        "lineno": 228,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "required_passes",
            "annotation": "int",
            "value": "Field(2, ge=1, le=10)",
            "lineno": 229
          },
          {
            "name": "window_ticks",
            "annotation": "int",
            "value": "Field(1000, ge=1, le=100000)",
            "lineno": 230
          },
          {
            "name": "allowed_alerts",
            "annotation": "tuple[str, ...]",
            "value": "()",
            "lineno": 231
          },
          {
            "name": "model_config",
            "value": "ConfigDict(extra='forbid')",
            "lineno": 233
          }
        ],
        "methods": [
          {
            "name": "_coerce_allowed",
            "signature": "(cls, value: object) -> object",
            "lineno": 236,
            "docstring": null
          },
          {
            "name": "_normalise",
            "signature": "(self) -> 'PromotionGateConfig'",
            "lineno": 246,
            "docstring": null
          }
        ]
      },
      {
        "name": "LifecycleConfig",
        "lineno": 251,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "respawn_delay_ticks",
            "annotation": "int",
            "value": "Field(0, ge=0, le=100000)",
            "lineno": 252
          }
        ],
        "methods": []
      },
      {
        "name": "StabilityConfig",
        "lineno": 255,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "affordance_fail_threshold",
            "annotation": "int",
            "value": "Field(5, ge=0, le=100)",
            "lineno": 256
          },
          {
            "name": "lateness_threshold",
            "annotation": "int",
            "value": "Field(3, ge=0, le=100)",
            "lineno": 257
          },
          {
            "name": "starvation",
            "annotation": "StarvationCanaryConfig",
            "value": "StarvationCanaryConfig()",
            "lineno": 258
          },
          {
            "name": "reward_variance",
            "annotation": "RewardVarianceCanaryConfig",
            "value": "RewardVarianceCanaryConfig()",
            "lineno": 259
          },
          {
            "name": "option_thrash",
            "annotation": "OptionThrashCanaryConfig",
            "value": "OptionThrashCanaryConfig()",
            "lineno": 260
          },
          {
            "name": "promotion",
            "annotation": "PromotionGateConfig",
            "value": "PromotionGateConfig()",
            "lineno": 261
          }
        ],
        "methods": [
          {
            "name": "as_dict",
            "signature": "(self) -> dict[str, object]",
            "lineno": 263,
            "docstring": null
          }
        ]
      },
      {
        "name": "IntRange",
        "lineno": 274,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "min",
            "annotation": "int",
            "value": "Field(ge=0)",
            "lineno": 275
          },
          {
            "name": "max",
            "annotation": "int",
            "value": "Field(ge=0)",
            "lineno": 276
          },
          {
            "name": "model_config",
            "value": "ConfigDict(extra='forbid')",
            "lineno": 278
          }
        ],
        "methods": [
          {
            "name": "_coerce",
            "signature": "(cls, value: object) -> dict[str, int]",
            "lineno": 281,
            "docstring": null
          },
          {
            "name": "_validate_bounds",
            "signature": "(self) -> 'IntRange'",
            "lineno": 297,
            "docstring": null
          }
        ]
      },
      {
        "name": "FloatRange",
        "lineno": 303,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "min",
            "annotation": "float",
            "value": null,
            "lineno": 304
          },
          {
            "name": "max",
            "annotation": "float",
            "value": null,
            "lineno": 305
          },
          {
            "name": "model_config",
            "value": "ConfigDict(extra='forbid')",
            "lineno": 307
          }
        ],
        "methods": [
          {
            "name": "_coerce",
            "signature": "(cls, value: object) -> dict[str, float]",
            "lineno": 310,
            "docstring": null
          },
          {
            "name": "_validate_bounds",
            "signature": "(self) -> 'FloatRange'",
            "lineno": 326,
            "docstring": null
          }
        ]
      },
      {
        "name": "PerturbationKind",
        "lineno": 332,
        "bases": [
          "str",
          "Enum"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "PRICE_SPIKE",
            "value": "'price_spike'",
            "lineno": 333
          },
          {
            "name": "BLACKOUT",
            "value": "'blackout'",
            "lineno": 334
          },
          {
            "name": "OUTAGE",
            "value": "'outage'",
            "lineno": 335
          },
          {
            "name": "ARRANGED_MEET",
            "value": "'arranged_meet'",
            "lineno": 336
          }
        ],
        "methods": []
      },
      {
        "name": "BasePerturbationEventConfig",
        "lineno": 339,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "kind",
            "annotation": "PerturbationKind",
            "value": null,
            "lineno": 340
          },
          {
            "name": "probability_per_day",
            "annotation": "float",
            "value": "Field(0.0, ge=0.0, alias='prob_per_day')",
            "lineno": 341
          },
          {
            "name": "cooldown_ticks",
            "annotation": "int",
            "value": "Field(0, ge=0)",
            "lineno": 342
          },
          {
            "name": "duration",
            "annotation": "IntRange",
            "value": "Field(default_factory=lambda: IntRange(min=0, max=0))",
            "lineno": 343
          },
          {
            "name": "model_config",
            "value": "ConfigDict(extra='forbid', populate_by_name=True)",
            "lineno": 345
          }
        ],
        "methods": [
          {
            "name": "_normalise_duration",
            "signature": "(cls, values: dict[str, object]) -> dict[str, object]",
            "lineno": 348,
            "docstring": null
          }
        ]
      },
      {
        "name": "PriceSpikeEventConfig",
        "lineno": 354,
        "bases": [
          "BasePerturbationEventConfig"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "kind",
            "annotation": "Literal[PerturbationKind.PRICE_SPIKE]",
            "value": "PerturbationKind.PRICE_SPIKE",
            "lineno": 355
          },
          {
            "name": "magnitude",
            "annotation": "FloatRange",
            "value": "Field(default_factory=lambda: FloatRange(min=1.0, max=1.0))",
            "lineno": 356
          },
          {
            "name": "targets",
            "annotation": "list[str]",
            "value": "Field(default_factory=list)",
            "lineno": 357
          }
        ],
        "methods": [
          {
            "name": "_normalise_magnitude",
            "signature": "(cls, values: dict[str, object]) -> dict[str, object]",
            "lineno": 360,
            "docstring": null
          }
        ]
      },
      {
        "name": "BlackoutEventConfig",
        "lineno": 366,
        "bases": [
          "BasePerturbationEventConfig"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "kind",
            "annotation": "Literal[PerturbationKind.BLACKOUT]",
            "value": "PerturbationKind.BLACKOUT",
            "lineno": 367
          },
          {
            "name": "utility",
            "annotation": "Literal['power']",
            "value": "'power'",
            "lineno": 368
          }
        ],
        "methods": []
      },
      {
        "name": "OutageEventConfig",
        "lineno": 371,
        "bases": [
          "BasePerturbationEventConfig"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "kind",
            "annotation": "Literal[PerturbationKind.OUTAGE]",
            "value": "PerturbationKind.OUTAGE",
            "lineno": 372
          },
          {
            "name": "utility",
            "annotation": "Literal['water']",
            "value": "'water'",
            "lineno": 373
          }
        ],
        "methods": []
      },
      {
        "name": "ArrangedMeetEventConfig",
        "lineno": 376,
        "bases": [
          "BasePerturbationEventConfig"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "kind",
            "annotation": "Literal[PerturbationKind.ARRANGED_MEET]",
            "value": "PerturbationKind.ARRANGED_MEET",
            "lineno": 377
          },
          {
            "name": "target",
            "annotation": "str",
            "value": "Field(default='top_rivals')",
            "lineno": 378
          },
          {
            "name": "location",
            "annotation": "str",
            "value": "Field(default='cafe')",
            "lineno": 379
          },
          {
            "name": "max_participants",
            "annotation": "int",
            "value": "Field(2, ge=2)",
            "lineno": 380
          }
        ],
        "methods": []
      },
      {
        "name": "PerturbationSchedulerConfig",
        "lineno": 389,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "max_concurrent_events",
            "annotation": "int",
            "value": "Field(1, ge=1)",
            "lineno": 390
          },
          {
            "name": "global_cooldown_ticks",
            "annotation": "int",
            "value": "Field(0, ge=0)",
            "lineno": 391
          },
          {
            "name": "per_agent_cooldown_ticks",
            "annotation": "int",
            "value": "Field(0, ge=0)",
            "lineno": 392
          },
          {
            "name": "grace_window_ticks",
            "annotation": "int",
            "value": "Field(60, ge=0)",
            "lineno": 393
          },
          {
            "name": "window_ticks",
            "annotation": "int",
            "value": "Field(1440, ge=1)",
            "lineno": 394
          },
          {
            "name": "max_events_per_window",
            "annotation": "int",
            "value": "Field(1, ge=0)",
            "lineno": 395
          },
          {
            "name": "events",
            "annotation": "dict[str, PerturbationEventConfig]",
            "value": "Field(default_factory=dict)",
            "lineno": 396
          },
          {
            "name": "model_config",
            "value": "ConfigDict(extra='allow', populate_by_name=True)",
            "lineno": 398
          }
        ],
        "methods": [
          {
            "name": "event_list",
            "signature": "(self) -> list[PerturbationEventConfig]",
            "lineno": 401,
            "docstring": null
          }
        ]
      },
      {
        "name": "AffordanceConfig",
        "lineno": 405,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "affordances_file",
            "annotation": "str",
            "value": "Field('configs/affordances/core.yaml')",
            "lineno": 406
          }
        ],
        "methods": []
      },
      {
        "name": "EmploymentConfig",
        "lineno": 409,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "grace_ticks",
            "annotation": "int",
            "value": "Field(5, ge=0, le=120)",
            "lineno": 410
          },
          {
            "name": "absent_cutoff",
            "annotation": "int",
            "value": "Field(30, ge=0, le=600)",
            "lineno": 411
          },
          {
            "name": "absence_slack",
            "annotation": "int",
            "value": "Field(20, ge=0, le=600)",
            "lineno": 412
          },
          {
            "name": "late_tick_penalty",
            "annotation": "float",
            "value": "Field(0.005, ge=0.0, le=1.0)",
            "lineno": 413
          },
          {
            "name": "absence_penalty",
            "annotation": "float",
            "value": "Field(0.2, ge=0.0, le=5.0)",
            "lineno": 414
          },
          {
            "name": "max_absent_shifts",
            "annotation": "int",
            "value": "Field(3, ge=0, le=20)",
            "lineno": 415
          },
          {
            "name": "attendance_window",
            "annotation": "int",
            "value": "Field(3, ge=1, le=14)",
            "lineno": 416
          },
          {
            "name": "daily_exit_cap",
            "annotation": "int",
            "value": "Field(2, ge=0, le=50)",
            "lineno": 417
          },
          {
            "name": "exit_queue_limit",
            "annotation": "int",
            "value": "Field(8, ge=0, le=100)",
            "lineno": 418
          },
          {
            "name": "exit_review_window",
            "annotation": "int",
            "value": "Field(1440, ge=1, le=100000)",
            "lineno": 419
          },
          {
            "name": "enforce_job_loop",
            "annotation": "bool",
            "value": "False",
            "lineno": 420
          }
        ],
        "methods": []
      },
      {
        "name": "BehaviorConfig",
        "lineno": 423,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "hunger_threshold",
            "annotation": "float",
            "value": "Field(0.4, ge=0.0, le=1.0)",
            "lineno": 424
          },
          {
            "name": "hygiene_threshold",
            "annotation": "float",
            "value": "Field(0.4, ge=0.0, le=1.0)",
            "lineno": 425
          },
          {
            "name": "energy_threshold",
            "annotation": "float",
            "value": "Field(0.4, ge=0.0, le=1.0)",
            "lineno": 426
          },
          {
            "name": "job_arrival_buffer",
            "annotation": "int",
            "value": "Field(20, ge=0)",
            "lineno": 427
          }
        ],
        "methods": []
      },
      {
        "name": "SocialRewardScheduleEntry",
        "lineno": 430,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "cycle",
            "annotation": "int",
            "value": "Field(0, ge=0)",
            "lineno": 431
          },
          {
            "name": "stage",
            "annotation": "SocialRewardStage",
            "value": null,
            "lineno": 432
          }
        ],
        "methods": []
      },
      {
        "name": "BCTrainingSettings",
        "lineno": 435,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "manifest",
            "annotation": "Path | None",
            "value": "None",
            "lineno": 436
          },
          {
            "name": "learning_rate",
            "annotation": "float",
            "value": "Field(0.001, gt=0.0)",
            "lineno": 437
          },
          {
            "name": "batch_size",
            "annotation": "int",
            "value": "Field(64, ge=1)",
            "lineno": 438
          },
          {
            "name": "epochs",
            "annotation": "int",
            "value": "Field(10, ge=1)",
            "lineno": 439
          },
          {
            "name": "weight_decay",
            "annotation": "float",
            "value": "Field(0.0, ge=0.0)",
            "lineno": 440
          },
          {
            "name": "device",
            "annotation": "str",
            "value": "'cpu'",
            "lineno": 441
          }
        ],
        "methods": []
      },
      {
        "name": "AnnealStage",
        "lineno": 444,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "cycle",
            "annotation": "int",
            "value": "Field(0, ge=0)",
            "lineno": 445
          },
          {
            "name": "mode",
            "annotation": "Literal['bc', 'ppo']",
            "value": "'ppo'",
            "lineno": 446
          },
          {
            "name": "epochs",
            "annotation": "int",
            "value": "Field(1, ge=1)",
            "lineno": 447
          },
          {
            "name": "bc_weight",
            "annotation": "float",
            "value": "Field(1.0, ge=0.0, le=1.0)",
            "lineno": 448
          }
        ],
        "methods": []
      },
      {
        "name": "NarrationThrottleConfig",
        "lineno": 451,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "global_cooldown_ticks",
            "annotation": "int",
            "value": "Field(30, ge=0, le=10000)",
            "lineno": 452
          },
          {
            "name": "category_cooldown_ticks",
            "annotation": "dict[str, int]",
            "value": "Field(default_factory=dict)",
            "lineno": 453
          },
          {
            "name": "dedupe_window_ticks",
            "annotation": "int",
            "value": "Field(20, ge=0, le=10000)",
            "lineno": 454
          },
          {
            "name": "global_window_ticks",
            "annotation": "int",
            "value": "Field(600, ge=1, le=10000)",
            "lineno": 455
          },
          {
            "name": "global_window_limit",
            "annotation": "int",
            "value": "Field(10, ge=1, le=1000)",
            "lineno": 456
          },
          {
            "name": "priority_categories",
            "annotation": "list[str]",
            "value": "Field(default_factory=list)",
            "lineno": 457
          }
        ],
        "methods": [
          {
            "name": "get_category_cooldown",
            "signature": "(self, category: str) -> int",
            "lineno": 459,
            "docstring": null
          }
        ]
      },
      {
        "name": "TelemetryRetryPolicy",
        "lineno": 463,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "max_attempts",
            "annotation": "int",
            "value": "Field(default=3, ge=0, le=10)",
            "lineno": 464
          },
          {
            "name": "backoff_seconds",
            "annotation": "float",
            "value": "Field(default=0.5, ge=0.0, le=30.0)",
            "lineno": 465
          }
        ],
        "methods": []
      },
      {
        "name": "TelemetryBufferConfig",
        "lineno": 468,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "max_batch_size",
            "annotation": "int",
            "value": "Field(default=32, ge=1, le=500)",
            "lineno": 469
          },
          {
            "name": "max_buffer_bytes",
            "annotation": "int",
            "value": "Field(default=256000, ge=1024, le=16777216)",
            "lineno": 470
          },
          {
            "name": "flush_interval_ticks",
            "annotation": "int",
            "value": "Field(default=1, ge=1, le=10000)",
            "lineno": 471
          }
        ],
        "methods": []
      },
      {
        "name": "TelemetryTransportConfig",
        "lineno": 474,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "type",
            "annotation": "TelemetryTransportType",
            "value": "'stdout'",
            "lineno": 475
          },
          {
            "name": "endpoint",
            "annotation": "str | None",
            "value": "None",
            "lineno": 476
          },
          {
            "name": "file_path",
            "annotation": "Path | None",
            "value": "None",
            "lineno": 477
          },
          {
            "name": "connect_timeout_seconds",
            "annotation": "float",
            "value": "Field(default=5.0, ge=0.0, le=60.0)",
            "lineno": 478
          },
          {
            "name": "send_timeout_seconds",
            "annotation": "float",
            "value": "Field(default=1.0, ge=0.0, le=60.0)",
            "lineno": 479
          },
          {
            "name": "retry",
            "annotation": "TelemetryRetryPolicy",
            "value": "TelemetryRetryPolicy()",
            "lineno": 480
          },
          {
            "name": "buffer",
            "annotation": "TelemetryBufferConfig",
            "value": "TelemetryBufferConfig()",
            "lineno": 481
          },
          {
            "name": "worker_poll_seconds",
            "annotation": "float",
            "value": "Field(default=0.5, ge=0.01, le=10.0)",
            "lineno": 482
          }
        ],
        "methods": [
          {
            "name": "_validate_transport",
            "signature": "(self) -> 'TelemetryTransportConfig'",
            "lineno": 485,
            "docstring": null
          }
        ]
      },
      {
        "name": "TelemetryConfig",
        "lineno": 513,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "narration",
            "annotation": "NarrationThrottleConfig",
            "value": "NarrationThrottleConfig()",
            "lineno": 514
          },
          {
            "name": "transport",
            "annotation": "TelemetryTransportConfig",
            "value": "TelemetryTransportConfig()",
            "lineno": 515
          }
        ],
        "methods": []
      },
      {
        "name": "SnapshotStorageConfig",
        "lineno": 518,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "root",
            "annotation": "Path",
            "value": "Field(default=Path('snapshots'))",
            "lineno": 519
          }
        ],
        "methods": [
          {
            "name": "_validate_root",
            "signature": "(self) -> 'SnapshotStorageConfig'",
            "lineno": 522,
            "docstring": null
          }
        ]
      },
      {
        "name": "SnapshotAutosaveConfig",
        "lineno": 528,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "cadence_ticks",
            "annotation": "int | None",
            "value": "Field(default=None, ge=1)",
            "lineno": 529
          },
          {
            "name": "retain",
            "annotation": "int",
            "value": "Field(default=3, ge=1, le=1000)",
            "lineno": 530
          }
        ],
        "methods": [
          {
            "name": "_validate_cadence",
            "signature": "(self) -> 'SnapshotAutosaveConfig'",
            "lineno": 533,
            "docstring": null
          }
        ]
      },
      {
        "name": "SnapshotIdentityConfig",
        "lineno": 541,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "policy_hash",
            "annotation": "str | None",
            "value": "None",
            "lineno": 542
          },
          {
            "name": "policy_artifact",
            "annotation": "Path | None",
            "value": "None",
            "lineno": 543
          },
          {
            "name": "observation_variant",
            "annotation": "ObservationVariant | Literal['infer']",
            "value": "'infer'",
            "lineno": 544
          },
          {
            "name": "anneal_ratio",
            "annotation": "float | None",
            "value": "Field(default=None, ge=0.0, le=1.0)",
            "lineno": 545
          },
          {
            "name": "_HEX40",
            "value": "re.compile('^[0-9a-fA-F]{40}$')",
            "lineno": 547
          },
          {
            "name": "_HEX64",
            "value": "re.compile('^[0-9a-fA-F]{64}$')",
            "lineno": 548
          },
          {
            "name": "_BASE64",
            "value": "re.compile('^[A-Za-z0-9+/=]{32,88}$')",
            "lineno": 549
          }
        ],
        "methods": [
          {
            "name": "_validate_policy_hash",
            "signature": "(self) -> 'SnapshotIdentityConfig'",
            "lineno": 552,
            "docstring": null
          },
          {
            "name": "_validate_variant",
            "signature": "(self) -> 'SnapshotIdentityConfig'",
            "lineno": 570,
            "docstring": null
          }
        ]
      },
      {
        "name": "SnapshotMigrationsConfig",
        "lineno": 582,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "handlers",
            "annotation": "dict[str, str]",
            "value": "Field(default_factory=dict)",
            "lineno": 583
          },
          {
            "name": "auto_apply",
            "annotation": "bool",
            "value": "False",
            "lineno": 584
          },
          {
            "name": "allow_minor",
            "annotation": "bool",
            "value": "False",
            "lineno": 585
          }
        ],
        "methods": [
          {
            "name": "_validate_handlers",
            "signature": "(self) -> 'SnapshotMigrationsConfig'",
            "lineno": 588,
            "docstring": null
          }
        ]
      },
      {
        "name": "SnapshotGuardrailsConfig",
        "lineno": 597,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "require_exact_config",
            "annotation": "bool",
            "value": "True",
            "lineno": 598
          },
          {
            "name": "allow_downgrade",
            "annotation": "bool",
            "value": "False",
            "lineno": 599
          },
          {
            "name": "allowed_paths",
            "annotation": "list[Path]",
            "value": "Field(default_factory=list)",
            "lineno": 600
          }
        ],
        "methods": []
      },
      {
        "name": "SnapshotConfig",
        "lineno": 603,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "storage",
            "annotation": "SnapshotStorageConfig",
            "value": "SnapshotStorageConfig()",
            "lineno": 604
          },
          {
            "name": "autosave",
            "annotation": "SnapshotAutosaveConfig",
            "value": "SnapshotAutosaveConfig()",
            "lineno": 605
          },
          {
            "name": "identity",
            "annotation": "SnapshotIdentityConfig",
            "value": "SnapshotIdentityConfig()",
            "lineno": 606
          },
          {
            "name": "migrations",
            "annotation": "SnapshotMigrationsConfig",
            "value": "SnapshotMigrationsConfig()",
            "lineno": 607
          },
          {
            "name": "guardrails",
            "annotation": "SnapshotGuardrailsConfig",
            "value": "SnapshotGuardrailsConfig()",
            "lineno": 608
          }
        ],
        "methods": [
          {
            "name": "_validate_observation_override",
            "signature": "(self) -> 'SnapshotConfig'",
            "lineno": 611,
            "docstring": null
          }
        ]
      },
      {
        "name": "TrainingConfig",
        "lineno": 623,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "source",
            "annotation": "TrainingSource",
            "value": "'replay'",
            "lineno": 624
          },
          {
            "name": "rollout_ticks",
            "annotation": "int",
            "value": "Field(100, ge=0)",
            "lineno": 625
          },
          {
            "name": "rollout_auto_seed_agents",
            "annotation": "bool",
            "value": "False",
            "lineno": 626
          },
          {
            "name": "replay_manifest",
            "annotation": "Path | None",
            "value": "None",
            "lineno": 627
          },
          {
            "name": "social_reward_stage_override",
            "annotation": "SocialRewardStage | None",
            "value": "None",
            "lineno": 628
          },
          {
            "name": "social_reward_schedule",
            "annotation": "list['SocialRewardScheduleEntry']",
            "value": "Field(default_factory=list)",
            "lineno": 629
          },
          {
            "name": "bc",
            "annotation": "BCTrainingSettings",
            "value": "BCTrainingSettings()",
            "lineno": 630
          },
          {
            "name": "anneal_schedule",
            "annotation": "list[AnnealStage]",
            "value": "Field(default_factory=list)",
            "lineno": 631
          },
          {
            "name": "anneal_accuracy_threshold",
            "annotation": "float",
            "value": "Field(0.9, ge=0.0, le=1.0)",
            "lineno": 632
          },
          {
            "name": "anneal_enable_policy_blend",
            "annotation": "bool",
            "value": "False",
            "lineno": 633
          }
        ],
        "methods": []
      },
      {
        "name": "JobSpec",
        "lineno": 636,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "start_tick",
            "annotation": "int",
            "value": "0",
            "lineno": 637
          },
          {
            "name": "end_tick",
            "annotation": "int",
            "value": "0",
            "lineno": 638
          },
          {
            "name": "wage_rate",
            "annotation": "float",
            "value": "0.0",
            "lineno": 639
          },
          {
            "name": "lateness_penalty",
            "annotation": "float",
            "value": "0.0",
            "lineno": 640
          },
          {
            "name": "location",
            "annotation": "tuple[int, int] | None",
            "value": "None",
            "lineno": 641
          }
        ],
        "methods": []
      },
      {
        "name": "SimulationConfig",
        "lineno": 644,
        "bases": [
          "BaseModel"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [
          {
            "name": "config_id",
            "annotation": "str",
            "value": null,
            "lineno": 645
          },
          {
            "name": "features",
            "annotation": "FeatureFlags",
            "value": null,
            "lineno": 646
          },
          {
            "name": "rewards",
            "annotation": "RewardsConfig",
            "value": null,
            "lineno": 647
          },
          {
            "name": "economy",
            "annotation": "dict[str, float]",
            "value": "Field(default_factory=lambda: {'meal_cost': 0.4, 'cook_energy_cost': 0.05, 'cook_hygiene_cost': 0.02, 'wage_income': 0.02, 'ingredients_cost': 0.15, 'stove_stock_replenish': 2})",
            "lineno": 648
          },
          {
            "name": "jobs",
            "annotation": "dict[str, JobSpec]",
            "value": "Field(default_factory=lambda: {'grocer': JobSpec(start_tick=180, end_tick=360, wage_rate=0.02, lateness_penalty=0.1, location=(0, 0)), 'barista': JobSpec(start_tick=400, end_tick=560, wage_rate=0.025, lateness_penalty=0.12, location=(1, 0))})",
            "lineno": 658
          },
          {
            "name": "shaping",
            "annotation": "ShapingConfig | None",
            "value": "None",
            "lineno": 676
          },
          {
            "name": "curiosity",
            "annotation": "CuriosityConfig | None",
            "value": "None",
            "lineno": 677
          },
          {
            "name": "queue_fairness",
            "annotation": "QueueFairnessConfig",
            "value": "QueueFairnessConfig()",
            "lineno": 678
          },
          {
            "name": "conflict",
            "annotation": "ConflictConfig",
            "value": "ConflictConfig()",
            "lineno": 679
          },
          {
            "name": "ppo",
            "annotation": "PPOConfig | None",
            "value": "None",
            "lineno": 680
          },
          {
            "name": "training",
            "annotation": "TrainingConfig",
            "value": "TrainingConfig()",
            "lineno": 681
          },
          {
            "name": "embedding_allocator",
            "annotation": "EmbeddingAllocatorConfig",
            "value": "EmbeddingAllocatorConfig()",
            "lineno": 682
          },
          {
            "name": "observations_config",
            "annotation": "ObservationsConfig",
            "value": "ObservationsConfig()",
            "lineno": 683
          },
          {
            "name": "affordances",
            "annotation": "AffordanceConfig",
            "value": "AffordanceConfig()",
            "lineno": 684
          },
          {
            "name": "stability",
            "annotation": "StabilityConfig",
            "value": "StabilityConfig()",
            "lineno": 685
          },
          {
            "name": "behavior",
            "annotation": "BehaviorConfig",
            "value": "BehaviorConfig()",
            "lineno": 686
          },
          {
            "name": "policy_runtime",
            "annotation": "PolicyRuntimeConfig",
            "value": "PolicyRuntimeConfig()",
            "lineno": 687
          },
          {
            "name": "employment",
            "annotation": "EmploymentConfig",
            "value": "EmploymentConfig()",
            "lineno": 688
          },
          {
            "name": "telemetry",
            "annotation": "TelemetryConfig",
            "value": "TelemetryConfig()",
            "lineno": 689
          },
          {
            "name": "snapshot",
            "annotation": "SnapshotConfig",
            "value": "SnapshotConfig()",
            "lineno": 690
          },
          {
            "name": "perturbations",
            "annotation": "PerturbationSchedulerConfig",
            "value": "PerturbationSchedulerConfig()",
            "lineno": 691
          },
          {
            "name": "lifecycle",
            "annotation": "LifecycleConfig",
            "value": "LifecycleConfig()",
            "lineno": 692
          },
          {
            "name": "model_config",
            "value": "ConfigDict(extra='allow')",
            "lineno": 694
          }
        ],
        "methods": [
          {
            "name": "_validate_observation_variant",
            "signature": "(self) -> 'SimulationConfig'",
            "lineno": 697,
            "docstring": null
          },
          {
            "name": "observation_variant",
            "signature": "(self) -> ObservationVariant",
            "lineno": 708,
            "docstring": null
          },
          {
            "name": "require_observation_variant",
            "signature": "(self, expected: ObservationVariant) -> None",
            "lineno": 711,
            "docstring": null
          },
          {
            "name": "snapshot_root",
            "signature": "(self) -> Path",
            "lineno": 721,
            "docstring": null
          },
          {
            "name": "snapshot_allowed_roots",
            "signature": "(self) -> tuple[Path, ...]",
            "lineno": 725,
            "docstring": null
          },
          {
            "name": "build_snapshot_identity",
            "signature": "(self, *, policy_hash: str | None, runtime_observation_variant: ObservationVariant | None, runtime_anneal_ratio: float | None) -> dict[str, object]",
            "lineno": 737,
            "docstring": null
          },
          {
            "name": "register_snapshot_migrations",
            "signature": "(self) -> None",
            "lineno": 770,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "load_config",
        "lineno": 797,
        "signature": "(path: Path) -> SimulationConfig",
        "docstring": "Load and validate a Townlet YAML configuration file."
      }
    ],
    "constants": [
      {
        "name": "PRICE_SPIKE",
        "value": "'price_spike'",
        "lineno": 333
      },
      {
        "name": "BLACKOUT",
        "value": "'blackout'",
        "lineno": 334
      },
      {
        "name": "OUTAGE",
        "value": "'outage'",
        "lineno": 335
      },
      {
        "name": "ARRANGED_MEET",
        "value": "'arranged_meet'",
        "lineno": 336
      },
      {
        "name": "_HEX40",
        "value": "re.compile('^[0-9a-fA-F]{40}$')",
        "lineno": 547
      },
      {
        "name": "_HEX64",
        "value": "re.compile('^[0-9a-fA-F]{64}$')",
        "lineno": 548
      },
      {
        "name": "_BASE64",
        "value": "re.compile('^[A-Za-z0-9+/=]{32,88}$')",
        "lineno": 549
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 807
  },
  {
    "path": "src/townlet/console/__init__.py",
    "module": "src.townlet.console.__init__",
    "docstring": "Console command handling exports.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "importlib.import_module",
        "typing.Any"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "__getattr__",
        "lineno": 11,
        "signature": "(name: str) -> Any",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 15
  },
  {
    "path": "src/townlet/console/command.py",
    "module": "src.townlet.console.command",
    "docstring": "Console command envelope and result helpers.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Any",
        "typing.Callable",
        "typing.Mapping"
      ],
      "external": [],
      "internal": []
    },
    "classes": [
      {
        "name": "ConsoleCommandError",
        "lineno": 10,
        "bases": [
          "RuntimeError"
        ],
        "decorators": [],
        "docstring": "Raised by handlers when a command should return an error response.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, code: str, message: str, *, details: Mapping[str, Any] | None = None) -> None",
            "lineno": 13,
            "docstring": null
          }
        ]
      },
      {
        "name": "ConsoleCommandEnvelope",
        "lineno": 21,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": "Normalised representation of an incoming console command payload.",
        "attrs": [
          {
            "name": "name",
            "annotation": "str",
            "value": null,
            "lineno": 24
          },
          {
            "name": "args",
            "annotation": "list[Any]",
            "value": "field(default_factory=list)",
            "lineno": 25
          },
          {
            "name": "kwargs",
            "annotation": "dict[str, Any]",
            "value": "field(default_factory=dict)",
            "lineno": 26
          },
          {
            "name": "cmd_id",
            "annotation": "str | None",
            "value": "None",
            "lineno": 27
          },
          {
            "name": "issuer",
            "annotation": "str | None",
            "value": "None",
            "lineno": 28
          },
          {
            "name": "mode",
            "annotation": "str",
            "value": "'viewer'",
            "lineno": 29
          },
          {
            "name": "timestamp_ms",
            "annotation": "int | None",
            "value": "None",
            "lineno": 30
          },
          {
            "name": "metadata",
            "annotation": "dict[str, Any]",
            "value": "field(default_factory=dict)",
            "lineno": 31
          },
          {
            "name": "raw",
            "annotation": "Mapping[str, Any] | None",
            "value": "None",
            "lineno": 32
          }
        ],
        "methods": [
          {
            "name": "from_payload",
            "signature": "(cls, payload: object) -> 'ConsoleCommandEnvelope'",
            "lineno": 35,
            "docstring": "Parse a payload emitted by the console transport."
          }
        ]
      },
      {
        "name": "ConsoleCommandResult",
        "lineno": 117,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Standard response emitted after processing a console command.",
        "attrs": [
          {
            "name": "name",
            "annotation": "str",
            "value": null,
            "lineno": 120
          },
          {
            "name": "status",
            "annotation": "str",
            "value": null,
            "lineno": 121
          },
          {
            "name": "result",
            "annotation": "dict[str, Any] | None",
            "value": "None",
            "lineno": 122
          },
          {
            "name": "error",
            "annotation": "dict[str, Any] | None",
            "value": "None",
            "lineno": 123
          },
          {
            "name": "cmd_id",
            "annotation": "str | None",
            "value": "None",
            "lineno": 124
          },
          {
            "name": "issuer",
            "annotation": "str | None",
            "value": "None",
            "lineno": 125
          },
          {
            "name": "tick",
            "annotation": "int | None",
            "value": "None",
            "lineno": 126
          },
          {
            "name": "latency_ms",
            "annotation": "int | None",
            "value": "None",
            "lineno": 127
          }
        ],
        "methods": [
          {
            "name": "ok",
            "signature": "(cls, envelope: ConsoleCommandEnvelope, payload: Mapping[str, Any] | None = None, *, tick: int | None = None, latency_ms: int | None = None) -> 'ConsoleCommandResult'",
            "lineno": 130,
            "docstring": null
          },
          {
            "name": "from_error",
            "signature": "(cls, envelope: ConsoleCommandEnvelope, code: str, message: str, *, details: Mapping[str, Any] | None = None, tick: int | None = None, latency_ms: int | None = None) -> 'ConsoleCommandResult'",
            "lineno": 150,
            "docstring": null
          },
          {
            "name": "clone",
            "signature": "(self) -> 'ConsoleCommandResult'",
            "lineno": 173,
            "docstring": null
          },
          {
            "name": "to_dict",
            "signature": "(self) -> dict[str, Any]",
            "lineno": 185,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [
      {
        "name": "_VALID_MODES",
        "value": "{'viewer', 'admin'}",
        "lineno": 7
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 201
  },
  {
    "path": "src/townlet/console/handlers.py",
    "module": "src.townlet.console.handlers",
    "docstring": "Console validation scaffolding.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "dataclasses.dataclass",
        "json",
        "pathlib.Path",
        "typing.Mapping",
        "typing.Protocol",
        "typing.TYPE_CHECKING"
      ],
      "external": [],
      "internal": [
        "townlet.config.SimulationConfig",
        "townlet.lifecycle.manager.LifecycleManager",
        "townlet.policy.runner.PolicyRuntime",
        "townlet.scheduler.perturbations.PerturbationScheduler",
        "townlet.snapshots.SnapshotManager",
        "townlet.stability.promotion.PromotionManager",
        "townlet.telemetry.publisher.TelemetryPublisher",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [
      {
        "name": "ConsoleCommand",
        "lineno": 26,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Represents a parsed console command ready for execution.",
        "attrs": [
          {
            "name": "name",
            "annotation": "str",
            "value": null,
            "lineno": 29
          },
          {
            "name": "args",
            "annotation": "tuple[object, ...]",
            "value": null,
            "lineno": 30
          },
          {
            "name": "kwargs",
            "annotation": "dict[str, object]",
            "value": null,
            "lineno": 31
          }
        ],
        "methods": []
      },
      {
        "name": "ConsoleHandler",
        "lineno": 34,
        "bases": [
          "Protocol"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [],
        "methods": [
          {
            "name": "__call__",
            "signature": "(self, command: ConsoleCommand) -> object",
            "lineno": 35,
            "docstring": null
          }
        ]
      },
      {
        "name": "ConsoleRouter",
        "lineno": 38,
        "bases": [],
        "decorators": [],
        "docstring": "Routes validated commands to subsystem handlers.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self) -> None",
            "lineno": 41,
            "docstring": null
          },
          {
            "name": "register",
            "signature": "(self, name: str, handler: ConsoleHandler) -> None",
            "lineno": 44,
            "docstring": null
          },
          {
            "name": "dispatch",
            "signature": "(self, command: ConsoleCommand) -> object",
            "lineno": 47,
            "docstring": null
          }
        ]
      },
      {
        "name": "EventStream",
        "lineno": 54,
        "bases": [],
        "decorators": [],
        "docstring": "Simple subscriber that records the latest simulation events.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self) -> None",
            "lineno": 57,
            "docstring": null
          },
          {
            "name": "connect",
            "signature": "(self, publisher: TelemetryPublisher) -> None",
            "lineno": 60,
            "docstring": null
          },
          {
            "name": "_record",
            "signature": "(self, events: list[dict[str, object]]) -> None",
            "lineno": 63,
            "docstring": null
          },
          {
            "name": "latest",
            "signature": "(self) -> list[dict[str, object]]",
            "lineno": 66,
            "docstring": null
          }
        ]
      },
      {
        "name": "TelemetryBridge",
        "lineno": 70,
        "bases": [],
        "decorators": [],
        "docstring": "Provides access to the latest telemetry snapshots for console consumers.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, publisher: TelemetryPublisher) -> None",
            "lineno": 73,
            "docstring": null
          },
          {
            "name": "snapshot",
            "signature": "(self) -> dict[str, dict[str, object]]",
            "lineno": 76,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "create_console_router",
        "lineno": 113,
        "signature": "(publisher: TelemetryPublisher, world: WorldState | None = None, scheduler: PerturbationScheduler | None = None, promotion: PromotionManager | None = None, *, policy: PolicyRuntime | None = None, mode: str = 'viewer', config: SimulationConfig | None = None, lifecycle: 'LifecycleManager' | None = None) -> ConsoleRouter",
        "docstring": null
      },
      {
        "name": "_schema_metadata",
        "lineno": 916,
        "signature": "(publisher: TelemetryPublisher) -> tuple[str, str | None]",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "SUPPORTED_SCHEMA_PREFIX",
        "value": "'0.9'",
        "lineno": 21
      },
      {
        "name": "SUPPORTED_SCHEMA_LABEL",
        "value": "f'{SUPPORTED_SCHEMA_PREFIX}.x'",
        "lineno": 22
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 924
  },
  {
    "path": "src/townlet/core/__init__.py",
    "module": "src.townlet.core.__init__",
    "docstring": "Core orchestration utilities.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "sim_loop.SimulationLoop"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 7
  },
  {
    "path": "src/townlet/core/sim_loop.py",
    "module": "src.townlet.core.sim_loo",
    "docstring": "Top-level simulation loop wiring.\n\nThe loop follows the order defined in docs/HIGH_LEVEL_DESIGN.md and delegates to\nfeature-specific subsystems. Each dependency is a thin fa\u00e7ade around the actual\nimplementation, allowing tests to substitute stubs while the real code evolves.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Iterable",
        "dataclasses.dataclass",
        "hashlib",
        "logging",
        "pathlib.Path",
        "random",
        "time"
      ],
      "external": [],
      "internal": [
        "townlet.config.SimulationConfig",
        "townlet.lifecycle.manager.LifecycleManager",
        "townlet.observations.builder.ObservationBuilder",
        "townlet.policy.runner.PolicyRuntime",
        "townlet.rewards.engine.RewardEngine",
        "townlet.scheduler.perturbations.PerturbationScheduler",
        "townlet.snapshots.SnapshotManager",
        "townlet.snapshots.apply_snapshot_to_telemetry",
        "townlet.snapshots.apply_snapshot_to_world",
        "townlet.snapshots.snapshot_from_world",
        "townlet.stability.monitor.StabilityMonitor",
        "townlet.stability.promotion.PromotionManager",
        "townlet.telemetry.publisher.TelemetryPublisher",
        "townlet.utils.decode_rng_state",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [
      {
        "name": "TickArtifacts",
        "lineno": 40,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Collects per-tick data for logging and testing.",
        "attrs": [
          {
            "name": "observations",
            "annotation": "dict[str, object]",
            "value": null,
            "lineno": 43
          },
          {
            "name": "rewards",
            "annotation": "dict[str, float]",
            "value": null,
            "lineno": 44
          }
        ],
        "methods": []
      },
      {
        "name": "SimulationLoop",
        "lineno": 47,
        "bases": [],
        "decorators": [],
        "docstring": "Orchestrates the Townlet simulation tick-by-tick.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig) -> None",
            "lineno": 50,
            "docstring": null
          },
          {
            "name": "_build_components",
            "signature": "(self) -> None",
            "lineno": 55,
            "docstring": null
          },
          {
            "name": "reset",
            "signature": "(self) -> None",
            "lineno": 78,
            "docstring": "Reset the simulation loop to its initial state."
          },
          {
            "name": "set_anneal_ratio",
            "signature": "(self, ratio: float | None) -> None",
            "lineno": 82,
            "docstring": null
          },
          {
            "name": "save_snapshot",
            "signature": "(self, root: Path | None = None) -> Path",
            "lineno": 88,
            "docstring": "Persist the current world relationships and tick to ``root``."
          },
          {
            "name": "load_snapshot",
            "signature": "(self, path: Path) -> None",
            "lineno": 116,
            "docstring": "Restore world relationships and tick from the snapshot at ``path``."
          },
          {
            "name": "run",
            "signature": "(self, max_ticks: int | None = None) -> Iterable[TickArtifacts]",
            "lineno": 161,
            "docstring": "Run the loop until `max_ticks` or indefinitely."
          },
          {
            "name": "step",
            "signature": "(self) -> TickArtifacts",
            "lineno": 167,
            "docstring": null
          },
          {
            "name": "_derive_seed",
            "signature": "(self, stream: str) -> int",
            "lineno": 268,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 270
  },
  {
    "path": "src/townlet/lifecycle/__init__.py",
    "module": "src.townlet.lifecycle.__init__",
    "docstring": "Lifecycle management utilities.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "manager.LifecycleManager"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 7
  },
  {
    "path": "src/townlet/lifecycle/manager.py",
    "module": "src.townlet.lifecycle.manager",
    "docstring": "Agent lifecycle enforcement (exits, spawns, cooldowns).",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "dataclasses.dataclass",
        "typing.Any",
        "typing.List"
      ],
      "external": [],
      "internal": [
        "townlet.config.SimulationConfig",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [
      {
        "name": "_RespawnTicket",
        "lineno": 13,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "agent_id",
            "annotation": "str",
            "value": null,
            "lineno": 14
          },
          {
            "name": "scheduled_tick",
            "annotation": "int",
            "value": null,
            "lineno": 15
          },
          {
            "name": "blueprint",
            "annotation": "dict[str, Any]",
            "value": null,
            "lineno": 16
          }
        ],
        "methods": []
      },
      {
        "name": "LifecycleManager",
        "lineno": 19,
        "bases": [],
        "decorators": [],
        "docstring": "Centralises lifecycle checks as outlined in the conceptual design snapshot.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig) -> None",
            "lineno": 22,
            "docstring": null
          },
          {
            "name": "evaluate",
            "signature": "(self, world: WorldState, tick: int) -> dict[str, bool]",
            "lineno": 31,
            "docstring": "Return a map of agent_id -> terminated flag."
          },
          {
            "name": "finalize",
            "signature": "(self, world: WorldState, tick: int, terminated: dict[str, bool]) -> None",
            "lineno": 47,
            "docstring": null
          },
          {
            "name": "process_respawns",
            "signature": "(self, world: WorldState, tick: int) -> None",
            "lineno": 68,
            "docstring": null
          },
          {
            "name": "set_respawn_delay",
            "signature": "(self, ticks: int) -> None",
            "lineno": 79,
            "docstring": null
          },
          {
            "name": "set_mortality_enabled",
            "signature": "(self, enabled: bool) -> None",
            "lineno": 83,
            "docstring": null
          },
          {
            "name": "export_state",
            "signature": "(self) -> dict[str, int]",
            "lineno": 86,
            "docstring": null
          },
          {
            "name": "import_state",
            "signature": "(self, payload: dict[str, object]) -> None",
            "lineno": 92,
            "docstring": null
          },
          {
            "name": "reset_state",
            "signature": "(self) -> None",
            "lineno": 96,
            "docstring": null
          },
          {
            "name": "termination_reasons",
            "signature": "(self) -> dict[str, str]",
            "lineno": 101,
            "docstring": "Return termination reasons captured during the last evaluation."
          },
          {
            "name": "_evaluate_employment",
            "signature": "(self, world: WorldState, tick: int) -> dict[str, bool]",
            "lineno": 105,
            "docstring": null
          },
          {
            "name": "_employment_execute_exit",
            "signature": "(self, world: WorldState, agent_id: str, tick: int, *, reason: str) -> bool",
            "lineno": 141,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 167
  },
  {
    "path": "src/townlet/observations/__init__.py",
    "module": "src.townlet.observations.__init__",
    "docstring": "Observation builders and utilities.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "builder.ObservationBuilder"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 7
  },
  {
    "path": "src/townlet/observations/builder.py",
    "module": "src.townlet.observations.builder",
    "docstring": "Observation encoding across variants.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Iterable",
        "hashlib",
        "math.cos",
        "math.sin",
        "math.tau",
        "typing.TYPE_CHECKING"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config.ObservationVariant",
        "townlet.config.SimulationConfig",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [
      {
        "name": "ObservationBuilder",
        "lineno": 18,
        "bases": [],
        "decorators": [],
        "docstring": "Constructs per-agent observation payloads.",
        "attrs": [
          {
            "name": "MAP_CHANNELS",
            "value": "('self', 'agents', 'objects', 'reservations')",
            "lineno": 21
          },
          {
            "name": "SHIFT_STATES",
            "value": "('pre_shift', 'on_time', 'late', 'absent', 'post_shift')",
            "lineno": 22
          }
        ],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig) -> None",
            "lineno": 24,
            "docstring": null
          },
          {
            "name": "build_batch",
            "signature": "(self, world: 'WorldState', terminated: dict[str, bool]) -> dict[str, dict[str, np.ndarray]]",
            "lineno": 133,
            "docstring": "Return a mapping from agent_id to observation payloads."
          },
          {
            "name": "_encode_common_features",
            "signature": "(self, features: np.ndarray, *, context: dict[str, object], slot: int, snapshot: 'AgentSnapshot', world_tick: int) -> None",
            "lineno": 152,
            "docstring": null
          },
          {
            "name": "_encode_rivalry",
            "signature": "(self, features: np.ndarray, world: 'WorldState', snapshot: 'AgentSnapshot') -> None",
            "lineno": 217,
            "docstring": null
          },
          {
            "name": "_encode_environmental_flags",
            "signature": "(self, features: np.ndarray, world: 'WorldState', snapshot: 'AgentSnapshot') -> None",
            "lineno": 232,
            "docstring": null
          },
          {
            "name": "_encode_path_hint",
            "signature": "(self, features: np.ndarray, world: 'WorldState', snapshot: 'AgentSnapshot') -> None",
            "lineno": 254,
            "docstring": null
          },
          {
            "name": "_build_single",
            "signature": "(self, world: 'WorldState', snapshot: 'AgentSnapshot', slot: int) -> dict[str, np.ndarray | dict[str, object]]",
            "lineno": 281,
            "docstring": null
          },
          {
            "name": "_map_from_view",
            "signature": "(self, channels: tuple[str, ...], local_view: dict[str, object], window: int, center: int, snapshot: 'AgentSnapshot') -> np.ndarray",
            "lineno": 300,
            "docstring": null
          },
          {
            "name": "_build_hybrid",
            "signature": "(self, world: 'WorldState', snapshot: 'AgentSnapshot', slot: int) -> dict[str, np.ndarray | dict[str, object]]",
            "lineno": 338,
            "docstring": null
          },
          {
            "name": "_build_full",
            "signature": "(self, world: 'WorldState', snapshot: 'AgentSnapshot', slot: int) -> dict[str, np.ndarray | dict[str, object]]",
            "lineno": 391,
            "docstring": null
          },
          {
            "name": "_build_compact",
            "signature": "(self, world: 'WorldState', snapshot: 'AgentSnapshot', slot: int) -> dict[str, np.ndarray | dict[str, object]]",
            "lineno": 444,
            "docstring": null
          },
          {
            "name": "_build_social_vector",
            "signature": "(self, world: 'WorldState', snapshot: 'AgentSnapshot') -> np.ndarray",
            "lineno": 493,
            "docstring": null
          },
          {
            "name": "_collect_social_slots",
            "signature": "(self, world: 'WorldState', snapshot: 'AgentSnapshot') -> list[dict[str, float]]",
            "lineno": 525,
            "docstring": null
          },
          {
            "name": "_resolve_relationships",
            "signature": "(self, world: 'WorldState', agent_id: str) -> list[dict[str, float]]",
            "lineno": 564,
            "docstring": null
          },
          {
            "name": "_encode_landmarks",
            "signature": "(self, features: np.ndarray, world: 'WorldState', snapshot: 'AgentSnapshot') -> None",
            "lineno": 606,
            "docstring": null
          },
          {
            "name": "_encode_relationship",
            "signature": "(self, entry: dict[str, float]) -> dict[str, float]",
            "lineno": 630,
            "docstring": null
          },
          {
            "name": "_empty_relationship_entry",
            "signature": "(self) -> dict[str, float]",
            "lineno": 641,
            "docstring": null
          },
          {
            "name": "_embed_agent_id",
            "signature": "(self, other_id: str) -> np.ndarray",
            "lineno": 650,
            "docstring": null
          },
          {
            "name": "_compute_aggregates",
            "signature": "(self, trust_values: Iterable[float], rivalry_values: Iterable[float]) -> tuple[float, float, float, float]",
            "lineno": 658,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [
      {
        "name": "MAP_CHANNELS",
        "value": "('self', 'agents', 'objects', 'reservations')",
        "lineno": 21
      },
      {
        "name": "SHIFT_STATES",
        "value": "('pre_shift', 'on_time', 'late', 'absent', 'post_shift')",
        "lineno": 22
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 669
  },
  {
    "path": "src/townlet/observations/embedding.py",
    "module": "src.townlet.observations.embedding",
    "docstring": "Embedding slot allocation with cooldown logging.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "dataclasses.dataclass"
      ],
      "external": [],
      "internal": [
        "townlet.config.EmbeddingAllocatorConfig",
        "townlet.config.SimulationConfig"
      ]
    },
    "classes": [
      {
        "name": "_SlotState",
        "lineno": 11,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Tracks release metadata for a slot.",
        "attrs": [
          {
            "name": "released_at_tick",
            "annotation": "int | None",
            "value": "None",
            "lineno": 14
          }
        ],
        "methods": []
      },
      {
        "name": "EmbeddingAllocator",
        "lineno": 17,
        "bases": [],
        "decorators": [],
        "docstring": "Assigns stable embedding slots to agents with a reuse cooldown.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig) -> None",
            "lineno": 20,
            "docstring": null
          },
          {
            "name": "allocate",
            "signature": "(self, agent_id: str, tick: int) -> int",
            "lineno": 35,
            "docstring": "Return the embedding slot for the agent, allocating if necessary."
          },
          {
            "name": "release",
            "signature": "(self, agent_id: str, tick: int) -> None",
            "lineno": 49,
            "docstring": "Release the slot held by the agent."
          },
          {
            "name": "has_assignment",
            "signature": "(self, agent_id: str) -> bool",
            "lineno": 57,
            "docstring": "Return whether the allocator still tracks the agent."
          },
          {
            "name": "metrics",
            "signature": "(self) -> dict[str, float]",
            "lineno": 61,
            "docstring": "Expose allocation metrics for telemetry."
          },
          {
            "name": "export_state",
            "signature": "(self) -> dict[str, object]",
            "lineno": 74,
            "docstring": "Serialise allocator bookkeeping for snapshot persistence."
          },
          {
            "name": "import_state",
            "signature": "(self, payload: dict[str, object]) -> None",
            "lineno": 86,
            "docstring": "Restore allocator bookkeeping from snapshot data."
          },
          {
            "name": "_select_slot",
            "signature": "(self, tick: int) -> tuple[int, bool]",
            "lineno": 130,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 160
  },
  {
    "path": "src/townlet/policy/__init__.py",
    "module": "src.townlet.policy.__init__",
    "docstring": "Policy integration layer.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "bc.BCTrainer",
        "bc.BCTrainingConfig",
        "bc.BCTrajectoryDataset",
        "bc.evaluate_bc_policy",
        "bc.load_bc_samples",
        "runner.PolicyRuntime",
        "runner.TrainingHarness"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 22
  },
  {
    "path": "src/townlet/policy/bc.py",
    "module": "src.townlet.policy.bc",
    "docstring": "Behaviour cloning utilities.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Mapping",
        "collections.abc.Sequence",
        "dataclasses.dataclass",
        "json",
        "pathlib.Path"
      ],
      "external": [
        "numpy",
        "torch",
        "torch.nn",
        "torch.utils.data.DataLoader",
        "torch.utils.data.Dataset"
      ],
      "internal": [
        "townlet.policy.models.ConflictAwarePolicyConfig",
        "townlet.policy.models.ConflictAwarePolicyNetwork",
        "townlet.policy.models.TorchNotAvailableError",
        "townlet.policy.models.torch_available",
        "townlet.policy.replay.ReplaySample",
        "townlet.policy.replay.load_replay_sample"
      ]
    },
    "classes": [
      {
        "name": "BCTrainingConfig",
        "lineno": 32,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "learning_rate",
            "annotation": "float",
            "value": "0.001",
            "lineno": 33
          },
          {
            "name": "batch_size",
            "annotation": "int",
            "value": "64",
            "lineno": 34
          },
          {
            "name": "epochs",
            "annotation": "int",
            "value": "5",
            "lineno": 35
          },
          {
            "name": "weight_decay",
            "annotation": "float",
            "value": "0.0",
            "lineno": 36
          },
          {
            "name": "device",
            "annotation": "str",
            "value": "'cpu'",
            "lineno": 37
          }
        ],
        "methods": []
      },
      {
        "name": "BCDatasetConfig",
        "lineno": 41,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "manifest",
            "annotation": "Path",
            "value": null,
            "lineno": 42
          }
        ],
        "methods": []
      },
      {
        "name": "BCTrajectoryDataset",
        "lineno": 45,
        "bases": [
          "Dataset"
        ],
        "decorators": [],
        "docstring": "Torch dataset flattening replay samples for behaviour cloning.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, samples: Sequence[ReplaySample]) -> None",
            "lineno": 48,
            "docstring": null
          },
          {
            "name": "__len__",
            "signature": "(self) -> int",
            "lineno": 73,
            "docstring": null
          },
          {
            "name": "__getitem__",
            "signature": "(self, index: int)",
            "lineno": 76,
            "docstring": null
          }
        ]
      },
      {
        "name": "BCTrainer",
        "lineno": 121,
        "bases": [],
        "decorators": [],
        "docstring": "Lightweight supervised trainer for behaviour cloning.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: BCTrainingConfig, policy_config: ConflictAwarePolicyConfig) -> None",
            "lineno": 124,
            "docstring": null
          },
          {
            "name": "fit",
            "signature": "(self, dataset: BCTrajectoryDataset) -> Mapping[str, float]",
            "lineno": 140,
            "docstring": null
          },
          {
            "name": "evaluate",
            "signature": "(self, dataset: BCTrajectoryDataset) -> Mapping[str, float]",
            "lineno": 158,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "load_bc_samples",
        "lineno": 83,
        "signature": "(manifest_path: Path) -> list[ReplaySample]",
        "docstring": null
      },
      {
        "name": "evaluate_bc_policy",
        "lineno": 176,
        "signature": "(model: ConflictAwarePolicyNetwork, dataset: BCTrajectoryDataset, device: str = 'cpu') -> Mapping[str, float]",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 201
  },
  {
    "path": "src/townlet/policy/behavior.py",
    "module": "src.townlet.policy.behavior",
    "docstring": "Behavior controller interfaces for scripted decision logic.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "dataclasses.dataclass",
        "typing.Optional",
        "typing.Protocol"
      ],
      "external": [],
      "internal": [
        "townlet.config.SimulationConfig",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [
      {
        "name": "AgentIntent",
        "lineno": 13,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Represents the next action an agent wishes to perform.",
        "attrs": [
          {
            "name": "kind",
            "annotation": "str",
            "value": null,
            "lineno": 16
          },
          {
            "name": "object_id",
            "annotation": "Optional[str]",
            "value": "None",
            "lineno": 17
          },
          {
            "name": "affordance_id",
            "annotation": "Optional[str]",
            "value": "None",
            "lineno": 18
          },
          {
            "name": "blocked",
            "annotation": "bool",
            "value": "False",
            "lineno": 19
          },
          {
            "name": "position",
            "annotation": "Optional[tuple[int, int]]",
            "value": "None",
            "lineno": 20
          }
        ],
        "methods": []
      },
      {
        "name": "BehaviorController",
        "lineno": 23,
        "bases": [
          "Protocol"
        ],
        "decorators": [],
        "docstring": "Defines the interface for agent decision logic.",
        "attrs": [],
        "methods": [
          {
            "name": "decide",
            "signature": "(self, world: WorldState, agent_id: str) -> AgentIntent",
            "lineno": 26,
            "docstring": null
          }
        ]
      },
      {
        "name": "IdleBehavior",
        "lineno": 29,
        "bases": [
          "BehaviorController"
        ],
        "decorators": [],
        "docstring": "Default no-op behavior that keeps agents idle.",
        "attrs": [],
        "methods": [
          {
            "name": "decide",
            "signature": "(self, world: WorldState, agent_id: str) -> AgentIntent",
            "lineno": 32,
            "docstring": null
          }
        ]
      },
      {
        "name": "ScriptedBehavior",
        "lineno": 36,
        "bases": [
          "BehaviorController"
        ],
        "decorators": [],
        "docstring": "Simple rule-based controller used before RL policies are available.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig) -> None",
            "lineno": 39,
            "docstring": null
          },
          {
            "name": "decide",
            "signature": "(self, world: WorldState, agent_id: str) -> AgentIntent",
            "lineno": 44,
            "docstring": null
          },
          {
            "name": "_cleanup_pending",
            "signature": "(self, world: WorldState, agent_id: str) -> None",
            "lineno": 78,
            "docstring": null
          },
          {
            "name": "_maybe_move_to_job",
            "signature": "(self, world: WorldState, agent_id: str, snapshot: object) -> Optional[AgentIntent]",
            "lineno": 91,
            "docstring": null
          },
          {
            "name": "_satisfy_needs",
            "signature": "(self, world: WorldState, agent_id: str, snapshot: object) -> Optional[AgentIntent]",
            "lineno": 110,
            "docstring": null
          },
          {
            "name": "_rivals_in_queue",
            "signature": "(self, world: WorldState, agent_id: str, object_id: str) -> bool",
            "lineno": 139,
            "docstring": null
          },
          {
            "name": "_plan_meal",
            "signature": "(self, world: WorldState, agent_id: str) -> Optional[AgentIntent]",
            "lineno": 157,
            "docstring": null
          },
          {
            "name": "_find_object_of_type",
            "signature": "(self, world: WorldState, object_type: str) -> Optional[str]",
            "lineno": 186,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "build_behavior",
        "lineno": 195,
        "signature": "(config: SimulationConfig) -> BehaviorController",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 196
  },
  {
    "path": "src/townlet/policy/metrics.py",
    "module": "src.townlet.policy.metrics",
    "docstring": "Utility helpers for replay and rollout metrics.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "typing.Any"
      ],
      "external": [
        "numpy",
        "replay.ReplaySample"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "compute_sample_metrics",
        "lineno": 13,
        "signature": "(sample: ReplaySample) -> dict[str, float]",
        "docstring": "Compute summary metrics for a replay sample."
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 108
  },
  {
    "path": "src/townlet/policy/models.py",
    "module": "src.townlet.policy.models",
    "docstring": "Torch-based policy/value networks for Townlet PPO.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "dataclasses.dataclass"
      ],
      "external": [
        "torch",
        "torch.nn"
      ],
      "internal": []
    },
    "classes": [
      {
        "name": "TorchNotAvailableError",
        "lineno": 20,
        "bases": [
          "RuntimeError"
        ],
        "decorators": [],
        "docstring": "Raised when a Torch-dependent component is used without PyTorch.",
        "attrs": [],
        "methods": []
      },
      {
        "name": "ConflictAwarePolicyConfig",
        "lineno": 25,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "feature_dim",
            "annotation": "int",
            "value": null,
            "lineno": 26
          },
          {
            "name": "map_shape",
            "annotation": "tuple[int, int, int]",
            "value": null,
            "lineno": 27
          },
          {
            "name": "action_dim",
            "annotation": "int",
            "value": null,
            "lineno": 28
          },
          {
            "name": "hidden_dim",
            "annotation": "int",
            "value": "256",
            "lineno": 29
          }
        ],
        "methods": []
      }
    ],
    "functions": [
      {
        "name": "torch_available",
        "lineno": 15,
        "signature": "() -> bool",
        "docstring": "Return True if PyTorch is available in the runtime."
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 83
  },
  {
    "path": "src/townlet/policy/ppo/__init__.py",
    "module": "src.townlet.policy.ppo.__init__",
    "docstring": "PPO utilities package.",
    "imports": {
      "stdlib": [],
      "external": [
        "utils.AdvantageReturns",
        "utils.clipped_value_loss",
        "utils.compute_gae",
        "utils.normalize_advantages",
        "utils.policy_surrogate",
        "utils.value_baseline_from_old_preds"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 19
  },
  {
    "path": "src/townlet/policy/ppo/utils.py",
    "module": "src.townlet.policy.ppo.utils",
    "docstring": "Utility functions for PPO advantage and loss computation.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "dataclasses.dataclass"
      ],
      "external": [
        "torch"
      ],
      "internal": []
    },
    "classes": [
      {
        "name": "AdvantageReturns",
        "lineno": 11,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Container for PPO advantage and return tensors.",
        "attrs": [
          {
            "name": "advantages",
            "annotation": "torch.Tensor",
            "value": null,
            "lineno": 14
          },
          {
            "name": "returns",
            "annotation": "torch.Tensor",
            "value": null,
            "lineno": 15
          }
        ],
        "methods": []
      }
    ],
    "functions": [
      {
        "name": "compute_gae",
        "lineno": 18,
        "signature": "(rewards: torch.Tensor, value_preds: torch.Tensor, dones: torch.Tensor, gamma: float, gae_lambda: float) -> AdvantageReturns",
        "docstring": "Compute Generalized Advantage Estimation (GAE).\n\nArgs:\n    rewards: Tensor shaped (batch, timesteps).\n    value_preds: Tensor shaped (batch, timesteps) or (batch, timesteps + 1).\n    dones: Tensor shaped (batch, timesteps) with 1.0 when episode terminates.\n    gamma: Discount factor.\n    gae_lambda: GAE smoothing coefficient.\n\nReturns:\n    AdvantageReturns with tensors shaped (batch, timesteps)."
      },
      {
        "name": "normalize_advantages",
        "lineno": 72,
        "signature": "(advantages: torch.Tensor, eps: float = 1e-08) -> torch.Tensor",
        "docstring": "Normalize advantage estimates to zero mean/unit variance."
      },
      {
        "name": "value_baseline_from_old_preds",
        "lineno": 82,
        "signature": "(value_preds: torch.Tensor, timesteps: int) -> torch.Tensor",
        "docstring": "Extract baseline values aligned with each timestep from stored predictions."
      },
      {
        "name": "clipped_value_loss",
        "lineno": 98,
        "signature": "(new_values: torch.Tensor, returns: torch.Tensor, old_values: torch.Tensor, value_clip: float) -> torch.Tensor",
        "docstring": "Compute the clipped value loss term."
      },
      {
        "name": "policy_surrogate",
        "lineno": 124,
        "signature": "(new_log_probs: torch.Tensor, old_log_probs: torch.Tensor, advantages: torch.Tensor, clip_param: float) -> tuple[torch.Tensor, torch.Tensor]",
        "docstring": "Compute PPO clipped policy loss and clip fraction."
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 140
  },
  {
    "path": "src/townlet/policy/replay.py",
    "module": "src.townlet.policy.repla",
    "docstring": "Utilities for replaying observation/telemetry samples.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Iterator",
        "collections.abc.Sequence",
        "dataclasses.dataclass",
        "json",
        "pathlib.Path",
        "typing.Any",
        "typing.Optional"
      ],
      "external": [
        "numpy",
        "yaml"
      ],
      "internal": []
    },
    "classes": [
      {
        "name": "ReplaySample",
        "lineno": 20,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Container for observation samples used in training replays.",
        "attrs": [
          {
            "name": "map",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 23
          },
          {
            "name": "features",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 24
          },
          {
            "name": "actions",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 25
          },
          {
            "name": "old_log_probs",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 26
          },
          {
            "name": "value_preds",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 27
          },
          {
            "name": "rewards",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 28
          },
          {
            "name": "dones",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 29
          },
          {
            "name": "metadata",
            "annotation": "dict[str, Any]",
            "value": null,
            "lineno": 30
          }
        ],
        "methods": [
          {
            "name": "__post_init__",
            "signature": "(self) -> None",
            "lineno": 32,
            "docstring": null
          },
          {
            "name": "feature_names",
            "signature": "(self) -> Optional[list[str]]",
            "lineno": 91,
            "docstring": null
          },
          {
            "name": "conflict_stats",
            "signature": "(self) -> dict[str, float]",
            "lineno": 97,
            "docstring": null
          }
        ]
      },
      {
        "name": "ReplayBatch",
        "lineno": 161,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Mini-batch representation composed from replay samples.",
        "attrs": [
          {
            "name": "maps",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 164
          },
          {
            "name": "features",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 165
          },
          {
            "name": "actions",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 166
          },
          {
            "name": "old_log_probs",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 167
          },
          {
            "name": "value_preds",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 168
          },
          {
            "name": "rewards",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 169
          },
          {
            "name": "dones",
            "annotation": "np.ndarray",
            "value": null,
            "lineno": 170
          },
          {
            "name": "metadata",
            "annotation": "dict[str, Any]",
            "value": null,
            "lineno": 171
          }
        ],
        "methods": [
          {
            "name": "__post_init__",
            "signature": "(self) -> None",
            "lineno": 173,
            "docstring": null
          },
          {
            "name": "conflict_stats",
            "signature": "(self) -> dict[str, float]",
            "lineno": 230,
            "docstring": null
          }
        ]
      },
      {
        "name": "ReplayDatasetConfig",
        "lineno": 279,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Configuration for building replay datasets.",
        "attrs": [
          {
            "name": "entries",
            "annotation": "list[tuple[Path, Optional[Path]]]",
            "value": null,
            "lineno": 282
          },
          {
            "name": "batch_size",
            "annotation": "int",
            "value": "1",
            "lineno": 283
          },
          {
            "name": "shuffle",
            "annotation": "bool",
            "value": "False",
            "lineno": 284
          },
          {
            "name": "seed",
            "annotation": "Optional[int]",
            "value": "None",
            "lineno": 285
          },
          {
            "name": "drop_last",
            "annotation": "bool",
            "value": "False",
            "lineno": 286
          },
          {
            "name": "streaming",
            "annotation": "bool",
            "value": "False",
            "lineno": 287
          },
          {
            "name": "metrics_map",
            "annotation": "Optional[dict[str, dict[str, float]]]",
            "value": "None",
            "lineno": 288
          },
          {
            "name": "label",
            "annotation": "Optional[str]",
            "value": "None",
            "lineno": 289
          }
        ],
        "methods": [
          {
            "name": "from_manifest",
            "signature": "(cls, manifest_path: Path, batch_size: int = 1, shuffle: bool = False, seed: Optional[int] = None, drop_last: bool = False, streaming: bool = False) -> 'ReplayDatasetConfig'",
            "lineno": 292,
            "docstring": null
          },
          {
            "name": "from_capture_dir",
            "signature": "(cls, capture_dir: Path, batch_size: int = 1, shuffle: bool = False, seed: Optional[int] = None, drop_last: bool = False, streaming: bool = False) -> 'ReplayDatasetConfig'",
            "lineno": 313,
            "docstring": null
          }
        ]
      },
      {
        "name": "ReplayDataset",
        "lineno": 407,
        "bases": [],
        "decorators": [],
        "docstring": "Iterable dataset producing conflict-aware replay batches.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: ReplayDatasetConfig) -> None",
            "lineno": 410,
            "docstring": null
          },
          {
            "name": "_ensure_homogeneous",
            "signature": "(self, samples: Sequence[ReplaySample]) -> None",
            "lineno": 447,
            "docstring": null
          },
          {
            "name": "__len__",
            "signature": "(self) -> int",
            "lineno": 462,
            "docstring": null
          },
          {
            "name": "__iter__",
            "signature": "(self) -> Iterator[ReplayBatch]",
            "lineno": 469,
            "docstring": null
          },
          {
            "name": "_fetch_sample",
            "signature": "(self, index: int) -> ReplaySample",
            "lineno": 480,
            "docstring": null
          },
          {
            "name": "_ensure_sample_metrics",
            "signature": "(self, sample: ReplaySample, entry: tuple[Path, Optional[Path]]) -> None",
            "lineno": 512,
            "docstring": null
          },
          {
            "name": "_aggregate_metrics",
            "signature": "(self) -> dict[str, float]",
            "lineno": 522,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "_ensure_conflict_features",
        "lineno": 110,
        "signature": "(metadata: dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "load_replay_sample",
        "lineno": 121,
        "signature": "(sample_path: Path, meta_path: Optional[Path] = None) -> ReplaySample",
        "docstring": "Load observation tensors and metadata for replay-driven training scaffolds."
      },
      {
        "name": "build_batch",
        "lineno": 245,
        "signature": "(samples: Sequence[ReplaySample]) -> ReplayBatch",
        "docstring": "Stack multiple replay samples into a batch for training consumers."
      },
      {
        "name": "_resolve_manifest_path",
        "lineno": 346,
        "signature": "(path_spec: Path, base: Path) -> Path",
        "docstring": "Resolve manifest path specs that may be absolute or repo-relative."
      },
      {
        "name": "_load_manifest",
        "lineno": 363,
        "signature": "(manifest_path: Path) -> list[tuple[Path, Optional[Path]]]",
        "docstring": null
      },
      {
        "name": "frames_to_replay_sample",
        "lineno": 561,
        "signature": "(frames: Sequence[dict[str, Any]]) -> ReplaySample",
        "docstring": "Convert collected trajectory frames into a replay sample."
      }
    ],
    "constants": [
      {
        "name": "REQUIRED_CONFLICT_FEATURES",
        "value": "('rivalry_max', 'rivalry_avoid_count')",
        "annotation": "tuple[str, ...]",
        "lineno": 14
      },
      {
        "name": "STEP_ARRAY_FIELDS",
        "value": "('actions', 'old_log_probs', 'rewards', 'dones')",
        "annotation": "tuple[str, ...]",
        "lineno": 15
      },
      {
        "name": "TRAINING_ARRAY_FIELDS",
        "value": "STEP_ARRAY_FIELDS + ('value_preds',)",
        "annotation": "tuple[str, ...]",
        "lineno": 16
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 641
  },
  {
    "path": "src/townlet/policy/replay_buffer.py",
    "module": "src.townlet.policy.replay_buffer",
    "docstring": "In-memory replay dataset used for rollout captures.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Iterator",
        "collections.abc.Sequence",
        "dataclasses.dataclass"
      ],
      "external": [],
      "internal": [
        "townlet.policy.replay.ReplayBatch",
        "townlet.policy.replay.ReplaySample",
        "townlet.policy.replay.build_batch"
      ]
    },
    "classes": [
      {
        "name": "InMemoryReplayDatasetConfig",
        "lineno": 12,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "entries",
            "annotation": "Sequence[ReplaySample]",
            "value": null,
            "lineno": 13
          },
          {
            "name": "batch_size",
            "annotation": "int",
            "value": "1",
            "lineno": 14
          },
          {
            "name": "drop_last",
            "annotation": "bool",
            "value": "False",
            "lineno": 15
          },
          {
            "name": "rollout_ticks",
            "annotation": "int",
            "value": "0",
            "lineno": 16
          },
          {
            "name": "label",
            "annotation": "str | None",
            "value": "None",
            "lineno": 17
          }
        ],
        "methods": []
      },
      {
        "name": "InMemoryReplayDataset",
        "lineno": 20,
        "bases": [],
        "decorators": [],
        "docstring": null,
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: InMemoryReplayDatasetConfig) -> None",
            "lineno": 21,
            "docstring": null
          },
          {
            "name": "_validate_shapes",
            "signature": "(self) -> None",
            "lineno": 41,
            "docstring": null
          },
          {
            "name": "__iter__",
            "signature": "(self) -> Iterator[ReplayBatch]",
            "lineno": 50,
            "docstring": null
          },
          {
            "name": "__len__",
            "signature": "(self) -> int",
            "lineno": 57,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 62
  },
  {
    "path": "src/townlet/policy/rollout.py",
    "module": "src.townlet.policy.rollout",
    "docstring": "Rollout buffer scaffolding for future live PPO integration.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Iterable",
        "dataclasses.dataclass",
        "dataclasses.field",
        "json",
        "pathlib.Path"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.policy.metrics.compute_sample_metrics",
        "townlet.policy.replay.ReplaySample",
        "townlet.policy.replay.frames_to_replay_sample",
        "townlet.policy.replay_buffer.InMemoryReplayDataset",
        "townlet.policy.replay_buffer.InMemoryReplayDatasetConfig"
      ]
    },
    "classes": [
      {
        "name": "AgentRollout",
        "lineno": 21,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "agent_id",
            "annotation": "str",
            "value": null,
            "lineno": 22
          },
          {
            "name": "frames",
            "annotation": "list[dict[str, object]]",
            "value": "field(default_factory=list)",
            "lineno": 23
          }
        ],
        "methods": [
          {
            "name": "append",
            "signature": "(self, frame: dict[str, object]) -> None",
            "lineno": 25,
            "docstring": null
          },
          {
            "name": "to_replay_sample",
            "signature": "(self) -> ReplaySample",
            "lineno": 28,
            "docstring": null
          }
        ]
      },
      {
        "name": "RolloutBuffer",
        "lineno": 32,
        "bases": [],
        "decorators": [],
        "docstring": "Collects trajectory frames and exposes helpers to save or replay them.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self) -> None",
            "lineno": 35,
            "docstring": null
          },
          {
            "name": "record_events",
            "signature": "(self, events: Iterable[dict[str, object]]) -> None",
            "lineno": 47,
            "docstring": null
          },
          {
            "name": "extend",
            "signature": "(self, frames: Iterable[dict[str, object]]) -> None",
            "lineno": 73,
            "docstring": null
          },
          {
            "name": "__len__",
            "signature": "(self) -> int",
            "lineno": 77,
            "docstring": null
          },
          {
            "name": "by_agent",
            "signature": "(self) -> dict[str, AgentRollout]",
            "lineno": 80,
            "docstring": null
          },
          {
            "name": "to_samples",
            "signature": "(self) -> dict[str, ReplaySample]",
            "lineno": 87,
            "docstring": null
          },
          {
            "name": "save",
            "signature": "(self, output_dir: Path, prefix: str = 'rollout_sample', compress: bool = True) -> None",
            "lineno": 93,
            "docstring": null
          },
          {
            "name": "build_dataset",
            "signature": "(self, batch_size: int = 1, drop_last: bool = False) -> InMemoryReplayDataset",
            "lineno": 131,
            "docstring": null
          },
          {
            "name": "is_empty",
            "signature": "(self) -> bool",
            "lineno": 167,
            "docstring": null
          },
          {
            "name": "set_tick_count",
            "signature": "(self, ticks: int) -> None",
            "lineno": 170,
            "docstring": null
          },
          {
            "name": "_aggregate_metrics",
            "signature": "(self, samples: list[ReplaySample]) -> dict[str, float]",
            "lineno": 173,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 206
  },
  {
    "path": "src/townlet/policy/runner.py",
    "module": "src.townlet.policy.runner",
    "docstring": "Policy orchestration scaffolding.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Iterable",
        "collections.abc.Mapping",
        "json",
        "math",
        "pathlib.Path",
        "random",
        "statistics",
        "time",
        "typing.Callable"
      ],
      "external": [
        "numpy",
        "torch",
        "torch.distributions.Categorical",
        "torch.nn.utils.clip_grad_norm_"
      ],
      "internal": [
        "townlet.config.PPOConfig",
        "townlet.config.SimulationConfig",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.policy.bc.BCTrainer",
        "townlet.policy.bc.BCTrainingConfig",
        "townlet.policy.bc.BCTrajectoryDataset",
        "townlet.policy.bc.load_bc_samples",
        "townlet.policy.behavior.AgentIntent",
        "townlet.policy.behavior.BehaviorController",
        "townlet.policy.behavior.build_behavior",
        "townlet.policy.models.ConflictAwarePolicyConfig",
        "townlet.policy.models.ConflictAwarePolicyNetwork",
        "townlet.policy.models.TorchNotAvailableError",
        "townlet.policy.models.torch_available",
        "townlet.policy.ppo.utils.AdvantageReturns",
        "townlet.policy.ppo.utils.clipped_value_loss",
        "townlet.policy.ppo.utils.compute_gae",
        "townlet.policy.ppo.utils.normalize_advantages",
        "townlet.policy.ppo.utils.policy_surrogate",
        "townlet.policy.ppo.utils.value_baseline_from_old_preds",
        "townlet.policy.replay.ReplayBatch",
        "townlet.policy.replay.ReplayDataset",
        "townlet.policy.replay.ReplayDatasetConfig",
        "townlet.policy.replay.ReplaySample",
        "townlet.policy.replay.build_batch",
        "townlet.policy.replay.load_replay_sample",
        "townlet.policy.replay_buffer.InMemoryReplayDataset",
        "townlet.policy.rollout.RolloutBuffer",
        "townlet.policy.scenario_utils.apply_scenario",
        "townlet.policy.scenario_utils.has_agents",
        "townlet.policy.scenario_utils.seed_default_agents",
        "townlet.stability.promotion.PromotionManager",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [
      {
        "name": "PolicyRuntime",
        "lineno": 87,
        "bases": [],
        "decorators": [],
        "docstring": "Bridges the simulation with PPO/backends via PettingZoo.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig) -> None",
            "lineno": 90,
            "docstring": null
          },
          {
            "name": "seed_anneal_rng",
            "signature": "(self, seed: int) -> None",
            "lineno": 126,
            "docstring": null
          },
          {
            "name": "set_anneal_ratio",
            "signature": "(self, ratio: float | None) -> None",
            "lineno": 129,
            "docstring": null
          },
          {
            "name": "enable_anneal_blend",
            "signature": "(self, enabled: bool) -> None",
            "lineno": 135,
            "docstring": null
          },
          {
            "name": "register_ctx_reset_callback",
            "signature": "(self, callback: Callable[[str], None] | None) -> None",
            "lineno": 138,
            "docstring": null
          },
          {
            "name": "set_policy_action_provider",
            "signature": "(self, provider: Callable[[WorldState, str, AgentIntent], AgentIntent | None]) -> None",
            "lineno": 141,
            "docstring": null
          },
          {
            "name": "decide",
            "signature": "(self, world: WorldState, tick: int) -> dict[str, object]",
            "lineno": 146,
            "docstring": "Return a primitive action per agent."
          },
          {
            "name": "post_step",
            "signature": "(self, rewards: dict[str, float], terminated: dict[str, bool]) -> None",
            "lineno": 209,
            "docstring": "Record rewards and termination signals into buffers."
          },
          {
            "name": "flush_transitions",
            "signature": "(self, observations: dict[str, dict[str, object]]) -> list[dict[str, object]]",
            "lineno": 226,
            "docstring": "Combine stored transition data with observations and return trajectory frames."
          },
          {
            "name": "collect_trajectory",
            "signature": "(self, clear: bool = True) -> list[dict[str, object]]",
            "lineno": 256,
            "docstring": "Return accumulated trajectory frames and reset internal buffer."
          },
          {
            "name": "consume_option_switch_counts",
            "signature": "(self) -> dict[str, int]",
            "lineno": 263,
            "docstring": "Return per-agent option switch counts accumulated since last call."
          },
          {
            "name": "acquire_possession",
            "signature": "(self, agent_id: str) -> bool",
            "lineno": 270,
            "docstring": null
          },
          {
            "name": "release_possession",
            "signature": "(self, agent_id: str) -> bool",
            "lineno": 280,
            "docstring": null
          },
          {
            "name": "is_possessed",
            "signature": "(self, agent_id: str) -> bool",
            "lineno": 286,
            "docstring": null
          },
          {
            "name": "possessed_agents",
            "signature": "(self) -> list[str]",
            "lineno": 289,
            "docstring": null
          },
          {
            "name": "reset_state",
            "signature": "(self) -> None",
            "lineno": 292,
            "docstring": "Reset transient buffers so snapshot loads don\u2019t duplicate data."
          },
          {
            "name": "_select_intent_with_blend",
            "signature": "(self, world: WorldState, agent_id: str, scripted: AgentIntent) -> AgentIntent",
            "lineno": 302,
            "docstring": null
          },
          {
            "name": "_clone_intent",
            "signature": "(intent: AgentIntent) -> AgentIntent",
            "lineno": 328,
            "docstring": null
          },
          {
            "name": "_intents_match",
            "signature": "(lhs: AgentIntent, rhs: AgentIntent) -> bool",
            "lineno": 338,
            "docstring": null
          },
          {
            "name": "_enforce_option_commit",
            "signature": "(self, agent_id: str, tick: int, intent: AgentIntent) -> tuple[AgentIntent, bool]",
            "lineno": 347,
            "docstring": null
          },
          {
            "name": "_annotate_with_policy_outputs",
            "signature": "(self, frame: dict[str, object]) -> None",
            "lineno": 369,
            "docstring": null
          },
          {
            "name": "_update_policy_snapshot",
            "signature": "(self, frames: list[dict[str, object]]) -> None",
            "lineno": 415,
            "docstring": null
          },
          {
            "name": "latest_policy_snapshot",
            "signature": "(self) -> dict[str, dict[str, object]]",
            "lineno": 454,
            "docstring": null
          },
          {
            "name": "active_policy_hash",
            "signature": "(self) -> str | None",
            "lineno": 461,
            "docstring": "Return the configured policy hash, if any."
          },
          {
            "name": "set_policy_hash",
            "signature": "(self, value: str | None) -> None",
            "lineno": 466,
            "docstring": "Set the policy hash after loading a checkpoint."
          },
          {
            "name": "current_anneal_ratio",
            "signature": "(self) -> float | None",
            "lineno": 471,
            "docstring": "Return the latest anneal ratio (0..1) if tracking available."
          },
          {
            "name": "set_anneal_ratio",
            "signature": "(self, ratio: float | None) -> None",
            "lineno": 476,
            "docstring": null
          },
          {
            "name": "_ensure_policy_network",
            "signature": "(self, map_shape: tuple[int, int, int], feature_dim: int, action_dim: int) -> bool",
            "lineno": 483,
            "docstring": null
          },
          {
            "name": "_build_policy_network",
            "signature": "(self, feature_dim: int, map_shape: tuple[int, int, int], action_dim: int) -> ConflictAwarePolicyNetwork",
            "lineno": 520,
            "docstring": null
          }
        ]
      },
      {
        "name": "TrainingHarness",
        "lineno": 534,
        "bases": [],
        "decorators": [],
        "docstring": "Coordinates RL training sessions.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig) -> None",
            "lineno": 537,
            "docstring": null
          },
          {
            "name": "run",
            "signature": "(self) -> None",
            "lineno": 550,
            "docstring": "Entry point for CLI training runs based on config.training.source."
          },
          {
            "name": "current_anneal_ratio",
            "signature": "(self) -> float | None",
            "lineno": 564,
            "docstring": null
          },
          {
            "name": "set_anneal_ratio",
            "signature": "(self, ratio: float | None) -> None",
            "lineno": 567,
            "docstring": null
          },
          {
            "name": "run_replay",
            "signature": "(self, sample_path: Path, meta_path: Path | None = None) -> dict[str, float]",
            "lineno": 574,
            "docstring": "Load a replay observation sample and surface conflict-aware stats."
          },
          {
            "name": "run_replay_batch",
            "signature": "(self, pairs: Iterable[tuple[Path, Path | None]]) -> dict[str, float]",
            "lineno": 582,
            "docstring": null
          },
          {
            "name": "run_replay_dataset",
            "signature": "(self, dataset_config: ReplayDatasetConfig) -> dict[str, float]",
            "lineno": 589,
            "docstring": null
          },
          {
            "name": "capture_rollout",
            "signature": "(self, ticks: int, auto_seed_agents: bool = False, output_dir: Path | None = None, prefix: str = 'rollout_sample', compress: bool = True) -> RolloutBuffer",
            "lineno": 599,
            "docstring": "Run the simulation loop for a fixed number of ticks and collect frames."
          },
          {
            "name": "run_rollout_ppo",
            "signature": "(self, ticks: int, batch_size: int = 1, auto_seed_agents: bool = False, output_dir: Path | None = None, prefix: str = 'rollout_sample', compress: bool = True, epochs: int = 1, log_path: Path | None = None, log_frequency: int = 1, max_log_entries: int | None = None) -> dict[str, float]",
            "lineno": 649,
            "docstring": null
          },
          {
            "name": "_load_bc_dataset",
            "signature": "(self, manifest: Path) -> BCTrajectoryDataset",
            "lineno": 681,
            "docstring": null
          },
          {
            "name": "run_bc_training",
            "signature": "(self, *, manifest: Path | None = None, config: BCTrainingParams | None = None) -> dict[str, float]",
            "lineno": 685,
            "docstring": null
          },
          {
            "name": "run_anneal",
            "signature": "(self, *, dataset_config: ReplayDatasetConfig | None = None, in_memory_dataset: InMemoryReplayDataset | None = None, log_dir: Path | None = None, bc_manifest: Path | None = None) -> list[dict[str, object]]",
            "lineno": 723,
            "docstring": null
          },
          {
            "name": "run_ppo",
            "signature": "(self, dataset_config: ReplayDatasetConfig | None = None, epochs: int = 1, log_path: Path | None = None, log_frequency: int = 1, max_log_entries: int | None = None, in_memory_dataset: InMemoryReplayDataset | None = None) -> dict[str, float]",
            "lineno": 823,
            "docstring": null
          },
          {
            "name": "evaluate_anneal_results",
            "signature": "(self, results: list[dict[str, object]]) -> str",
            "lineno": 1321,
            "docstring": null
          },
          {
            "name": "last_anneal_status",
            "signature": "(self) -> str | None",
            "lineno": 1336,
            "docstring": null
          },
          {
            "name": "_record_promotion_evaluation",
            "signature": "(self, *, status: str, results: list[dict[str, object]]) -> None",
            "lineno": 1339,
            "docstring": null
          },
          {
            "name": "_select_social_reward_stage",
            "signature": "(self, cycle_id: int) -> str | None",
            "lineno": 1378,
            "docstring": null
          },
          {
            "name": "_apply_social_reward_stage",
            "signature": "(self, cycle_id: int) -> None",
            "lineno": 1397,
            "docstring": null
          },
          {
            "name": "_summarise_batch",
            "signature": "(self, batch: ReplayBatch, batch_index: int) -> dict[str, float]",
            "lineno": 1405,
            "docstring": null
          },
          {
            "name": "build_replay_dataset",
            "signature": "(self, config: ReplayDatasetConfig) -> ReplayDataset",
            "lineno": 1415,
            "docstring": null
          },
          {
            "name": "build_policy_network",
            "signature": "(self, feature_dim: int, map_shape: tuple[int, int, int], action_dim: int, hidden_dim: int | None = None) -> ConflictAwarePolicyNetwork",
            "lineno": 1418,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "_softmax",
        "lineno": 54,
        "signature": "(logits: np.ndarray) -> np.ndarray",
        "docstring": null
      },
      {
        "name": "_pretty_action",
        "lineno": 66,
        "signature": "(action_repr: str) -> str",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "PPO_TELEMETRY_VERSION",
        "value": "1.2",
        "lineno": 48
      },
      {
        "name": "ANNEAL_BC_MIN_DEFAULT",
        "value": "0.9",
        "lineno": 49
      },
      {
        "name": "ANNEAL_LOSS_TOLERANCE_DEFAULT",
        "value": "0.1",
        "lineno": 50
      },
      {
        "name": "ANNEAL_QUEUE_TOLERANCE_DEFAULT",
        "value": "0.15",
        "lineno": 51
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 1435
  },
  {
    "path": "src/townlet/policy/scenario_utils.py",
    "module": "src.townlet.policy.scenario_utils",
    "docstring": "Helpers for applying scenario initialisation to simulation loops.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "typing.Any"
      ],
      "external": [],
      "internal": [
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.policy.behavior.AgentIntent",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [
      {
        "name": "ScenarioBehavior",
        "lineno": 78,
        "bases": [],
        "decorators": [],
        "docstring": "Wraps an existing behavior controller with scripted schedules.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, base_behavior, schedules: dict[str, list[AgentIntent]]) -> None",
            "lineno": 81,
            "docstring": null
          },
          {
            "name": "decide",
            "signature": "(self, world, agent_id)",
            "lineno": 86,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "apply_scenario",
        "lineno": 12,
        "signature": "(loop: SimulationLoop, scenario: dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "seed_default_agents",
        "lineno": 58,
        "signature": "(loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "has_agents",
        "lineno": 74,
        "signature": "(loop: SimulationLoop) -> bool",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 93
  },
  {
    "path": "src/townlet/policy/scripted.py",
    "module": "src.townlet.policy.scripted",
    "docstring": "Simple scripted policy helpers for trajectory capture.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "dataclasses.dataclass"
      ],
      "external": [],
      "internal": [
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [
      {
        "name": "ScriptedPolicy",
        "lineno": 10,
        "bases": [],
        "decorators": [],
        "docstring": "Base class for scripted policies used during BC trajectory capture.",
        "attrs": [
          {
            "name": "name",
            "annotation": "str",
            "value": "'scripted'",
            "lineno": 13
          }
        ],
        "methods": [
          {
            "name": "decide",
            "signature": "(self, world: WorldState, tick: int) -> dict[str, dict]",
            "lineno": 15,
            "docstring": null
          },
          {
            "name": "describe",
            "signature": "(self) -> str",
            "lineno": 20,
            "docstring": null
          },
          {
            "name": "trajectory_prefix",
            "signature": "(self) -> str",
            "lineno": 24,
            "docstring": null
          }
        ]
      },
      {
        "name": "IdlePolicy",
        "lineno": 29,
        "bases": [
          "ScriptedPolicy"
        ],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Default scripted policy: all agents wait every tick.",
        "attrs": [
          {
            "name": "name",
            "annotation": "str",
            "value": "'idle'",
            "lineno": 32
          }
        ],
        "methods": [
          {
            "name": "decide",
            "signature": "(self, world: WorldState, tick: int) -> dict[str, dict]",
            "lineno": 34,
            "docstring": null
          }
        ]
      },
      {
        "name": "ScriptedPolicyAdapter",
        "lineno": 47,
        "bases": [],
        "decorators": [],
        "docstring": "Adapter so SimulationLoop can call scripted policies.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, scripted_policy: ScriptedPolicy) -> None",
            "lineno": 50,
            "docstring": null
          },
          {
            "name": "decide",
            "signature": "(self, world: WorldState, tick: int) -> dict[str, dict]",
            "lineno": 59,
            "docstring": null
          },
          {
            "name": "post_step",
            "signature": "(self, rewards: dict[str, float], terminated: dict[str, bool]) -> None",
            "lineno": 84,
            "docstring": null
          },
          {
            "name": "flush_transitions",
            "signature": "(self, observations) -> None",
            "lineno": 93,
            "docstring": null
          },
          {
            "name": "collect_trajectory",
            "signature": "(self, *, clear: bool = False)",
            "lineno": 99,
            "docstring": null
          },
          {
            "name": "latest_policy_snapshot",
            "signature": "(self) -> dict[str, dict[str, object]]",
            "lineno": 104,
            "docstring": null
          },
          {
            "name": "possessed_agents",
            "signature": "(self) -> list[str]",
            "lineno": 107,
            "docstring": null
          },
          {
            "name": "consume_option_switch_counts",
            "signature": "(self) -> dict[str, int]",
            "lineno": 110,
            "docstring": null
          },
          {
            "name": "active_policy_hash",
            "signature": "(self) -> str | None",
            "lineno": 113,
            "docstring": null
          },
          {
            "name": "set_policy_hash",
            "signature": "(self, value: str | None) -> None",
            "lineno": 116,
            "docstring": null
          },
          {
            "name": "current_anneal_ratio",
            "signature": "(self) -> float | None",
            "lineno": 119,
            "docstring": null
          },
          {
            "name": "set_anneal_ratio",
            "signature": "(self, ratio: float | None) -> None",
            "lineno": 122,
            "docstring": null
          },
          {
            "name": "enable_anneal_blend",
            "signature": "(self, _: bool) -> None",
            "lineno": 125,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "get_scripted_policy",
        "lineno": 38,
        "signature": "(name: str) -> ScriptedPolicy",
        "docstring": "Factory for scripted policies; extend with richer behaviours as needed."
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 126
  },
  {
    "path": "src/townlet/rewards/__init__.py",
    "module": "src.townlet.rewards.__init__",
    "docstring": "Reward computation utilities.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "engine.RewardEngine"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 7
  },
  {
    "path": "src/townlet/rewards/engine.py",
    "module": "src.townlet.rewards.engine",
    "docstring": "Reward calculation guardrails and aggregation.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Iterable",
        "collections.abc.Mapping"
      ],
      "external": [],
      "internal": [
        "townlet.config.SimulationConfig",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [
      {
        "name": "RewardEngine",
        "lineno": 11,
        "bases": [],
        "decorators": [],
        "docstring": "Compute per-agent rewards with clipping and guardrails.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig) -> None",
            "lineno": 14,
            "docstring": null
          },
          {
            "name": "compute",
            "signature": "(self, world: WorldState, terminated: dict[str, bool], reasons: Mapping[str, str] | None = None) -> dict[str, float]",
            "lineno": 20,
            "docstring": null
          },
          {
            "name": "_consume_chat_events",
            "signature": "(self, world: WorldState) -> Iterable[dict[str, object]]",
            "lineno": 122,
            "docstring": null
          },
          {
            "name": "_social_rewards_enabled",
            "signature": "(self) -> bool",
            "lineno": 128,
            "docstring": null
          },
          {
            "name": "_compute_chat_rewards",
            "signature": "(self, world: WorldState, events: Iterable[dict[str, object]]) -> dict[str, float]",
            "lineno": 132,
            "docstring": null
          },
          {
            "name": "_needs_override",
            "signature": "(self, snapshot) -> bool",
            "lineno": 172,
            "docstring": null
          },
          {
            "name": "_is_blocked",
            "signature": "(self, agent_id: str, tick: int, window: int) -> bool",
            "lineno": 182,
            "docstring": null
          },
          {
            "name": "_prune_termination_blocks",
            "signature": "(self, tick: int, window: int) -> None",
            "lineno": 190,
            "docstring": null
          },
          {
            "name": "_compute_wage_bonus",
            "signature": "(self, agent_id: str, world: WorldState, wage_rate: float) -> float",
            "lineno": 202,
            "docstring": null
          },
          {
            "name": "_compute_punctuality_bonus",
            "signature": "(self, agent_id: str, world: WorldState, bonus_rate: float) -> float",
            "lineno": 215,
            "docstring": null
          },
          {
            "name": "_compute_terminal_penalty",
            "signature": "(self, agent_id: str, terminated: Mapping[str, bool], reasons: Mapping[str, str]) -> float",
            "lineno": 227,
            "docstring": null
          },
          {
            "name": "_reset_episode_totals",
            "signature": "(self, terminated: dict[str, bool], world: WorldState) -> None",
            "lineno": 242,
            "docstring": null
          },
          {
            "name": "latest_reward_breakdown",
            "signature": "(self) -> dict[str, dict[str, float]]",
            "lineno": 253,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 257
  },
  {
    "path": "src/townlet/scheduler/__init__.py",
    "module": "src.townlet.scheduler.__init__",
    "docstring": "Schedulers for perturbations and timers.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "perturbations.PerturbationScheduler",
        "perturbations.ScheduledPerturbation"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 7
  },
  {
    "path": "src/townlet/scheduler/perturbations.py",
    "module": "src.townlet.scheduler.perturbations",
    "docstring": "Perturbation scheduler scaffolding.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Iterable",
        "collections.abc.Mapping",
        "dataclasses.dataclass",
        "dataclasses.field",
        "random",
        "typing.Optional"
      ],
      "external": [],
      "internal": [
        "townlet.config.ArrangedMeetEventConfig",
        "townlet.config.BlackoutEventConfig",
        "townlet.config.OutageEventConfig",
        "townlet.config.PerturbationEventConfig",
        "townlet.config.PerturbationKind",
        "townlet.config.PerturbationSchedulerConfig",
        "townlet.config.PriceSpikeEventConfig",
        "townlet.config.SimulationConfig",
        "townlet.utils.decode_rng_state",
        "townlet.utils.encode_rng_state",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [
      {
        "name": "ScheduledPerturbation",
        "lineno": 25,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Represents a perturbation that is pending or active in the world.",
        "attrs": [
          {
            "name": "event_id",
            "annotation": "str",
            "value": null,
            "lineno": 28
          },
          {
            "name": "spec_name",
            "annotation": "str",
            "value": null,
            "lineno": 29
          },
          {
            "name": "kind",
            "annotation": "PerturbationKind",
            "value": null,
            "lineno": 30
          },
          {
            "name": "started_at",
            "annotation": "int",
            "value": null,
            "lineno": 31
          },
          {
            "name": "ends_at",
            "annotation": "int",
            "value": null,
            "lineno": 32
          },
          {
            "name": "payload",
            "annotation": "dict[str, object]",
            "value": "field(default_factory=dict)",
            "lineno": 33
          },
          {
            "name": "targets",
            "annotation": "list[str]",
            "value": "field(default_factory=list)",
            "lineno": 34
          }
        ],
        "methods": []
      },
      {
        "name": "PerturbationScheduler",
        "lineno": 37,
        "bases": [],
        "decorators": [],
        "docstring": "Injects bounded random events into the world.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig, *, rng: Optional[random.Random] = None) -> None",
            "lineno": 40,
            "docstring": null
          },
          {
            "name": "pending_count",
            "signature": "(self) -> int",
            "lineno": 63,
            "docstring": null
          },
          {
            "name": "active_count",
            "signature": "(self) -> int",
            "lineno": 66,
            "docstring": null
          },
          {
            "name": "tick",
            "signature": "(self, world: WorldState, current_tick: int) -> None",
            "lineno": 72,
            "docstring": null
          },
          {
            "name": "_expire_active",
            "signature": "(self, current_tick: int, world: WorldState) -> None",
            "lineno": 79,
            "docstring": null
          },
          {
            "name": "_expire_cooldowns",
            "signature": "(self, current_tick: int) -> None",
            "lineno": 88,
            "docstring": null
          },
          {
            "name": "_expire_window_events",
            "signature": "(self, current_tick: int) -> None",
            "lineno": 100,
            "docstring": null
          },
          {
            "name": "_drain_pending",
            "signature": "(self, world: WorldState, current_tick: int) -> None",
            "lineno": 110,
            "docstring": null
          },
          {
            "name": "_maybe_schedule",
            "signature": "(self, world: WorldState, current_tick: int) -> None",
            "lineno": 121,
            "docstring": null
          },
          {
            "name": "schedule_manual",
            "signature": "(self, world: WorldState, spec_name: str, current_tick: int, *, starts_in: int = 0, duration: int | None = None, targets: Optional[list[str]] = None, payload_overrides: Optional[dict[str, object]] = None) -> ScheduledPerturbation",
            "lineno": 147,
            "docstring": null
          },
          {
            "name": "cancel_event",
            "signature": "(self, world: WorldState, event_id: str) -> bool",
            "lineno": 180,
            "docstring": null
          },
          {
            "name": "_activate",
            "signature": "(self, world: WorldState, event: ScheduledPerturbation) -> None",
            "lineno": 209,
            "docstring": null
          },
          {
            "name": "_apply_event",
            "signature": "(self, world: WorldState, event: ScheduledPerturbation) -> None",
            "lineno": 237,
            "docstring": null
          },
          {
            "name": "_on_event_concluded",
            "signature": "(self, world: WorldState, event: ScheduledPerturbation) -> None",
            "lineno": 279,
            "docstring": null
          },
          {
            "name": "seed",
            "signature": "(self, value: int) -> None",
            "lineno": 291,
            "docstring": null
          },
          {
            "name": "_can_fire_spec",
            "signature": "(self, name: str, spec: PerturbationEventConfig, current_tick: int) -> bool",
            "lineno": 297,
            "docstring": null
          },
          {
            "name": "_per_tick_probability",
            "signature": "(self, spec: PerturbationEventConfig) -> float",
            "lineno": 321,
            "docstring": null
          },
          {
            "name": "_generate_event",
            "signature": "(self, name: str, spec: PerturbationEventConfig, current_tick: int, world: WorldState, *, duration_override: int | None = None, targets_override: Optional[list[str]] = None, payload_override: Optional[dict[str, object]] = None) -> Optional[ScheduledPerturbation]",
            "lineno": 324,
            "docstring": null
          },
          {
            "name": "_eligible_agents",
            "signature": "(self, world: WorldState, current_tick: int) -> list[str]",
            "lineno": 386,
            "docstring": null
          },
          {
            "name": "enqueue",
            "signature": "(self, events: Iterable[ScheduledPerturbation | Mapping[str, object]]) -> None",
            "lineno": 397,
            "docstring": null
          },
          {
            "name": "pending",
            "signature": "(self) -> list[ScheduledPerturbation]",
            "lineno": 408,
            "docstring": null
          },
          {
            "name": "active",
            "signature": "(self) -> dict[str, ScheduledPerturbation]",
            "lineno": 412,
            "docstring": null
          },
          {
            "name": "export_state",
            "signature": "(self) -> dict[str, object]",
            "lineno": 418,
            "docstring": null
          },
          {
            "name": "import_state",
            "signature": "(self, payload: dict[str, object]) -> None",
            "lineno": 432,
            "docstring": null
          },
          {
            "name": "reset_state",
            "signature": "(self) -> None",
            "lineno": 478,
            "docstring": null
          },
          {
            "name": "allocate_event_id",
            "signature": "(self) -> str",
            "lineno": 489,
            "docstring": null
          },
          {
            "name": "spec_for",
            "signature": "(self, name: str) -> Optional[PerturbationEventConfig]",
            "lineno": 494,
            "docstring": null
          },
          {
            "name": "rng_state",
            "signature": "(self) -> tuple",
            "lineno": 497,
            "docstring": null
          },
          {
            "name": "set_rng_state",
            "signature": "(self, state: tuple) -> None",
            "lineno": 500,
            "docstring": null
          },
          {
            "name": "rng",
            "signature": "(self) -> random.Random",
            "lineno": 504,
            "docstring": null
          },
          {
            "name": "_coerce_event",
            "signature": "(self, data: Mapping[str, object]) -> ScheduledPerturbation",
            "lineno": 507,
            "docstring": null
          },
          {
            "name": "_serialize_event",
            "signature": "(event: ScheduledPerturbation) -> dict[str, object]",
            "lineno": 543,
            "docstring": null
          },
          {
            "name": "serialize_event",
            "signature": "(self, event: ScheduledPerturbation) -> dict[str, object]",
            "lineno": 554,
            "docstring": null
          },
          {
            "name": "latest_state",
            "signature": "(self) -> dict[str, object]",
            "lineno": 557,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 568
  },
  {
    "path": "src/townlet/snapshots/__init__.py",
    "module": "src.townlet.snapshots.__init__",
    "docstring": "Snapshot and restore helpers.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "migrations.clear_registry",
        "migrations.register_migration",
        "migrations.registry",
        "state.SnapshotManager",
        "state.SnapshotState",
        "state.apply_snapshot_to_telemetry",
        "state.apply_snapshot_to_world",
        "state.snapshot_from_world"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 25
  },
  {
    "path": "src/townlet/snapshots/migrations.py",
    "module": "src.townlet.snapshots.migrations",
    "docstring": "Snapshot migration registry and helpers.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Callable",
        "collections.abc.Iterable",
        "collections.deque",
        "dataclasses.dataclass",
        "typing.TYPE_CHECKING"
      ],
      "external": [],
      "internal": [
        "townlet.config.SimulationConfig",
        "townlet.snapshots.state.SnapshotState"
      ]
    },
    "classes": [
      {
        "name": "MigrationNotFoundError",
        "lineno": 19,
        "bases": [
          "Exception"
        ],
        "decorators": [],
        "docstring": "Raised when no migration path exists between config identifiers.",
        "attrs": [],
        "methods": []
      },
      {
        "name": "MigrationExecutionError",
        "lineno": 23,
        "bases": [
          "Exception"
        ],
        "decorators": [],
        "docstring": "Raised when a migration handler fails or leaves the snapshot unchanged.",
        "attrs": [],
        "methods": []
      },
      {
        "name": "MigrationEdge",
        "lineno": 28,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "source",
            "annotation": "str",
            "value": null,
            "lineno": 29
          },
          {
            "name": "target",
            "annotation": "str",
            "value": null,
            "lineno": 30
          },
          {
            "name": "handler",
            "annotation": "MigrationHandler",
            "value": null,
            "lineno": 31
          }
        ],
        "methods": [
          {
            "name": "identifier",
            "signature": "(self) -> str",
            "lineno": 34,
            "docstring": null
          }
        ]
      },
      {
        "name": "SnapshotMigrationRegistry",
        "lineno": 40,
        "bases": [],
        "decorators": [],
        "docstring": "Maintains registered snapshot migrations keyed by config identifiers.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self) -> None",
            "lineno": 43,
            "docstring": null
          },
          {
            "name": "register",
            "signature": "(self, from_config: str, to_config: str, handler: MigrationHandler) -> None",
            "lineno": 46,
            "docstring": null
          },
          {
            "name": "clear",
            "signature": "(self) -> None",
            "lineno": 54,
            "docstring": null
          },
          {
            "name": "_neighbours",
            "signature": "(self, node: str) -> Iterable[MigrationEdge]",
            "lineno": 57,
            "docstring": null
          },
          {
            "name": "find_path",
            "signature": "(self, start: str, goal: str) -> list[MigrationEdge]",
            "lineno": 60,
            "docstring": null
          },
          {
            "name": "apply_path",
            "signature": "(self, path: list[MigrationEdge], state: 'SnapshotState', config: 'SimulationConfig') -> tuple['SnapshotState', list[str]]",
            "lineno": 81,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "register_migration",
        "lineno": 110,
        "signature": "(from_config: str, to_config: str, handler: MigrationHandler) -> None",
        "docstring": "Register a snapshot migration handler."
      },
      {
        "name": "clear_registry",
        "lineno": 118,
        "signature": "() -> None",
        "docstring": "Reset registry (intended for test teardown)."
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 121
  },
  {
    "path": "src/townlet/snapshots/state.py",
    "module": "src.townlet.snapshots.state",
    "docstring": "Snapshot persistence scaffolding.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Mapping",
        "dataclasses.dataclass",
        "dataclasses.field",
        "json",
        "logging",
        "pathlib.Path",
        "random",
        "typing.Optional",
        "typing.TYPE_CHECKING"
      ],
      "external": [],
      "internal": [
        "townlet.agents.models.Personality",
        "townlet.config.SimulationConfig",
        "townlet.lifecycle.manager.LifecycleManager",
        "townlet.scheduler.perturbations.PerturbationScheduler",
        "townlet.snapshots.migrations.MigrationExecutionError",
        "townlet.snapshots.migrations.MigrationNotFoundError",
        "townlet.snapshots.migrations.migration_registry",
        "townlet.stability.monitor.StabilityMonitor",
        "townlet.stability.promotion.PromotionManager",
        "townlet.telemetry.publisher.TelemetryPublisher",
        "townlet.utils.decode_rng_state",
        "townlet.utils.encode_rng",
        "townlet.utils.encode_rng_state",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.InteractiveObject",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [
      {
        "name": "SnapshotState",
        "lineno": 50,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "config_id",
            "annotation": "str",
            "value": null,
            "lineno": 51
          },
          {
            "name": "tick",
            "annotation": "int",
            "value": null,
            "lineno": 52
          },
          {
            "name": "agents",
            "annotation": "dict[str, dict[str, object]]",
            "value": "field(default_factory=dict)",
            "lineno": 53
          },
          {
            "name": "objects",
            "annotation": "dict[str, dict[str, object]]",
            "value": "field(default_factory=dict)",
            "lineno": 54
          },
          {
            "name": "queues",
            "annotation": "dict[str, object]",
            "value": "field(default_factory=dict)",
            "lineno": 55
          },
          {
            "name": "embeddings",
            "annotation": "dict[str, object]",
            "value": "field(default_factory=dict)",
            "lineno": 56
          },
          {
            "name": "employment",
            "annotation": "dict[str, object]",
            "value": "field(default_factory=dict)",
            "lineno": 57
          },
          {
            "name": "lifecycle",
            "annotation": "dict[str, object]",
            "value": "field(default_factory=dict)",
            "lineno": 58
          },
          {
            "name": "rng_state",
            "annotation": "Optional[str]",
            "value": "None",
            "lineno": 59
          },
          {
            "name": "rng_streams",
            "annotation": "dict[str, str]",
            "value": "field(default_factory=dict)",
            "lineno": 60
          },
          {
            "name": "telemetry",
            "annotation": "dict[str, object]",
            "value": "field(default_factory=dict)",
            "lineno": 61
          },
          {
            "name": "console_buffer",
            "annotation": "list[object]",
            "value": "field(default_factory=list)",
            "lineno": 62
          },
          {
            "name": "perturbations",
            "annotation": "dict[str, object]",
            "value": "field(default_factory=dict)",
            "lineno": 63
          },
          {
            "name": "relationships",
            "annotation": "dict[str, dict[str, dict[str, float]]]",
            "value": "field(default_factory=dict)",
            "lineno": 64
          },
          {
            "name": "stability",
            "annotation": "dict[str, object]",
            "value": "field(default_factory=dict)",
            "lineno": 65
          },
          {
            "name": "promotion",
            "annotation": "dict[str, object]",
            "value": "field(default_factory=dict)",
            "lineno": 66
          },
          {
            "name": "identity",
            "annotation": "dict[str, object]",
            "value": "field(default_factory=dict)",
            "lineno": 67
          },
          {
            "name": "migrations",
            "annotation": "dict[str, object]",
            "value": "field(default_factory=lambda: {'applied': [], 'required': []})",
            "lineno": 68
          }
        ],
        "methods": [
          {
            "name": "as_dict",
            "signature": "(self) -> dict[str, object]",
            "lineno": 72,
            "docstring": null
          },
          {
            "name": "from_dict",
            "signature": "(cls, payload: Mapping[str, object]) -> 'SnapshotState'",
            "lineno": 102,
            "docstring": null
          }
        ]
      },
      {
        "name": "SnapshotManager",
        "lineno": 498,
        "bases": [],
        "decorators": [],
        "docstring": "Handles save/load of simulation state and RNG streams.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, root: Path) -> None",
            "lineno": 501,
            "docstring": null
          },
          {
            "name": "save",
            "signature": "(self, state: SnapshotState) -> Path",
            "lineno": 504,
            "docstring": null
          },
          {
            "name": "load",
            "signature": "(self, path: Path, config: SimulationConfig, *, allow_migration: bool | None = None, allow_downgrade: bool | None = None, require_exact_config: bool | None = None) -> SnapshotState",
            "lineno": 516,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "_parse_version",
        "lineno": 34,
        "signature": "(value: str) -> tuple[int, ...]",
        "docstring": null
      },
      {
        "name": "snapshot_from_world",
        "lineno": 251,
        "signature": "(config: SimulationConfig, world: WorldState, *, lifecycle: Optional[LifecycleManager] = None, telemetry: Optional['TelemetryPublisher'] = None, perturbations: Optional[PerturbationScheduler] = None, stability: Optional['StabilityMonitor'] = None, promotion: Optional['PromotionManager'] = None, rng_streams: Optional[Mapping[str, random.Random]] = None, identity: Optional[Mapping[str, object]] = None) -> SnapshotState",
        "docstring": "Capture the current world state into a snapshot payload."
      },
      {
        "name": "apply_snapshot_to_world",
        "lineno": 381,
        "signature": "(world: WorldState, snapshot: SnapshotState, *, lifecycle: Optional[LifecycleManager] = None) -> None",
        "docstring": "Restore world, queue, embeddings, and lifecycle state from snapshot."
      },
      {
        "name": "apply_snapshot_to_telemetry",
        "lineno": 478,
        "signature": "(telemetry: 'TelemetryPublisher', snapshot: SnapshotState) -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "SNAPSHOT_SCHEMA_VERSION",
        "value": "'1.5'",
        "lineno": 31
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 625
  },
  {
    "path": "src/townlet/stability/__init__.py",
    "module": "src.townlet.stability.__init__",
    "docstring": "Stability guardrails.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "monitor.StabilityMonitor",
        "promotion.PromotionManager"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 8
  },
  {
    "path": "src/townlet/stability/monitor.py",
    "module": "src.townlet.stability.monitor",
    "docstring": "Monitors KPIs and promotion guardrails.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Iterable",
        "collections.deque"
      ],
      "external": [],
      "internal": [
        "townlet.config.SimulationConfig"
      ]
    },
    "classes": [
      {
        "name": "StabilityMonitor",
        "lineno": 11,
        "bases": [],
        "decorators": [],
        "docstring": "Tracks rolling metrics and canaries.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig) -> None",
            "lineno": 14,
            "docstring": null
          },
          {
            "name": "_promotion_snapshot",
            "signature": "(self) -> dict[str, object]",
            "lineno": 51,
            "docstring": null
          },
          {
            "name": "_finalise_promotion_window",
            "signature": "(self, window_end: int) -> None",
            "lineno": 64,
            "docstring": null
          },
          {
            "name": "_update_promotion_window",
            "signature": "(self, tick: int, alerts: Iterable[str]) -> None",
            "lineno": 79,
            "docstring": null
          },
          {
            "name": "track",
            "signature": "(self, *, tick: int, rewards: dict[str, float], terminated: dict[str, bool], queue_metrics: dict[str, int] | None = None, embedding_metrics: dict[str, float] | None = None, job_snapshot: dict[str, dict[str, object]] | None = None, events: Iterable[dict[str, object]] | None = None, employment_metrics: dict[str, object] | None = None, hunger_levels: dict[str, float] | None = None, option_switch_counts: dict[str, int] | None = None, rivalry_events: Iterable[dict[str, object]] | None = None) -> None",
            "lineno": 89,
            "docstring": null
          },
          {
            "name": "latest_metrics",
            "signature": "(self) -> dict[str, object]",
            "lineno": 218,
            "docstring": null
          },
          {
            "name": "export_state",
            "signature": "(self) -> dict[str, object]",
            "lineno": 221,
            "docstring": null
          },
          {
            "name": "import_state",
            "signature": "(self, payload: dict[str, object]) -> None",
            "lineno": 241,
            "docstring": null
          },
          {
            "name": "reset_state",
            "signature": "(self) -> None",
            "lineno": 309,
            "docstring": null
          },
          {
            "name": "_update_starvation_state",
            "signature": "(self, *, tick: int, hunger_levels: dict[str, float] | None, terminated: dict[str, bool]) -> int",
            "lineno": 329,
            "docstring": null
          },
          {
            "name": "_update_reward_samples",
            "signature": "(self, *, tick: int, rewards: dict[str, float]) -> tuple[float | None, float | None, int]",
            "lineno": 364,
            "docstring": null
          },
          {
            "name": "_threshold_snapshot",
            "signature": "(self) -> dict[str, object]",
            "lineno": 388,
            "docstring": null
          },
          {
            "name": "_update_option_samples",
            "signature": "(self, *, tick: int, option_switch_counts: dict[str, int] | None, active_agent_count: int) -> float | None",
            "lineno": 397,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 420
  },
  {
    "path": "src/townlet/stability/promotion.py",
    "module": "src.townlet.stability.promotion",
    "docstring": "Promotion gate state tracking.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Mapping",
        "collections.deque",
        "json",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.SimulationConfig"
      ]
    },
    "classes": [
      {
        "name": "PromotionManager",
        "lineno": 13,
        "bases": [],
        "decorators": [],
        "docstring": "Tracks promotion readiness and release/shadow state.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig, log_path: Path | None = None) -> None",
            "lineno": 16,
            "docstring": null
          },
          {
            "name": "update_from_metrics",
            "signature": "(self, metrics: Mapping[str, object], *, tick: int) -> None",
            "lineno": 39,
            "docstring": "Update state based on the latest stability metrics."
          },
          {
            "name": "mark_promoted",
            "signature": "(self, *, tick: int, metadata: Mapping[str, object] | None = None) -> None",
            "lineno": 62,
            "docstring": "Record a promotion event and update release metadata."
          },
          {
            "name": "register_rollback",
            "signature": "(self, *, tick: int, metadata: Mapping[str, object] | None = None) -> None",
            "lineno": 86,
            "docstring": "Record a rollback event and return to monitoring state."
          },
          {
            "name": "record_manual_swap",
            "signature": "(self, *, tick: int, metadata: Mapping[str, object]) -> dict[str, object]",
            "lineno": 110,
            "docstring": "Record a manual policy swap without altering candidate readiness."
          },
          {
            "name": "set_candidate_metadata",
            "signature": "(self, metadata: Mapping[str, object] | None) -> None",
            "lineno": 136,
            "docstring": null
          },
          {
            "name": "snapshot",
            "signature": "(self) -> dict[str, object]",
            "lineno": 139,
            "docstring": null
          },
          {
            "name": "export_state",
            "signature": "(self) -> dict[str, object]",
            "lineno": 156,
            "docstring": null
          },
          {
            "name": "import_state",
            "signature": "(self, payload: Mapping[str, object]) -> None",
            "lineno": 159,
            "docstring": null
          },
          {
            "name": "reset",
            "signature": "(self) -> None",
            "lineno": 189,
            "docstring": null
          },
          {
            "name": "_log_event",
            "signature": "(self, record: Mapping[str, object]) -> None",
            "lineno": 200,
            "docstring": null
          },
          {
            "name": "_normalise_release",
            "signature": "(self, metadata: Mapping[str, object] | None) -> dict[str, object]",
            "lineno": 215,
            "docstring": null
          },
          {
            "name": "_resolve_rollback_target",
            "signature": "(self, metadata: Mapping[str, object] | None) -> dict[str, object]",
            "lineno": 227,
            "docstring": null
          },
          {
            "name": "_latest_promoted_release",
            "signature": "(self) -> dict[str, object] | None",
            "lineno": 241,
            "docstring": null
          },
          {
            "name": "state",
            "signature": "(self) -> str",
            "lineno": 254,
            "docstring": null
          },
          {
            "name": "candidate_ready",
            "signature": "(self) -> bool",
            "lineno": 258,
            "docstring": null
          },
          {
            "name": "pass_streak",
            "signature": "(self) -> int",
            "lineno": 262,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 263
  },
  {
    "path": "src/townlet/telemetry/__init__.py",
    "module": "src.townlet.telemetry.__init__",
    "docstring": "Telemetry publication surfaces.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "publisher.TelemetryPublisher"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 7
  },
  {
    "path": "src/townlet/telemetry/narration.py",
    "module": "src.townlet.telemetry.narration",
    "docstring": "Narration throttling utilities.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.deque"
      ],
      "external": [],
      "internal": [
        "townlet.config.NarrationThrottleConfig"
      ]
    },
    "classes": [
      {
        "name": "NarrationRateLimiter",
        "lineno": 10,
        "bases": [],
        "decorators": [],
        "docstring": "Apply global and per-category narration cooldowns with dedupe.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: NarrationThrottleConfig) -> None",
            "lineno": 13,
            "docstring": null
          },
          {
            "name": "begin_tick",
            "signature": "(self, tick: int) -> None",
            "lineno": 21,
            "docstring": null
          },
          {
            "name": "allow",
            "signature": "(self, category: str, *, message: str, priority: bool = False, dedupe_key: str | None = None) -> bool",
            "lineno": 26,
            "docstring": "Return True if a narration may be emitted for the given category."
          },
          {
            "name": "export_state",
            "signature": "(self) -> dict[str, object]",
            "lineno": 61,
            "docstring": null
          },
          {
            "name": "import_state",
            "signature": "(self, payload: dict[str, object]) -> None",
            "lineno": 69,
            "docstring": null
          },
          {
            "name": "_expire_recent_entries",
            "signature": "(self) -> None",
            "lineno": 88,
            "docstring": null
          },
          {
            "name": "_expire_window",
            "signature": "(self) -> None",
            "lineno": 100,
            "docstring": null
          },
          {
            "name": "_check_global_cooldown",
            "signature": "(self) -> bool",
            "lineno": 108,
            "docstring": null
          },
          {
            "name": "_check_category_cooldown",
            "signature": "(self, category: str) -> bool",
            "lineno": 114,
            "docstring": null
          },
          {
            "name": "_check_window_limit",
            "signature": "(self) -> bool",
            "lineno": 121,
            "docstring": null
          },
          {
            "name": "_record_emission",
            "signature": "(self, category: str, dedupe_key: str) -> None",
            "lineno": 127,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 133
  },
  {
    "path": "src/townlet/telemetry/publisher.py",
    "module": "src.townlet.telemetry.publisher",
    "docstring": "Telemetry pipelines and console bridge.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Callable",
        "collections.abc.Iterable",
        "collections.abc.Mapping",
        "collections.deque",
        "json",
        "logging",
        "pathlib.Path",
        "threading",
        "time",
        "typing.Any",
        "typing.TYPE_CHECKING"
      ],
      "external": [],
      "internal": [
        "townlet.config.SimulationConfig",
        "townlet.console.command.ConsoleCommandResult",
        "townlet.telemetry.narration.NarrationRateLimiter",
        "townlet.telemetry.transport.TelemetryTransportError",
        "townlet.telemetry.transport.TransportBuffer",
        "townlet.telemetry.transport.create_transport",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [
      {
        "name": "TelemetryPublisher",
        "lineno": 29,
        "bases": [],
        "decorators": [],
        "docstring": "Publishes observer snapshots and consumes console commands.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig) -> None",
            "lineno": 32,
            "docstring": null
          },
          {
            "name": "queue_console_command",
            "signature": "(self, command: object) -> None",
            "lineno": 110,
            "docstring": null
          },
          {
            "name": "drain_console_buffer",
            "signature": "(self) -> Iterable[object]",
            "lineno": 113,
            "docstring": null
          },
          {
            "name": "export_state",
            "signature": "(self) -> dict[str, object]",
            "lineno": 118,
            "docstring": null
          },
          {
            "name": "import_state",
            "signature": "(self, payload: dict[str, object]) -> None",
            "lineno": 174,
            "docstring": null
          },
          {
            "name": "export_console_buffer",
            "signature": "(self) -> list[object]",
            "lineno": 362,
            "docstring": null
          },
          {
            "name": "import_console_buffer",
            "signature": "(self, buffer: Iterable[object]) -> None",
            "lineno": 365,
            "docstring": null
          },
          {
            "name": "record_console_results",
            "signature": "(self, results: Iterable['ConsoleCommandResult']) -> None",
            "lineno": 368,
            "docstring": null
          },
          {
            "name": "latest_console_results",
            "signature": "(self) -> list[dict[str, Any]]",
            "lineno": 377,
            "docstring": null
          },
          {
            "name": "console_history",
            "signature": "(self) -> list[dict[str, Any]]",
            "lineno": 380,
            "docstring": null
          },
          {
            "name": "record_possessed_agents",
            "signature": "(self, agents: Iterable[str]) -> None",
            "lineno": 383,
            "docstring": null
          },
          {
            "name": "latest_possessed_agents",
            "signature": "(self) -> list[str]",
            "lineno": 386,
            "docstring": null
          },
          {
            "name": "latest_precondition_failures",
            "signature": "(self) -> list[dict[str, object]]",
            "lineno": 389,
            "docstring": null
          },
          {
            "name": "latest_transport_status",
            "signature": "(self) -> dict[str, object]",
            "lineno": 392,
            "docstring": "Return transport health and backlog counters for observability."
          },
          {
            "name": "record_health_metrics",
            "signature": "(self, metrics: Mapping[str, object]) -> None",
            "lineno": 397,
            "docstring": null
          },
          {
            "name": "latest_health_status",
            "signature": "(self) -> dict[str, object]",
            "lineno": 400,
            "docstring": null
          },
          {
            "name": "_build_transport_client",
            "signature": "(self)",
            "lineno": 403,
            "docstring": null
          },
          {
            "name": "_reset_transport_client",
            "signature": "(self) -> None",
            "lineno": 418,
            "docstring": null
          },
          {
            "name": "_send_with_retry",
            "signature": "(self, payload: bytes, tick: int) -> bool",
            "lineno": 427,
            "docstring": null
          },
          {
            "name": "_flush_transport_buffer",
            "signature": "(self, tick: int) -> None",
            "lineno": 461,
            "docstring": null
          },
          {
            "name": "_flush_loop",
            "signature": "(self) -> None",
            "lineno": 499,
            "docstring": null
          },
          {
            "name": "_enqueue_stream_payload",
            "signature": "(self, payload: Mapping[str, Any], *, tick: int) -> None",
            "lineno": 516,
            "docstring": null
          },
          {
            "name": "_build_stream_payload",
            "signature": "(self, tick: int) -> dict[str, Any]",
            "lineno": 548,
            "docstring": null
          },
          {
            "name": "close",
            "signature": "(self) -> None",
            "lineno": 591,
            "docstring": null
          },
          {
            "name": "stop_worker",
            "signature": "(self, *, wait: bool = True, timeout: float = 2.0) -> None",
            "lineno": 603,
            "docstring": "Stop the background flush worker without closing transports."
          },
          {
            "name": "publish_tick",
            "signature": "(self, *, tick: int, world: WorldState, observations: dict[str, object], rewards: dict[str, float], events: Iterable[dict[str, object]] | None = None, policy_snapshot: Mapping[str, Mapping[str, object]] | None = None, kpi_history: bool = False, reward_breakdown: Mapping[str, Mapping[str, float]] | None = None, stability_inputs: Mapping[str, object] | None = None, perturbations: Mapping[str, object] | None = None, policy_identity: Mapping[str, object] | None = None, possessed_agents: Iterable[str] | None = None) -> None",
            "lineno": 612,
            "docstring": null
          },
          {
            "name": "latest_queue_metrics",
            "signature": "(self) -> dict[str, int] | None",
            "lineno": 802,
            "docstring": "Expose the most recent queue-related telemetry counters."
          },
          {
            "name": "latest_queue_history",
            "signature": "(self) -> list[dict[str, object]]",
            "lineno": 808,
            "docstring": null
          },
          {
            "name": "latest_rivalry_events",
            "signature": "(self) -> list[dict[str, object]]",
            "lineno": 813,
            "docstring": null
          },
          {
            "name": "update_anneal_status",
            "signature": "(self, status: Mapping[str, object] | None) -> None",
            "lineno": 818,
            "docstring": "Record the latest anneal status payload for observer dashboards."
          },
          {
            "name": "kpi_history",
            "signature": "(self) -> dict[str, list[float]]",
            "lineno": 822,
            "docstring": null
          },
          {
            "name": "latest_conflict_snapshot",
            "signature": "(self) -> dict[str, object]",
            "lineno": 825,
            "docstring": "Return the conflict-focused telemetry payload (queues + rivalry)."
          },
          {
            "name": "latest_affordance_manifest",
            "signature": "(self) -> dict[str, object]",
            "lineno": 858,
            "docstring": "Expose the most recent affordance manifest metadata."
          },
          {
            "name": "latest_reward_breakdown",
            "signature": "(self) -> dict[str, dict[str, float]]",
            "lineno": 863,
            "docstring": null
          },
          {
            "name": "latest_stability_inputs",
            "signature": "(self) -> dict[str, object]",
            "lineno": 868,
            "docstring": null
          },
          {
            "name": "record_stability_metrics",
            "signature": "(self, metrics: Mapping[str, object]) -> None",
            "lineno": 887,
            "docstring": null
          },
          {
            "name": "latest_stability_metrics",
            "signature": "(self) -> dict[str, object]",
            "lineno": 890,
            "docstring": null
          },
          {
            "name": "latest_promotion_state",
            "signature": "(self) -> dict[str, object] | None",
            "lineno": 893,
            "docstring": null
          },
          {
            "name": "_append_console_audit",
            "signature": "(self, payload: Mapping[str, Any]) -> None",
            "lineno": 902,
            "docstring": null
          },
          {
            "name": "latest_stability_alerts",
            "signature": "(self) -> list[str]",
            "lineno": 910,
            "docstring": null
          },
          {
            "name": "latest_perturbations",
            "signature": "(self) -> dict[str, object]",
            "lineno": 917,
            "docstring": null
          },
          {
            "name": "update_policy_identity",
            "signature": "(self, identity: Mapping[str, object] | None) -> None",
            "lineno": 930,
            "docstring": null
          },
          {
            "name": "latest_policy_identity",
            "signature": "(self) -> dict[str, object] | None",
            "lineno": 942,
            "docstring": null
          },
          {
            "name": "record_snapshot_migrations",
            "signature": "(self, applied: Iterable[str]) -> None",
            "lineno": 947,
            "docstring": null
          },
          {
            "name": "latest_snapshot_migrations",
            "signature": "(self) -> list[str]",
            "lineno": 950,
            "docstring": null
          },
          {
            "name": "_normalize_perturbations_payload",
            "signature": "(self, payload: Mapping[str, object]) -> dict[str, object]",
            "lineno": 953,
            "docstring": null
          },
          {
            "name": "latest_policy_snapshot",
            "signature": "(self) -> dict[str, dict[str, object]]",
            "lineno": 990,
            "docstring": null
          },
          {
            "name": "latest_anneal_status",
            "signature": "(self) -> dict[str, object] | None",
            "lineno": 993,
            "docstring": null
          },
          {
            "name": "latest_relationship_metrics",
            "signature": "(self) -> dict[str, object] | None",
            "lineno": 998,
            "docstring": "Expose relationship churn payload captured during publish."
          },
          {
            "name": "latest_relationship_snapshot",
            "signature": "(self) -> dict[str, dict[str, dict[str, float]]]",
            "lineno": 1008,
            "docstring": null
          },
          {
            "name": "latest_relationship_updates",
            "signature": "(self) -> list[dict[str, object]]",
            "lineno": 1011,
            "docstring": null
          },
          {
            "name": "update_relationship_metrics",
            "signature": "(self, payload: dict[str, object]) -> None",
            "lineno": 1014,
            "docstring": "Allow external callers to seed the latest relationship metrics."
          },
          {
            "name": "latest_relationship_overlay",
            "signature": "(self) -> dict[str, list[dict[str, object]]]",
            "lineno": 1018,
            "docstring": null
          },
          {
            "name": "latest_narrations",
            "signature": "(self) -> list[dict[str, object]]",
            "lineno": 1024,
            "docstring": "Expose narration entries emitted during the latest publish call."
          },
          {
            "name": "latest_embedding_metrics",
            "signature": "(self) -> dict[str, float] | None",
            "lineno": 1029,
            "docstring": "Expose embedding allocator counters."
          },
          {
            "name": "latest_events",
            "signature": "(self) -> Iterable[dict[str, object]]",
            "lineno": 1035,
            "docstring": "Return the most recent event batch."
          },
          {
            "name": "latest_narration_state",
            "signature": "(self) -> dict[str, object]",
            "lineno": 1039,
            "docstring": "Return the narration limiter state for snapshot export."
          },
          {
            "name": "register_event_subscriber",
            "signature": "(self, subscriber: Callable[[list[dict[str, object]]], None]) -> None",
            "lineno": 1044,
            "docstring": "Register a callback to receive each tick's event batch."
          },
          {
            "name": "latest_job_snapshot",
            "signature": "(self) -> dict[str, dict[str, object]]",
            "lineno": 1050,
            "docstring": null
          },
          {
            "name": "latest_economy_snapshot",
            "signature": "(self) -> dict[str, dict[str, object]]",
            "lineno": 1053,
            "docstring": null
          },
          {
            "name": "latest_employment_metrics",
            "signature": "(self) -> dict[str, object]",
            "lineno": 1056,
            "docstring": null
          },
          {
            "name": "schema",
            "signature": "(self) -> str",
            "lineno": 1059,
            "docstring": null
          },
          {
            "name": "_capture_relationship_snapshot",
            "signature": "(self, world: WorldState) -> dict[str, dict[str, dict[str, float]]]",
            "lineno": 1062,
            "docstring": null
          },
          {
            "name": "_compute_relationship_updates",
            "signature": "(self, previous: dict[str, dict[str, dict[str, float]]], current: dict[str, dict[str, dict[str, float]]]) -> list[dict[str, object]]",
            "lineno": 1087,
            "docstring": null
          },
          {
            "name": "_build_relationship_overlay",
            "signature": "(self) -> dict[str, list[dict[str, object]]]",
            "lineno": 1166,
            "docstring": null
          },
          {
            "name": "_process_narrations",
            "signature": "(self, events: Iterable[dict[str, object]], tick: int) -> None",
            "lineno": 1206,
            "docstring": null
          },
          {
            "name": "_handle_queue_conflict_narration",
            "signature": "(self, event: dict[str, object], tick: int) -> None",
            "lineno": 1222,
            "docstring": null
          },
          {
            "name": "_handle_shower_power_outage_narration",
            "signature": "(self, event: dict[str, object], tick: int) -> None",
            "lineno": 1270,
            "docstring": null
          },
          {
            "name": "_handle_shower_complete_narration",
            "signature": "(self, event: dict[str, object], tick: int) -> None",
            "lineno": 1297,
            "docstring": null
          },
          {
            "name": "_handle_sleep_complete_narration",
            "signature": "(self, event: dict[str, object], tick: int) -> None",
            "lineno": 1327,
            "docstring": null
          },
          {
            "name": "_copy_relationship_snapshot",
            "signature": "(snapshot: dict[str, dict[str, dict[str, float]]]) -> dict[str, dict[str, dict[str, float]]]",
            "lineno": 1358,
            "docstring": null
          },
          {
            "name": "_update_kpi_history",
            "signature": "(self, world: WorldState) -> None",
            "lineno": 1373,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 1393
  },
  {
    "path": "src/townlet/telemetry/relationship_metrics.py",
    "module": "src.townlet.telemetry.relationship_metrics",
    "docstring": "Helpers for tracking relationship churn and eviction telemetry.\n\nThese utilities let the simulation publish per-window counts of relationship\nedge evictions so drift or rapid churn can be observed by soak tests and the\noperations dashboards.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.Counter",
        "collections.abc.Iterable",
        "collections.deque",
        "dataclasses.dataclass"
      ],
      "external": [],
      "internal": []
    },
    "classes": [
      {
        "name": "RelationshipEvictionSample",
        "lineno": 32,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Aggregated eviction counts captured for a completed window.",
        "attrs": [
          {
            "name": "window_start",
            "annotation": "int",
            "value": null,
            "lineno": 35
          },
          {
            "name": "window_end",
            "annotation": "int",
            "value": null,
            "lineno": 36
          },
          {
            "name": "total_evictions",
            "annotation": "int",
            "value": null,
            "lineno": 37
          },
          {
            "name": "per_owner",
            "annotation": "dict[str, int]",
            "value": null,
            "lineno": 38
          },
          {
            "name": "per_reason",
            "annotation": "dict[str, int]",
            "value": null,
            "lineno": 39
          }
        ],
        "methods": [
          {
            "name": "to_payload",
            "signature": "(self) -> dict[str, object]",
            "lineno": 41,
            "docstring": "Serialise the sample into a telemetry-friendly payload."
          }
        ]
      },
      {
        "name": "RelationshipChurnAccumulator",
        "lineno": 52,
        "bases": [],
        "decorators": [],
        "docstring": "Tracks relationship eviction activity over fixed tick windows.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, *, window_ticks: int, max_samples: int = 8) -> None",
            "lineno": 55,
            "docstring": null
          },
          {
            "name": "record_eviction",
            "signature": "(self, *, tick: int, owner_id: str, evicted_id: str, reason: str | None = None) -> None",
            "lineno": 72,
            "docstring": "Record an eviction event for churn tracking.\n\nParameters\n----------\ntick:\n    Simulation tick when the eviction occurred.\nowner_id:\n    Agent whose relationship ledger evicted ``evicted_id``.\nevicted_id:\n    Agent removed from the ledger (unused for aggregation but captured\n    to support future diagnostics).\nreason:\n    Optional categorical tag (e.g. ``capacity`` or ``decay``) to aid in\n    telemetry analysis. ``None`` is grouped under ``\"unknown\"``."
          },
          {
            "name": "_roll_window",
            "signature": "(self, tick: int) -> None",
            "lineno": 104,
            "docstring": null
          },
          {
            "name": "snapshot",
            "signature": "(self) -> dict[str, object]",
            "lineno": 126,
            "docstring": "Return aggregates for the active window."
          },
          {
            "name": "history",
            "signature": "(self) -> Iterable[RelationshipEvictionSample]",
            "lineno": 136,
            "docstring": "Return a snapshot of the recorded history."
          },
          {
            "name": "history_payload",
            "signature": "(self) -> list[dict[str, object]]",
            "lineno": 140,
            "docstring": "Convert history samples into telemetry payloads."
          },
          {
            "name": "latest_payload",
            "signature": "(self) -> dict[str, object]",
            "lineno": 144,
            "docstring": "Return the live window payload for telemetry publishing."
          },
          {
            "name": "ingest_payload",
            "signature": "(self, payload: dict[str, object]) -> None",
            "lineno": 150,
            "docstring": "Restore the accumulator from an external payload.\n\nThis helper allows soak harnesses to persist state across sessions."
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "_advance_window",
        "lineno": 15,
        "signature": "(*, current_tick: int, window_ticks: int, window_start: int) -> int",
        "docstring": "Move the window start forward until it covers ``current_tick``."
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 182
  },
  {
    "path": "src/townlet/telemetry/transport.py",
    "module": "src.townlet.telemetry.transport",
    "docstring": "Transport primitives for telemetry publishing.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.deque",
        "pathlib.Path",
        "socket",
        "sys",
        "typing.Protocol"
      ],
      "external": [],
      "internal": []
    },
    "classes": [
      {
        "name": "TelemetryTransportError",
        "lineno": 12,
        "bases": [
          "RuntimeError"
        ],
        "decorators": [],
        "docstring": "Raised when telemetry messages cannot be delivered.",
        "attrs": [],
        "methods": []
      },
      {
        "name": "TransportClient",
        "lineno": 16,
        "bases": [
          "Protocol"
        ],
        "decorators": [],
        "docstring": "Common interface for transport implementations.",
        "attrs": [],
        "methods": [
          {
            "name": "send",
            "signature": "(self, payload: bytes) -> None",
            "lineno": 19,
            "docstring": null
          },
          {
            "name": "close",
            "signature": "(self) -> None",
            "lineno": 22,
            "docstring": null
          }
        ]
      },
      {
        "name": "StdoutTransport",
        "lineno": 26,
        "bases": [],
        "decorators": [],
        "docstring": "Writes telemetry payloads to stdout (for development/debug).",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self) -> None",
            "lineno": 29,
            "docstring": null
          },
          {
            "name": "send",
            "signature": "(self, payload: bytes) -> None",
            "lineno": 32,
            "docstring": null
          },
          {
            "name": "close",
            "signature": "(self) -> None",
            "lineno": 36,
            "docstring": null
          }
        ]
      },
      {
        "name": "FileTransport",
        "lineno": 40,
        "bases": [],
        "decorators": [],
        "docstring": "Appends newline-delimited payloads to a local file.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, path: Path) -> None",
            "lineno": 43,
            "docstring": null
          },
          {
            "name": "send",
            "signature": "(self, payload: bytes) -> None",
            "lineno": 48,
            "docstring": null
          },
          {
            "name": "close",
            "signature": "(self) -> None",
            "lineno": 52,
            "docstring": null
          }
        ]
      },
      {
        "name": "TcpTransport",
        "lineno": 56,
        "bases": [],
        "decorators": [],
        "docstring": "Sends telemetry payloads to a TCP endpoint.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, endpoint: str, *, connect_timeout: float, send_timeout: float) -> None",
            "lineno": 59,
            "docstring": null
          },
          {
            "name": "_connect",
            "signature": "(self) -> None",
            "lineno": 83,
            "docstring": null
          },
          {
            "name": "send",
            "signature": "(self, payload: bytes) -> None",
            "lineno": 96,
            "docstring": null
          },
          {
            "name": "close",
            "signature": "(self) -> None",
            "lineno": 105,
            "docstring": null
          }
        ]
      },
      {
        "name": "TransportBuffer",
        "lineno": 113,
        "bases": [],
        "decorators": [],
        "docstring": "Accumulates payloads prior to flushing to the transport.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, *, max_batch_size: int, max_buffer_bytes: int) -> None",
            "lineno": 116,
            "docstring": null
          },
          {
            "name": "append",
            "signature": "(self, payload: bytes) -> None",
            "lineno": 122,
            "docstring": null
          },
          {
            "name": "popleft",
            "signature": "(self) -> bytes",
            "lineno": 126,
            "docstring": null
          },
          {
            "name": "clear",
            "signature": "(self) -> None",
            "lineno": 131,
            "docstring": null
          },
          {
            "name": "__len__",
            "signature": "(self) -> int",
            "lineno": 135,
            "docstring": null
          },
          {
            "name": "total_bytes",
            "signature": "(self) -> int",
            "lineno": 139,
            "docstring": null
          },
          {
            "name": "is_over_capacity",
            "signature": "(self) -> bool",
            "lineno": 142,
            "docstring": null
          },
          {
            "name": "drop_until_within_capacity",
            "signature": "(self) -> int",
            "lineno": 145,
            "docstring": "Drop oldest payloads until buffer fits limits; returns drop count."
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "create_transport",
        "lineno": 156,
        "signature": "(*, transport_type: str, file_path: Path | None, endpoint: str | None, connect_timeout: float, send_timeout: float) -> TransportClient",
        "docstring": "Factory helper for `TelemetryPublisher`."
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 186
  },
  {
    "path": "src/townlet/utils/__init__.py",
    "module": "src.townlet.utils.__init__",
    "docstring": "Utility helpers for Townlet.",
    "imports": {
      "stdlib": [],
      "external": [
        "rng.decode_rng_state",
        "rng.encode_rng",
        "rng.encode_rng_state"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 9
  },
  {
    "path": "src/townlet/utils/rng.py",
    "module": "src.townlet.utils.rng",
    "docstring": "Utility helpers for serialising deterministic RNG state.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "base64",
        "pickle",
        "random"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "encode_rng_state",
        "lineno": 10,
        "signature": "(state: tuple[object, ...]) -> str",
        "docstring": "Encode a Python ``random`` state tuple into a base64 string."
      },
      {
        "name": "decode_rng_state",
        "lineno": 16,
        "signature": "(payload: str) -> tuple[object, ...]",
        "docstring": "Decode a base64-encoded RNG state back into a Python tuple."
      },
      {
        "name": "encode_rng",
        "lineno": 22,
        "signature": "(rng: random.Random) -> str",
        "docstring": "Capture the current state of ``rng`` as a serialisable string."
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 25
  },
  {
    "path": "src/townlet/world/__init__.py",
    "module": "src.townlet.world.__init__",
    "docstring": "World modelling primitives.",
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "grid.AgentSnapshot",
        "grid.WorldState",
        "queue_manager.QueueManager",
        "relationships.RelationshipLedger",
        "relationships.RelationshipParameters",
        "relationships.RelationshipTie"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 16
  },
  {
    "path": "src/townlet/world/grid.py",
    "module": "src.townlet.world.grid",
    "docstring": "Grid world representation and affordance integration.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.OrderedDict",
        "collections.abc.Iterable",
        "collections.abc.Mapping",
        "collections.deque",
        "copy",
        "dataclasses.dataclass",
        "dataclasses.field",
        "logging",
        "os",
        "pathlib.Path",
        "random",
        "typing.Any",
        "typing.Callable",
        "typing.Optional"
      ],
      "external": [],
      "internal": [
        "townlet.agents.models.Personality",
        "townlet.agents.relationship_modifiers.RelationshipDelta",
        "townlet.agents.relationship_modifiers.RelationshipEvent",
        "townlet.agents.relationship_modifiers.apply_personality_modifiers",
        "townlet.config.EmploymentConfig",
        "townlet.config.SimulationConfig",
        "townlet.config.affordance_manifest.AffordanceManifestError",
        "townlet.config.affordance_manifest.load_affordance_manifest",
        "townlet.console.command.ConsoleCommandEnvelope",
        "townlet.console.command.ConsoleCommandError",
        "townlet.console.command.ConsoleCommandResult",
        "townlet.observations.embedding.EmbeddingAllocator",
        "townlet.telemetry.relationship_metrics.RelationshipChurnAccumulator",
        "townlet.world.hooks.load_modules",
        "townlet.world.preconditions.CompiledPrecondition",
        "townlet.world.preconditions.PreconditionSyntaxError",
        "townlet.world.preconditions.compile_preconditions",
        "townlet.world.preconditions.evaluate_preconditions",
        "townlet.world.queue_manager.QueueManager",
        "townlet.world.relationships.RelationshipLedger",
        "townlet.world.relationships.RelationshipParameters",
        "townlet.world.rivalry.RivalryLedger",
        "townlet.world.rivalry.RivalryParameters"
      ]
    },
    "classes": [
      {
        "name": "HookRegistry",
        "lineno": 51,
        "bases": [],
        "decorators": [],
        "docstring": "Registers named affordance hooks and returns handlers on demand.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self) -> None",
            "lineno": 54,
            "docstring": null
          },
          {
            "name": "register",
            "signature": "(self, name: str, handler: Callable[[dict[str, Any]], None]) -> None",
            "lineno": 57,
            "docstring": null
          },
          {
            "name": "handlers_for",
            "signature": "(self, name: str) -> tuple[Callable[[dict[str, Any]], None], ...]",
            "lineno": 64,
            "docstring": null
          },
          {
            "name": "clear",
            "signature": "(self, name: str | None = None) -> None",
            "lineno": 67,
            "docstring": null
          }
        ]
      },
      {
        "name": "_ConsoleHandlerEntry",
        "lineno": 74,
        "bases": [],
        "decorators": [],
        "docstring": "Metadata for registered console handlers.",
        "attrs": [
          {
            "name": "__slots__",
            "value": "('handler', 'mode', 'require_cmd_id')",
            "lineno": 77
          }
        ],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, handler: Callable[[ConsoleCommandEnvelope], ConsoleCommandResult], *, mode: str = 'viewer', require_cmd_id: bool = False) -> None",
            "lineno": 79,
            "docstring": null
          }
        ]
      },
      {
        "name": "AgentSnapshot",
        "lineno": 101,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Minimal agent view used for scaffolding.",
        "attrs": [
          {
            "name": "agent_id",
            "annotation": "str",
            "value": null,
            "lineno": 104
          },
          {
            "name": "position",
            "annotation": "tuple[int, int]",
            "value": null,
            "lineno": 105
          },
          {
            "name": "needs",
            "annotation": "dict[str, float]",
            "value": null,
            "lineno": 106
          },
          {
            "name": "wallet",
            "annotation": "float",
            "value": "0.0",
            "lineno": 107
          },
          {
            "name": "home_position",
            "annotation": "tuple[int, int] | None",
            "value": "None",
            "lineno": 108
          },
          {
            "name": "origin_agent_id",
            "annotation": "str | None",
            "value": "None",
            "lineno": 109
          },
          {
            "name": "personality",
            "annotation": "Personality",
            "value": "field(default_factory=_default_personality)",
            "lineno": 110
          },
          {
            "name": "inventory",
            "annotation": "dict[str, int]",
            "value": "field(default_factory=dict)",
            "lineno": 111
          },
          {
            "name": "job_id",
            "annotation": "str | None",
            "value": "None",
            "lineno": 112
          },
          {
            "name": "on_shift",
            "annotation": "bool",
            "value": "False",
            "lineno": 113
          },
          {
            "name": "lateness_counter",
            "annotation": "int",
            "value": "0",
            "lineno": 114
          },
          {
            "name": "last_late_tick",
            "annotation": "int",
            "value": "-1",
            "lineno": 115
          },
          {
            "name": "shift_state",
            "annotation": "str",
            "value": "'pre_shift'",
            "lineno": 116
          },
          {
            "name": "late_ticks_today",
            "annotation": "int",
            "value": "0",
            "lineno": 117
          },
          {
            "name": "attendance_ratio",
            "annotation": "float",
            "value": "0.0",
            "lineno": 118
          },
          {
            "name": "absent_shifts_7d",
            "annotation": "int",
            "value": "0",
            "lineno": 119
          },
          {
            "name": "wages_withheld",
            "annotation": "float",
            "value": "0.0",
            "lineno": 120
          },
          {
            "name": "exit_pending",
            "annotation": "bool",
            "value": "False",
            "lineno": 121
          },
          {
            "name": "last_action_id",
            "annotation": "str",
            "value": "''",
            "lineno": 122
          },
          {
            "name": "last_action_success",
            "annotation": "bool",
            "value": "False",
            "lineno": 123
          },
          {
            "name": "last_action_duration",
            "annotation": "int",
            "value": "0",
            "lineno": 124
          },
          {
            "name": "episode_tick",
            "annotation": "int",
            "value": "0",
            "lineno": 125
          }
        ],
        "methods": [
          {
            "name": "__post_init__",
            "signature": "(self) -> None",
            "lineno": 127,
            "docstring": null
          }
        ]
      },
      {
        "name": "InteractiveObject",
        "lineno": 146,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Represents an interactive world object with optional occupancy.",
        "attrs": [
          {
            "name": "object_id",
            "annotation": "str",
            "value": null,
            "lineno": 149
          },
          {
            "name": "object_type",
            "annotation": "str",
            "value": null,
            "lineno": 150
          },
          {
            "name": "occupied_by",
            "annotation": "str | None",
            "value": "None",
            "lineno": 151
          },
          {
            "name": "stock",
            "annotation": "dict[str, int]",
            "value": "field(default_factory=dict)",
            "lineno": 152
          },
          {
            "name": "position",
            "annotation": "tuple[int, int] | None",
            "value": "None",
            "lineno": 153
          }
        ],
        "methods": []
      },
      {
        "name": "RunningAffordance",
        "lineno": 157,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Tracks an affordance currently executing on an object.",
        "attrs": [
          {
            "name": "agent_id",
            "annotation": "str",
            "value": null,
            "lineno": 160
          },
          {
            "name": "affordance_id",
            "annotation": "str",
            "value": null,
            "lineno": 161
          },
          {
            "name": "duration_remaining",
            "annotation": "int",
            "value": null,
            "lineno": 162
          },
          {
            "name": "effects",
            "annotation": "dict[str, float]",
            "value": null,
            "lineno": 163
          }
        ],
        "methods": []
      },
      {
        "name": "AffordanceSpec",
        "lineno": 167,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Static affordance definition loaded from configuration.",
        "attrs": [
          {
            "name": "affordance_id",
            "annotation": "str",
            "value": null,
            "lineno": 170
          },
          {
            "name": "object_type",
            "annotation": "str",
            "value": null,
            "lineno": 171
          },
          {
            "name": "duration",
            "annotation": "int",
            "value": null,
            "lineno": 172
          },
          {
            "name": "effects",
            "annotation": "dict[str, float]",
            "value": null,
            "lineno": 173
          },
          {
            "name": "preconditions",
            "annotation": "list[str]",
            "value": "field(default_factory=list)",
            "lineno": 174
          },
          {
            "name": "hooks",
            "annotation": "dict[str, list[str]]",
            "value": "field(default_factory=dict)",
            "lineno": 175
          },
          {
            "name": "compiled_preconditions",
            "annotation": "tuple[CompiledPrecondition, ...]",
            "value": "field(default_factory=tuple, repr=False)",
            "lineno": 176
          }
        ],
        "methods": []
      },
      {
        "name": "WorldState",
        "lineno": 183,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Holds mutable world state for the simulation tick.",
        "attrs": [
          {
            "name": "config",
            "annotation": "SimulationConfig",
            "value": null,
            "lineno": 186
          },
          {
            "name": "agents",
            "annotation": "dict[str, AgentSnapshot]",
            "value": "field(default_factory=dict)",
            "lineno": 187
          },
          {
            "name": "tick",
            "annotation": "int",
            "value": "0",
            "lineno": 188
          },
          {
            "name": "queue_manager",
            "annotation": "QueueManager",
            "value": "field(init=False)",
            "lineno": 189
          },
          {
            "name": "embedding_allocator",
            "annotation": "EmbeddingAllocator",
            "value": "field(init=False)",
            "lineno": 190
          },
          {
            "name": "_active_reservations",
            "annotation": "dict[str, str]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 191
          },
          {
            "name": "objects",
            "annotation": "dict[str, InteractiveObject]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 192
          },
          {
            "name": "affordances",
            "annotation": "dict[str, AffordanceSpec]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 193
          },
          {
            "name": "_running_affordances",
            "annotation": "dict[str, RunningAffordance]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 194
          },
          {
            "name": "_pending_events",
            "annotation": "dict[int, list[dict[str, Any]]]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 195
          },
          {
            "name": "store_stock",
            "annotation": "dict[str, dict[str, int]]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 196
          },
          {
            "name": "_job_keys",
            "annotation": "list[str]",
            "value": "field(init=False, default_factory=list)",
            "lineno": 197
          },
          {
            "name": "_employment_state",
            "annotation": "dict[str, dict[str, Any]]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 198
          },
          {
            "name": "_employment_exit_queue",
            "annotation": "list[str]",
            "value": "field(init=False, default_factory=list)",
            "lineno": 199
          },
          {
            "name": "_employment_exits_today",
            "annotation": "int",
            "value": "field(init=False, default=0)",
            "lineno": 200
          },
          {
            "name": "_employment_exit_queue_timestamps",
            "annotation": "dict[str, int]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 201
          },
          {
            "name": "_employment_manual_exits",
            "annotation": "set[str]",
            "value": "field(init=False, default_factory=set)",
            "lineno": 202
          },
          {
            "name": "_rivalry_ledgers",
            "annotation": "dict[str, RivalryLedger]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 204
          },
          {
            "name": "_relationship_ledgers",
            "annotation": "dict[str, RelationshipLedger]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 205
          },
          {
            "name": "_relationship_churn",
            "annotation": "RelationshipChurnAccumulator",
            "value": "field(init=False)",
            "lineno": 206
          },
          {
            "name": "_rivalry_events",
            "annotation": "deque[dict[str, Any]]",
            "value": "field(init=False, default_factory=deque)",
            "lineno": 207
          },
          {
            "name": "_relationship_window_ticks",
            "annotation": "int",
            "value": "600",
            "lineno": 208
          },
          {
            "name": "_recent_meal_participants",
            "annotation": "dict[str, dict[str, Any]]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 209
          },
          {
            "name": "_chat_events",
            "annotation": "list[dict[str, Any]]",
            "value": "field(init=False, default_factory=list)",
            "lineno": 210
          },
          {
            "name": "_rng_seed",
            "annotation": "Optional[int]",
            "value": "field(init=False, default=None)",
            "lineno": 211
          },
          {
            "name": "_rng_state",
            "annotation": "Optional[tuple[Any, ...]]",
            "value": "field(init=False, default=None)",
            "lineno": 212
          },
          {
            "name": "_rng",
            "annotation": "Optional[random.Random]",
            "value": "field(init=False, default=None, repr=False)",
            "lineno": 213
          },
          {
            "name": "_affordance_manifest_info",
            "annotation": "dict[str, object]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 214
          },
          {
            "name": "_objects_by_position",
            "annotation": "dict[tuple[int, int], list[str]]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 215
          },
          {
            "name": "_console_handlers",
            "annotation": "dict[str, _ConsoleHandlerEntry]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 216
          },
          {
            "name": "_console_cmd_history",
            "annotation": "OrderedDict[str, ConsoleCommandResult]",
            "value": "field(init=False, default_factory=OrderedDict)",
            "lineno": 217
          },
          {
            "name": "_console_result_buffer",
            "annotation": "deque[ConsoleCommandResult]",
            "value": "field(init=False, default_factory=deque)",
            "lineno": 220
          },
          {
            "name": "_hook_registry",
            "annotation": "HookRegistry",
            "value": "field(init=False, repr=False)",
            "lineno": 221
          },
          {
            "name": "_ctx_reset_requests",
            "annotation": "set[str]",
            "value": "field(init=False, default_factory=set)",
            "lineno": 222
          },
          {
            "name": "_respawn_counters",
            "annotation": "dict[str, int]",
            "value": "field(init=False, default_factory=dict)",
            "lineno": 223
          }
        ],
        "methods": [
          {
            "name": "from_config",
            "signature": "(cls, config: SimulationConfig, *, rng: Optional[random.Random] = None) -> 'WorldState'",
            "lineno": 226,
            "docstring": "Bootstrap the initial world from config."
          },
          {
            "name": "__post_init__",
            "signature": "(self) -> None",
            "lineno": 238,
            "docstring": null
          },
          {
            "name": "generate_agent_id",
            "signature": "(self, base_id: str) -> str",
            "lineno": 279,
            "docstring": null
          },
          {
            "name": "apply_console",
            "signature": "(self, operations: Iterable[Any]) -> None",
            "lineno": 289,
            "docstring": "Apply console operations before the tick sequence runs."
          },
          {
            "name": "attach_rng",
            "signature": "(self, rng: random.Random) -> None",
            "lineno": 382,
            "docstring": "Attach a deterministic RNG used for world-level randomness."
          },
          {
            "name": "rng",
            "signature": "(self) -> random.Random",
            "lineno": 389,
            "docstring": null
          },
          {
            "name": "get_rng_state",
            "signature": "(self) -> tuple[Any, ...]",
            "lineno": 394,
            "docstring": null
          },
          {
            "name": "set_rng_state",
            "signature": "(self, state: tuple[Any, ...]) -> None",
            "lineno": 397,
            "docstring": null
          },
          {
            "name": "register_console_handler",
            "signature": "(self, name: str, handler: Callable[[ConsoleCommandEnvelope], ConsoleCommandResult], *, mode: str = 'viewer', require_cmd_id: bool = False) -> None",
            "lineno": 405,
            "docstring": "Register a console handler for queued commands."
          },
          {
            "name": "register_affordance_hook",
            "signature": "(self, name: str, handler: Callable[[dict[str, Any]], None]) -> None",
            "lineno": 419,
            "docstring": "Register a callable invoked when a manifest hook fires."
          },
          {
            "name": "clear_affordance_hooks",
            "signature": "(self, name: str | None = None) -> None",
            "lineno": 426,
            "docstring": "Clear registered affordance hooks (used primarily for tests)."
          },
          {
            "name": "consume_console_results",
            "signature": "(self) -> list[ConsoleCommandResult]",
            "lineno": 431,
            "docstring": "Return and clear buffered console results."
          },
          {
            "name": "_record_console_result",
            "signature": "(self, result: ConsoleCommandResult) -> None",
            "lineno": 438,
            "docstring": null
          },
          {
            "name": "_dispatch_affordance_hooks",
            "signature": "(self, stage: str, hook_names: Iterable[str], *, agent_id: str, object_id: str, spec: AffordanceSpec | None, extra: Mapping[str, Any] | None = None) -> bool",
            "lineno": 445,
            "docstring": null
          },
          {
            "name": "_build_precondition_context",
            "signature": "(self, *, agent_id: str, object_id: str, spec: AffordanceSpec) -> dict[str, Any]",
            "lineno": 486,
            "docstring": null
          },
          {
            "name": "_snapshot_precondition_context",
            "signature": "(self, context: Mapping[str, Any]) -> dict[str, Any]",
            "lineno": 565,
            "docstring": null
          },
          {
            "name": "_register_default_console_handlers",
            "signature": "(self) -> None",
            "lineno": 577,
            "docstring": null
          },
          {
            "name": "_console_noop_handler",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult",
            "lineno": 630,
            "docstring": null
          },
          {
            "name": "_console_employment_status",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult",
            "lineno": 633,
            "docstring": null
          },
          {
            "name": "_console_employment_exit",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult",
            "lineno": 641,
            "docstring": null
          },
          {
            "name": "_assign_job_if_missing",
            "signature": "(self, snapshot: AgentSnapshot) -> None",
            "lineno": 670,
            "docstring": null
          },
          {
            "name": "remove_agent",
            "signature": "(self, agent_id: str, tick: int) -> dict[str, Any] | None",
            "lineno": 674,
            "docstring": null
          },
          {
            "name": "respawn_agent",
            "signature": "(self, blueprint: Mapping[str, Any]) -> None",
            "lineno": 730,
            "docstring": null
          },
          {
            "name": "_sync_agent_spawn",
            "signature": "(self, snapshot: AgentSnapshot) -> None",
            "lineno": 788,
            "docstring": null
          },
          {
            "name": "_console_spawn_agent",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult",
            "lineno": 796,
            "docstring": null
          },
          {
            "name": "_console_teleport_agent",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult",
            "lineno": 871,
            "docstring": null
          },
          {
            "name": "_release_queue_membership",
            "signature": "(self, agent_id: str) -> None",
            "lineno": 906,
            "docstring": null
          },
          {
            "name": "_sync_reservation_for_agent",
            "signature": "(self, agent_id: str) -> None",
            "lineno": 912,
            "docstring": null
          },
          {
            "name": "_is_position_walkable",
            "signature": "(self, position: tuple[int, int]) -> bool",
            "lineno": 917,
            "docstring": null
          },
          {
            "name": "kill_agent",
            "signature": "(self, agent_id: str, *, reason: str | None = None) -> bool",
            "lineno": 924,
            "docstring": null
          },
          {
            "name": "_console_set_need",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult",
            "lineno": 947,
            "docstring": null
          },
          {
            "name": "_console_set_price",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult",
            "lineno": 989,
            "docstring": null
          },
          {
            "name": "_console_force_chat",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult",
            "lineno": 1011,
            "docstring": null
          },
          {
            "name": "_console_set_relationship",
            "signature": "(self, envelope: ConsoleCommandEnvelope) -> ConsoleCommandResult",
            "lineno": 1053,
            "docstring": null
          },
          {
            "name": "register_object",
            "signature": "(self, *, object_id: str, object_type: str, position: tuple[int, int] | None = None) -> None",
            "lineno": 1139,
            "docstring": "Register or update an interactive object in the world."
          },
          {
            "name": "_index_object_position",
            "signature": "(self, object_id: str, position: tuple[int, int]) -> None",
            "lineno": 1171,
            "docstring": null
          },
          {
            "name": "_unindex_object_position",
            "signature": "(self, object_id: str, position: tuple[int, int]) -> None",
            "lineno": 1176,
            "docstring": null
          },
          {
            "name": "register_affordance",
            "signature": "(self, *, affordance_id: str, object_type: str, duration: int, effects: dict[str, float], preconditions: Iterable[str] | None = None, hooks: Mapping[str, Iterable[str]] | None = None) -> None",
            "lineno": 1187,
            "docstring": "Register an affordance available in the world."
          },
          {
            "name": "apply_actions",
            "signature": "(self, actions: dict[str, Any]) -> None",
            "lineno": 1216,
            "docstring": "Apply agent actions for the current tick."
          },
          {
            "name": "resolve_affordances",
            "signature": "(self, current_tick: int) -> None",
            "lineno": 1304,
            "docstring": "Resolve queued affordances and hooks."
          },
          {
            "name": "request_ctx_reset",
            "signature": "(self, agent_id: str) -> None",
            "lineno": 1369,
            "docstring": "Mark an agent so the next observation toggles ctx_reset_flag."
          },
          {
            "name": "consume_ctx_reset_requests",
            "signature": "(self) -> set[str]",
            "lineno": 1374,
            "docstring": "Return and clear pending ctx-reset requests."
          },
          {
            "name": "snapshot",
            "signature": "(self) -> dict[str, AgentSnapshot]",
            "lineno": 1380,
            "docstring": "Return a shallow copy of the agent dictionary for observers."
          },
          {
            "name": "local_view",
            "signature": "(self, agent_id: str, radius: int, *, include_agents: bool = True, include_objects: bool = True) -> dict[str, Any]",
            "lineno": 1384,
            "docstring": "Return local neighborhood information for observation builders."
          },
          {
            "name": "agent_context",
            "signature": "(self, agent_id: str) -> dict[str, object]",
            "lineno": 1483,
            "docstring": "Return scalar context fields for the requested agent."
          },
          {
            "name": "active_reservations",
            "signature": "(self) -> dict[str, str]",
            "lineno": 1505,
            "docstring": "Expose a copy of active reservations for diagnostics/tests."
          },
          {
            "name": "drain_events",
            "signature": "(self) -> list[dict[str, Any]]",
            "lineno": 1509,
            "docstring": "Return all pending events accumulated up to the current tick."
          },
          {
            "name": "_record_queue_conflict",
            "signature": "(self, *, object_id: str, actor: str, rival: str, reason: str, queue_length: int, intensity: float | None = None) -> None",
            "lineno": 1517,
            "docstring": null
          },
          {
            "name": "register_rivalry_conflict",
            "signature": "(self, agent_a: str, agent_b: str, *, intensity: float = 1.0, reason: str = 'conflict') -> None",
            "lineno": 1569,
            "docstring": "Record a rivalry-inducing conflict between two agents.\n\nBoth ledgers are updated symmetrically so downstream consumers can\ninspect rivalry magnitudes without having to normalise directionality."
          },
          {
            "name": "rivalry_snapshot",
            "signature": "(self) -> dict[str, dict[str, float]]",
            "lineno": 1598,
            "docstring": "Expose rivalry ledgers for telemetry/diagnostics."
          },
          {
            "name": "relationships_snapshot",
            "signature": "(self) -> dict[str, dict[str, dict[str, float]]]",
            "lineno": 1607,
            "docstring": null
          },
          {
            "name": "relationship_tie",
            "signature": "(self, agent_id: str, other_id: str) -> RelationshipTie | None",
            "lineno": 1615,
            "docstring": "Return the current relationship tie between two agents, if any."
          },
          {
            "name": "consume_chat_events",
            "signature": "(self) -> list[dict[str, Any]]",
            "lineno": 1623,
            "docstring": "Return chat events staged for reward calculations and clear the buffer."
          },
          {
            "name": "rivalry_value",
            "signature": "(self, agent_id: str, other_id: str) -> float",
            "lineno": 1630,
            "docstring": "Return the rivalry score between two agents, if present."
          },
          {
            "name": "rivalry_should_avoid",
            "signature": "(self, agent_id: str, other_id: str) -> bool",
            "lineno": 1637,
            "docstring": null
          },
          {
            "name": "rivalry_top",
            "signature": "(self, agent_id: str, limit: int) -> list[tuple[str, float]]",
            "lineno": 1643,
            "docstring": null
          },
          {
            "name": "consume_rivalry_events",
            "signature": "(self) -> list[dict[str, Any]]",
            "lineno": 1649,
            "docstring": "Return rivalry events recorded since the last call."
          },
          {
            "name": "_record_rivalry_event",
            "signature": "(self, *, agent_a: str, agent_b: str, intensity: float, reason: str) -> None",
            "lineno": 1658,
            "docstring": null
          },
          {
            "name": "_get_rivalry_ledger",
            "signature": "(self, agent_id: str) -> RivalryLedger",
            "lineno": 1671,
            "docstring": null
          },
          {
            "name": "_get_relationship_ledger",
            "signature": "(self, agent_id: str) -> RelationshipLedger",
            "lineno": 1684,
            "docstring": null
          },
          {
            "name": "_relationship_parameters",
            "signature": "(self) -> RelationshipParameters",
            "lineno": 1700,
            "docstring": null
          },
          {
            "name": "_personality_for",
            "signature": "(self, agent_id: str) -> Personality",
            "lineno": 1703,
            "docstring": null
          },
          {
            "name": "_apply_relationship_delta",
            "signature": "(self, owner_id: str, other_id: str, *, delta: RelationshipDelta, event: RelationshipEvent) -> None",
            "lineno": 1709,
            "docstring": null
          },
          {
            "name": "_rivalry_parameters",
            "signature": "(self) -> RivalryParameters",
            "lineno": 1731,
            "docstring": null
          },
          {
            "name": "_decay_rivalry_ledgers",
            "signature": "(self) -> None",
            "lineno": 1743,
            "docstring": null
          },
          {
            "name": "_decay_relationship_ledgers",
            "signature": "(self) -> None",
            "lineno": 1755,
            "docstring": null
          },
          {
            "name": "_record_relationship_eviction",
            "signature": "(self, owner_id: str, other_id: str, reason: str) -> None",
            "lineno": 1766,
            "docstring": null
          },
          {
            "name": "relationship_metrics_snapshot",
            "signature": "(self) -> dict[str, object]",
            "lineno": 1774,
            "docstring": null
          },
          {
            "name": "load_relationship_snapshot",
            "signature": "(self, snapshot: dict[str, dict[str, dict[str, float]]]) -> None",
            "lineno": 1777,
            "docstring": "Restore relationship ledgers from persisted snapshot data."
          },
          {
            "name": "update_relationship",
            "signature": "(self, agent_a: str, agent_b: str, *, trust: float = 0.0, familiarity: float = 0.0, rivalry: float = 0.0, event: RelationshipEvent = 'generic') -> None",
            "lineno": 1796,
            "docstring": null
          },
          {
            "name": "record_chat_success",
            "signature": "(self, speaker: str, listener: str, quality: float) -> None",
            "lineno": 1812,
            "docstring": null
          },
          {
            "name": "record_chat_failure",
            "signature": "(self, speaker: str, listener: str) -> None",
            "lineno": 1839,
            "docstring": null
          },
          {
            "name": "_sync_reservation",
            "signature": "(self, object_id: str) -> None",
            "lineno": 1867,
            "docstring": null
          },
          {
            "name": "_handle_blocked",
            "signature": "(self, object_id: str, tick: int) -> None",
            "lineno": 1879,
            "docstring": null
          },
          {
            "name": "_start_affordance",
            "signature": "(self, agent_id: str, object_id: str, affordance_id: str) -> bool",
            "lineno": 1898,
            "docstring": null
          },
          {
            "name": "_apply_affordance_effects",
            "signature": "(self, agent_id: str, effects: dict[str, float]) -> None",
            "lineno": 1994,
            "docstring": null
          },
          {
            "name": "_emit_event",
            "signature": "(self, event: str, payload: dict[str, Any]) -> None",
            "lineno": 2005,
            "docstring": null
          },
          {
            "name": "_load_affordance_definitions",
            "signature": "(self) -> None",
            "lineno": 2009,
            "docstring": null
          },
          {
            "name": "affordance_manifest_metadata",
            "signature": "(self) -> dict[str, object]",
            "lineno": 2054,
            "docstring": "Expose manifest metadata (path, checksum, counts) for telemetry."
          },
          {
            "name": "find_nearest_object_of_type",
            "signature": "(self, object_type: str, origin: tuple[int, int]) -> tuple[int, int] | None",
            "lineno": 2059,
            "docstring": null
          },
          {
            "name": "_apply_need_decay",
            "signature": "(self) -> None",
            "lineno": 2073,
            "docstring": null
          },
          {
            "name": "apply_nightly_reset",
            "signature": "(self) -> list[str]",
            "lineno": 2083,
            "docstring": "Return agents home, refresh needs, and reset employment flags."
          },
          {
            "name": "_assign_jobs_to_agents",
            "signature": "(self) -> None",
            "lineno": 2150,
            "docstring": null
          },
          {
            "name": "_apply_job_state",
            "signature": "(self) -> None",
            "lineno": 2160,
            "docstring": null
          },
          {
            "name": "_apply_job_state_legacy",
            "signature": "(self) -> None",
            "lineno": 2166,
            "docstring": null
          },
          {
            "name": "_apply_job_state_enforced",
            "signature": "(self) -> None",
            "lineno": 2210,
            "docstring": null
          },
          {
            "name": "_employment_context_defaults",
            "signature": "(self) -> dict[str, Any]",
            "lineno": 2294,
            "docstring": null
          },
          {
            "name": "_get_employment_context",
            "signature": "(self, agent_id: str) -> dict[str, Any]",
            "lineno": 2320,
            "docstring": null
          },
          {
            "name": "_employment_context_wages",
            "signature": "(self, agent_id: str) -> float",
            "lineno": 2333,
            "docstring": null
          },
          {
            "name": "_employment_context_punctuality",
            "signature": "(self, agent_id: str) -> float",
            "lineno": 2339,
            "docstring": null
          },
          {
            "name": "_employment_idle_state",
            "signature": "(self, snapshot: AgentSnapshot, ctx: dict[str, Any]) -> None",
            "lineno": 2348,
            "docstring": null
          },
          {
            "name": "_employment_prepare_state",
            "signature": "(self, snapshot: AgentSnapshot, ctx: dict[str, Any]) -> None",
            "lineno": 2368,
            "docstring": null
          },
          {
            "name": "_employment_begin_shift",
            "signature": "(self, ctx: dict[str, Any], start: int, end: int) -> None",
            "lineno": 2373,
            "docstring": null
          },
          {
            "name": "_employment_determine_state",
            "signature": "(self, *, ctx: dict[str, Any], tick: int, start: int, at_required_location: bool, employment_cfg: EmploymentConfig) -> str",
            "lineno": 2393,
            "docstring": null
          },
          {
            "name": "_employment_apply_state_effects",
            "signature": "(self, *, snapshot: AgentSnapshot, ctx: dict[str, Any], state: str, at_required_location: bool, wage_rate: float, lateness_penalty: float, employment_cfg: EmploymentConfig) -> None",
            "lineno": 2427,
            "docstring": null
          },
          {
            "name": "_employment_finalize_shift",
            "signature": "(self, *, snapshot: AgentSnapshot, ctx: dict[str, Any], employment_cfg: EmploymentConfig, job_id: str | None) -> None",
            "lineno": 2552,
            "docstring": null
          },
          {
            "name": "_employment_coworkers_on_shift",
            "signature": "(self, snapshot: AgentSnapshot) -> list[str]",
            "lineno": 2589,
            "docstring": null
          },
          {
            "name": "_employment_enqueue_exit",
            "signature": "(self, agent_id: str, tick: int) -> None",
            "lineno": 2602,
            "docstring": null
          },
          {
            "name": "_employment_remove_from_queue",
            "signature": "(self, agent_id: str) -> None",
            "lineno": 2628,
            "docstring": null
          },
          {
            "name": "employment_queue_snapshot",
            "signature": "(self) -> dict[str, Any]",
            "lineno": 2636,
            "docstring": null
          },
          {
            "name": "employment_request_manual_exit",
            "signature": "(self, agent_id: str, tick: int) -> bool",
            "lineno": 2646,
            "docstring": null
          },
          {
            "name": "employment_defer_exit",
            "signature": "(self, agent_id: str) -> bool",
            "lineno": 2659,
            "docstring": null
          },
          {
            "name": "_update_basket_metrics",
            "signature": "(self) -> None",
            "lineno": 2673,
            "docstring": null
          },
          {
            "name": "_restock_economy",
            "signature": "(self) -> None",
            "lineno": 2684,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "_default_personality",
        "lineno": 91,
        "signature": "() -> Personality",
        "docstring": "Provide a neutral personality for agents lacking explicit traits."
      }
    ],
    "constants": [
      {
        "name": "_CONSOLE_HISTORY_LIMIT",
        "value": "512",
        "lineno": 47
      },
      {
        "name": "_CONSOLE_RESULT_BUFFER_LIMIT",
        "value": "256",
        "lineno": 48
      },
      {
        "name": "_BASE_NEEDS",
        "value": "('hunger', 'hygiene', 'energy')",
        "annotation": "tuple[str, ...]",
        "lineno": 97
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 2701
  },
  {
    "path": "src/townlet/world/hooks/__init__.py",
    "module": "src.townlet.world.hooks.__init__",
    "docstring": "Affordance hook plug-in namespace.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "importlib.import_module",
        "typing.Iterable",
        "typing.TYPE_CHECKING"
      ],
      "external": [],
      "internal": [
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "load_modules",
        "lineno": 11,
        "signature": "(world: 'WorldState', module_paths: Iterable[str]) -> None",
        "docstring": "Import hook modules and let them register against the given world."
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 20
  },
  {
    "path": "src/townlet/world/hooks/default.py",
    "module": "src.townlet.world.hooks.default",
    "docstring": "Built-in affordance hook handlers.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "typing.Any",
        "typing.TYPE_CHECKING"
      ],
      "external": [],
      "internal": [
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "register_hooks",
        "lineno": 16,
        "signature": "(world: 'WorldState') -> None",
        "docstring": "Register built-in affordance hooks with the provided world."
      },
      {
        "name": "_on_attempt_shower",
        "lineno": 31,
        "signature": "(context: dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "_on_finish_shower",
        "lineno": 61,
        "signature": "(context: dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "_on_no_power",
        "lineno": 80,
        "signature": "(context: dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "_on_attempt_eat",
        "lineno": 96,
        "signature": "(context: dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "_on_finish_eat",
        "lineno": 136,
        "signature": "(context: dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "_on_attempt_cook",
        "lineno": 165,
        "signature": "(context: dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "_on_finish_cook",
        "lineno": 193,
        "signature": "(context: dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "_on_cook_fail",
        "lineno": 207,
        "signature": "(context: dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "_on_attempt_sleep",
        "lineno": 217,
        "signature": "(context: dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "_on_finish_sleep",
        "lineno": 249,
        "signature": "(context: dict[str, Any]) -> None",
        "docstring": null
      },
      {
        "name": "_abort_affordance",
        "lineno": 277,
        "signature": "(world: 'WorldState', spec: Any, agent_id: str, object_id: str, reason: str) -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "_AFFORDANCE_FAIL_EVENT",
        "value": "'affordance_fail'",
        "lineno": 10
      },
      {
        "name": "_SHOWER_COMPLETE_EVENT",
        "value": "'shower_complete'",
        "lineno": 11
      },
      {
        "name": "_SHOWER_POWER_EVENT",
        "value": "'shower_power_outage'",
        "lineno": 12
      },
      {
        "name": "_SLEEP_COMPLETE_EVENT",
        "value": "'sleep_complete'",
        "lineno": 13
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 313
  },
  {
    "path": "src/townlet/world/preconditions.py",
    "module": "src.townlet.world.preconditions",
    "docstring": "Affordance precondition compilation and evaluation helpers.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "ast",
        "dataclasses.dataclass",
        "re",
        "typing.Any",
        "typing.Iterable",
        "typing.Mapping",
        "typing.Sequence"
      ],
      "external": [],
      "internal": []
    },
    "classes": [
      {
        "name": "PreconditionSyntaxError",
        "lineno": 19,
        "bases": [
          "ValueError"
        ],
        "decorators": [],
        "docstring": "Raised when a manifest precondition has invalid syntax.",
        "attrs": [],
        "methods": []
      },
      {
        "name": "PreconditionEvaluationError",
        "lineno": 23,
        "bases": [
          "RuntimeError"
        ],
        "decorators": [],
        "docstring": "Raised when evaluation fails due to missing context or type errors.",
        "attrs": [],
        "methods": []
      },
      {
        "name": "CompiledPrecondition",
        "lineno": 74,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": "Stores the parsed AST and metadata for a precondition.",
        "attrs": [
          {
            "name": "source",
            "annotation": "str",
            "value": null,
            "lineno": 77
          },
          {
            "name": "tree",
            "annotation": "ast.AST",
            "value": null,
            "lineno": 78
          },
          {
            "name": "identifiers",
            "annotation": "tuple[str, ...]",
            "value": null,
            "lineno": 79
          }
        ],
        "methods": []
      },
      {
        "name": "_IdentifierCollector",
        "lineno": 82,
        "bases": [
          "ast.NodeVisitor"
        ],
        "decorators": [],
        "docstring": null,
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self) -> None",
            "lineno": 83,
            "docstring": null
          },
          {
            "name": "visit_Name",
            "signature": "(self, node: ast.Name) -> None",
            "lineno": 87,
            "docstring": "Collect bare identifiers used in the expression."
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "_normalize_expression",
        "lineno": 94,
        "signature": "(expression: str) -> str",
        "docstring": null
      },
      {
        "name": "_validate_tree",
        "lineno": 102,
        "signature": "(tree: ast.AST, source: str) -> tuple[str, ...]",
        "docstring": null
      },
      {
        "name": "compile_preconditions",
        "lineno": 134,
        "signature": "(expressions: Iterable[str]) -> tuple[CompiledPrecondition, ...]",
        "docstring": "Compile manifest preconditions, raising on syntax errors."
      },
      {
        "name": "compile_precondition",
        "lineno": 156,
        "signature": "(expression: str) -> CompiledPrecondition",
        "docstring": "Compile a single precondition expression."
      },
      {
        "name": "_resolve_name",
        "lineno": 162,
        "signature": "(name: str, context: Mapping[str, Any]) -> Any",
        "docstring": null
      },
      {
        "name": "_resolve_attr",
        "lineno": 169,
        "signature": "(value: Any, attr: str) -> Any",
        "docstring": null
      },
      {
        "name": "_resolve_subscript",
        "lineno": 177,
        "signature": "(value: Any, key: Any) -> Any",
        "docstring": null
      },
      {
        "name": "_evaluate",
        "lineno": 184,
        "signature": "(node: ast.AST, context: Mapping[str, Any]) -> Any",
        "docstring": null
      },
      {
        "name": "_apply_compare",
        "lineno": 241,
        "signature": "(operator: ast.cmpop, left: Any, right: Any) -> bool",
        "docstring": null
      },
      {
        "name": "evaluate_preconditions",
        "lineno": 269,
        "signature": "(preconditions: Sequence[CompiledPrecondition], context: Mapping[str, Any]) -> tuple[bool, CompiledPrecondition | None]",
        "docstring": "Evaluate compiled preconditions against the provided context.\n\nReturns\n-------\ntuple\n    ``(True, None)`` if all preconditions pass, otherwise ``(False, failed)``\n    where ``failed`` references the first failing precondition."
      }
    ],
    "constants": [
      {
        "name": "_ALLOWED_COMPARE_OPS",
        "value": "(ast.Eq, ast.NotEq, ast.Lt, ast.LtE, ast.Gt, ast.GtE, ast.In, ast.NotIn)",
        "lineno": 27
      },
      {
        "name": "_ALLOWED_BOOL_OPS",
        "value": "(ast.And, ast.Or)",
        "lineno": 37
      },
      {
        "name": "_ALLOWED_UNARY_OPS",
        "value": "(ast.Not, ast.USub, ast.UAdd)",
        "lineno": 38
      },
      {
        "name": "_ALLOWED_NODE_TYPES",
        "value": "(ast.Expression, ast.BoolOp, ast.Compare, ast.Name, ast.Attribute, ast.Subscript, ast.Constant, ast.UnaryOp, ast.Tuple, ast.List, ast.Eq, ast.NotEq, ast.Lt, ast.LtE, ast.Gt, ast.GtE, ast.In, ast.NotIn, ast.And, ast.Or, ast.Load, ast.USub, ast.UAdd, ast.Not)",
        "lineno": 39
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 289
  },
  {
    "path": "src/townlet/world/queue_manager.py",
    "module": "src.townlet.world.queue_manager",
    "docstring": "Queue management with fairness guardrails.\n\nThis module implements the queue semantics described in docs/REQUIREMENTS.md#5.\nQueues are maintained per interactive object, and fairness is controlled through\ncooldowns, queue-age prioritisation, and a ghost-step breaker that prevents\nlong-lived deadlocks.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "dataclasses.dataclass",
        "time"
      ],
      "external": [],
      "internal": [
        "townlet.config.QueueFairnessConfig",
        "townlet.config.SimulationConfig"
      ]
    },
    "classes": [
      {
        "name": "QueueEntry",
        "lineno": 18,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Represents an agent waiting to access an interactive object.",
        "attrs": [
          {
            "name": "agent_id",
            "annotation": "str",
            "value": null,
            "lineno": 21
          },
          {
            "name": "joined_tick",
            "annotation": "int",
            "value": null,
            "lineno": 22
          }
        ],
        "methods": []
      },
      {
        "name": "QueueManager",
        "lineno": 25,
        "bases": [],
        "decorators": [],
        "docstring": "Coordinates reservations and fairness across interactive queues.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config: SimulationConfig) -> None",
            "lineno": 28,
            "docstring": null
          },
          {
            "name": "on_tick",
            "signature": "(self, tick: int) -> None",
            "lineno": 53,
            "docstring": "Expire cooldown entries whose window has elapsed."
          },
          {
            "name": "request_access",
            "signature": "(self, object_id: str, agent_id: str, tick: int) -> bool",
            "lineno": 59,
            "docstring": "Attempt to reserve the object for the agent.\n\nReturns True if the agent is granted the reservation immediately,\notherwise the agent is queued and False is returned."
          },
          {
            "name": "release",
            "signature": "(self, object_id: str, agent_id: str, tick: int, *, success: bool = True) -> None",
            "lineno": 88,
            "docstring": "Release the reservation and optionally apply cooldown."
          },
          {
            "name": "record_blocked_attempt",
            "signature": "(self, object_id: str) -> bool",
            "lineno": 110,
            "docstring": "Register that the current head was blocked.\n\nReturns True if a ghost-step should be triggered for the head agent."
          },
          {
            "name": "active_agent",
            "signature": "(self, object_id: str) -> str | None",
            "lineno": 133,
            "docstring": "Return the agent currently holding the reservation, if any."
          },
          {
            "name": "queue_snapshot",
            "signature": "(self, object_id: str) -> list[str]",
            "lineno": 137,
            "docstring": "Return the queue as an ordered list of agent IDs for debugging."
          },
          {
            "name": "metrics",
            "signature": "(self) -> dict[str, int]",
            "lineno": 141,
            "docstring": "Expose counters useful for telemetry."
          },
          {
            "name": "performance_metrics",
            "signature": "(self) -> dict[str, int]",
            "lineno": 145,
            "docstring": "Expose aggregated nanosecond timings and call counts."
          },
          {
            "name": "reset_performance_metrics",
            "signature": "(self) -> None",
            "lineno": 149,
            "docstring": null
          },
          {
            "name": "requeue_to_tail",
            "signature": "(self, object_id: str, agent_id: str, tick: int) -> None",
            "lineno": 153,
            "docstring": "Append `agent_id` to the end of the queue if not already present."
          },
          {
            "name": "remove_agent",
            "signature": "(self, agent_id: str, tick: int) -> None",
            "lineno": 162,
            "docstring": "Remove `agent_id` from all queues and active reservations."
          },
          {
            "name": "export_state",
            "signature": "(self) -> dict[str, object]",
            "lineno": 176,
            "docstring": "Serialise queue activity for snapshot persistence."
          },
          {
            "name": "import_state",
            "signature": "(self, payload: dict[str, object]) -> None",
            "lineno": 199,
            "docstring": "Restore queue activity from persisted snapshot data."
          },
          {
            "name": "_assign_next",
            "signature": "(self, object_id: str, tick: int) -> str | None",
            "lineno": 243,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 273
  },
  {
    "path": "src/townlet/world/relationships.py",
    "module": "src.townlet.world.relationships",
    "docstring": "Relationship ledger for Phase 4 social systems.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Callable",
        "dataclasses.dataclass"
      ],
      "external": [],
      "internal": []
    },
    "classes": [
      {
        "name": "RelationshipParameters",
        "lineno": 14,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Tuning knobs for relationship tie evolution.",
        "attrs": [
          {
            "name": "max_edges",
            "annotation": "int",
            "value": "6",
            "lineno": 17
          },
          {
            "name": "trust_decay",
            "annotation": "float",
            "value": "0.0",
            "lineno": 18
          },
          {
            "name": "familiarity_decay",
            "annotation": "float",
            "value": "0.0",
            "lineno": 19
          },
          {
            "name": "rivalry_decay",
            "annotation": "float",
            "value": "0.01",
            "lineno": 20
          }
        ],
        "methods": []
      },
      {
        "name": "RelationshipTie",
        "lineno": 24,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "trust",
            "annotation": "float",
            "value": "0.0",
            "lineno": 25
          },
          {
            "name": "familiarity",
            "annotation": "float",
            "value": "0.0",
            "lineno": 26
          },
          {
            "name": "rivalry",
            "annotation": "float",
            "value": "0.0",
            "lineno": 27
          }
        ],
        "methods": [
          {
            "name": "as_dict",
            "signature": "(self) -> dict[str, float]",
            "lineno": 29,
            "docstring": null
          }
        ]
      },
      {
        "name": "RelationshipLedger",
        "lineno": 40,
        "bases": [],
        "decorators": [],
        "docstring": "Maintains multi-dimensional ties for a single agent.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, *, owner_id: str, params: RelationshipParameters | None = None, eviction_hook: EvictionHook | None = None) -> None",
            "lineno": 43,
            "docstring": null
          },
          {
            "name": "apply_delta",
            "signature": "(self, other_id: str, *, trust: float = 0.0, familiarity: float = 0.0, rivalry: float = 0.0) -> RelationshipTie",
            "lineno": 55,
            "docstring": null
          },
          {
            "name": "tie_for",
            "signature": "(self, other_id: str) -> RelationshipTie | None",
            "lineno": 73,
            "docstring": "Return the tie for ``other_id`` if it exists."
          },
          {
            "name": "decay",
            "signature": "(self) -> None",
            "lineno": 78,
            "docstring": null
          },
          {
            "name": "snapshot",
            "signature": "(self) -> dict[str, dict[str, float]]",
            "lineno": 91,
            "docstring": null
          },
          {
            "name": "inject",
            "signature": "(self, payload: dict[str, dict[str, float]]) -> None",
            "lineno": 94,
            "docstring": null
          },
          {
            "name": "set_eviction_hook",
            "signature": "(self, *, owner_id: str, hook: EvictionHook | None) -> None",
            "lineno": 105,
            "docstring": null
          },
          {
            "name": "top_friends",
            "signature": "(self, limit: int) -> list[tuple[str, RelationshipTie]]",
            "lineno": 109,
            "docstring": null
          },
          {
            "name": "top_rivals",
            "signature": "(self, limit: int) -> list[tuple[str, RelationshipTie]]",
            "lineno": 119,
            "docstring": null
          },
          {
            "name": "remove_tie",
            "signature": "(self, other_id: str, *, reason: str = 'removed') -> None",
            "lineno": 129,
            "docstring": null
          },
          {
            "name": "_prune_if_needed",
            "signature": "(self, *, reason: str) -> None",
            "lineno": 134,
            "docstring": null
          },
          {
            "name": "_emit_eviction",
            "signature": "(self, other_id: str, *, reason: str) -> None",
            "lineno": 147,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "_clamp",
        "lineno": 9,
        "signature": "(value: float, *, low: float, high: float) -> float",
        "docstring": null
      },
      {
        "name": "_decay_value",
        "lineno": 155,
        "signature": "(value: float, decay: float, *, minimum: float = -1.0) -> float",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 169
  },
  {
    "path": "src/townlet/world/rivalry.py",
    "module": "src.townlet.world.rivalr",
    "docstring": "Rivalry state helpers used by conflict intro scaffolding.\n\nThese utilities intentionally stay decoupled from the world grid so we can unit\n test rivalry increments/decay behaviour in isolation before wiring into the\n main simulation loop.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Callable",
        "collections.abc.Iterable",
        "dataclasses.dataclass",
        "dataclasses.field",
        "typing.Optional"
      ],
      "external": [],
      "internal": []
    },
    "classes": [
      {
        "name": "RivalryParameters",
        "lineno": 20,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Tuning knobs for rivalry evolution.\n\nThe defaults align with the conceptual design placeholder values and are\nexpected to be replaced with config-backed settings during integration.",
        "attrs": [
          {
            "name": "increment_per_conflict",
            "annotation": "float",
            "value": "0.15",
            "lineno": 27
          },
          {
            "name": "decay_per_tick",
            "annotation": "float",
            "value": "0.01",
            "lineno": 28
          },
          {
            "name": "min_value",
            "annotation": "float",
            "value": "0.0",
            "lineno": 29
          },
          {
            "name": "max_value",
            "annotation": "float",
            "value": "1.0",
            "lineno": 30
          },
          {
            "name": "avoid_threshold",
            "annotation": "float",
            "value": "0.7",
            "lineno": 31
          },
          {
            "name": "eviction_threshold",
            "annotation": "float",
            "value": "0.05",
            "lineno": 32
          },
          {
            "name": "max_edges",
            "annotation": "int",
            "value": "6",
            "lineno": 33
          }
        ],
        "methods": []
      },
      {
        "name": "RivalryLedger",
        "lineno": 37,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": "Maintains rivalry scores against other agents for a single actor.",
        "attrs": [
          {
            "name": "owner_id",
            "annotation": "str",
            "value": null,
            "lineno": 40
          },
          {
            "name": "params",
            "annotation": "RivalryParameters",
            "value": "field(default_factory=RivalryParameters)",
            "lineno": 41
          },
          {
            "name": "eviction_hook",
            "annotation": "Optional[Callable[[str, str, str], None]]",
            "value": "None",
            "lineno": 42
          },
          {
            "name": "_scores",
            "annotation": "dict[str, float]",
            "value": "field(default_factory=dict)",
            "lineno": 43
          }
        ],
        "methods": [
          {
            "name": "apply_conflict",
            "signature": "(self, other_id: str, *, intensity: float = 1.0) -> float",
            "lineno": 45,
            "docstring": "Increase rivalry against `other_id` based on the conflict intensity."
          },
          {
            "name": "decay",
            "signature": "(self, ticks: int = 1) -> None",
            "lineno": 69,
            "docstring": "Apply passive decay across all rivalry edges."
          },
          {
            "name": "inject",
            "signature": "(self, pairs: Iterable[tuple[str, float]]) -> None",
            "lineno": 86,
            "docstring": "Seed rivalry scores from persisted state for round-tripping tests."
          },
          {
            "name": "score_for",
            "signature": "(self, other_id: str) -> float",
            "lineno": 95,
            "docstring": null
          },
          {
            "name": "should_avoid",
            "signature": "(self, other_id: str) -> bool",
            "lineno": 98,
            "docstring": "Return True when rivalry exceeds the avoidance threshold."
          },
          {
            "name": "top_rivals",
            "signature": "(self, limit: int) -> list[tuple[str, float]]",
            "lineno": 102,
            "docstring": "Return the strongest rivalry edges sorted descending."
          },
          {
            "name": "remove",
            "signature": "(self, other_id: str, *, reason: str = 'removed') -> None",
            "lineno": 113,
            "docstring": null
          },
          {
            "name": "encode_features",
            "signature": "(self, limit: int) -> list[float]",
            "lineno": 119,
            "docstring": "Encode rivalry magnitudes into a fixed-width list for observations."
          },
          {
            "name": "snapshot",
            "signature": "(self) -> dict[str, float]",
            "lineno": 128,
            "docstring": "Return a copy of rivalry scores for telemetry serialization."
          },
          {
            "name": "_emit_eviction",
            "signature": "(self, other_id: str, *, reason: str) -> None",
            "lineno": 132,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "_clamp",
        "lineno": 15,
        "signature": "(value: float, *, low: float, high: float) -> float",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 135
  },
  {
    "path": "src/townlet_ui/__init__.py",
    "module": "src.townlet_ui.__init__",
    "docstring": "Observer UI toolkit exports.",
    "imports": {
      "stdlib": [],
      "external": [
        "commands.ConsoleCommandExecutor",
        "telemetry.AgentSummary",
        "telemetry.EmploymentMetrics",
        "telemetry.TelemetryClient",
        "telemetry.TelemetrySnapshot",
        "telemetry.TransportStatus"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 19
  },
  {
    "path": "src/townlet_ui/commands.py",
    "module": "src.townlet_ui.commands",
    "docstring": "Helper utilities for dispatching console commands asynchronously.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "logging",
        "queue",
        "threading",
        "typing.Any"
      ],
      "external": [],
      "internal": [
        "townlet.console.handlers.ConsoleCommand"
      ]
    },
    "classes": [
      {
        "name": "ConsoleCommandExecutor",
        "lineno": 15,
        "bases": [],
        "decorators": [],
        "docstring": "Background dispatcher that forwards console commands via a router.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, router: Any, *, daemon: bool = True) -> None",
            "lineno": 18,
            "docstring": null
          },
          {
            "name": "submit",
            "signature": "(self, command: ConsoleCommand) -> None",
            "lineno": 26,
            "docstring": null
          },
          {
            "name": "shutdown",
            "signature": "(self, timeout: float | None = 1.0) -> None",
            "lineno": 29,
            "docstring": null
          },
          {
            "name": "_worker",
            "signature": "(self) -> None",
            "lineno": 33,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 41
  },
  {
    "path": "src/townlet_ui/dashboard.py",
    "module": "src.townlet_ui.dashboard",
    "docstring": "Rich-based console dashboard for Townlet observer UI.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Iterable",
        "collections.abc.Mapping",
        "math",
        "time",
        "typing.Any",
        "typing.TYPE_CHECKING"
      ],
      "external": [
        "numpy",
        "rich.console.Console",
        "rich.console.Group",
        "rich.console.RenderableType",
        "rich.panel.Panel",
        "rich.table.Table",
        "rich.text.Text"
      ],
      "internal": [
        "townlet.console.handlers.ConsoleCommand",
        "townlet.console.handlers.create_console_router",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot",
        "townlet_ui.commands.ConsoleCommandExecutor",
        "townlet_ui.telemetry.TelemetryClient",
        "townlet_ui.telemetry.TelemetrySnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "render_snapshot",
        "lineno": 36,
        "signature": "(snapshot: TelemetrySnapshot, tick: int, refreshed: str) -> Iterable[Panel]",
        "docstring": "Yield rich Panels representing the current telemetry snapshot."
      },
      {
        "name": "_format_top_entries",
        "lineno": 277,
        "signature": "(entries: Mapping[str, int]) -> str",
        "docstring": null
      },
      {
        "name": "_build_narration_panel",
        "lineno": 284,
        "signature": "(snapshot: TelemetrySnapshot) -> Panel",
        "docstring": null
      },
      {
        "name": "_build_anneal_panel",
        "lineno": 312,
        "signature": "(snapshot: TelemetrySnapshot) -> Panel",
        "docstring": null
      },
      {
        "name": "_promotion_border_style",
        "lineno": 434,
        "signature": "(promotion: PromotionSnapshot | None) -> str",
        "docstring": null
      },
      {
        "name": "_derive_promotion_reason",
        "lineno": 444,
        "signature": "(promotion: PromotionSnapshot, status: AnnealStatus | None) -> str",
        "docstring": null
      },
      {
        "name": "_format_metadata_summary",
        "lineno": 468,
        "signature": "(metadata: Mapping[str, Any]) -> str",
        "docstring": null
      },
      {
        "name": "_build_promotion_history_panel",
        "lineno": 484,
        "signature": "(history: Iterable[Mapping[str, Any]], border_style: str) -> Panel",
        "docstring": null
      },
      {
        "name": "_format_history_metadata",
        "lineno": 501,
        "signature": "(entry: Mapping[str, Any]) -> str",
        "docstring": null
      },
      {
        "name": "_safe_format",
        "lineno": 519,
        "signature": "(value: float | None) -> str",
        "docstring": null
      },
      {
        "name": "_format_optional_float",
        "lineno": 525,
        "signature": "(value: float | None) -> str",
        "docstring": null
      },
      {
        "name": "_build_policy_inspector_panel",
        "lineno": 531,
        "signature": "(snapshot: TelemetrySnapshot) -> Panel",
        "docstring": null
      },
      {
        "name": "_build_relationship_overlay_panel",
        "lineno": 569,
        "signature": "(snapshot: TelemetrySnapshot) -> Panel",
        "docstring": null
      },
      {
        "name": "_format_delta",
        "lineno": 604,
        "signature": "(value: float, inverse: bool = False) -> str",
        "docstring": null
      },
      {
        "name": "_build_kpi_panel",
        "lineno": 612,
        "signature": "(snapshot: TelemetrySnapshot) -> Panel",
        "docstring": null
      },
      {
        "name": "_trend_from_series",
        "lineno": 642,
        "signature": "(series: list[float]) -> tuple[str, str]",
        "docstring": null
      },
      {
        "name": "_humanize_kpi",
        "lineno": 657,
        "signature": "(key: str) -> str",
        "docstring": null
      },
      {
        "name": "run_dashboard",
        "lineno": 666,
        "signature": "(loop: SimulationLoop, *, refresh_interval: float = 1.0, max_ticks: int = 0, approve: str | None = None, defer: str | None = None, focus_agent: str | None = None, show_coords: bool = False) -> None",
        "docstring": "Continuously render dashboard against a SimulationLoop instance."
      },
      {
        "name": "_build_map_panel",
        "lineno": 731,
        "signature": "(snapshot: TelemetrySnapshot, obs_batch: Mapping[str, dict[str, np.ndarray]], focus_agent: str | None, show_coords: bool = False) -> Panel | None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "MAP_AGENT_CHAR",
        "value": "'A'",
        "lineno": 25
      },
      {
        "name": "MAP_CENTER_CHAR",
        "value": "'S'",
        "lineno": 26
      },
      {
        "name": "NARRATION_CATEGORY_STYLES",
        "value": "{'utility_outage': ('Utility Outage', 'bold red'), 'shower_complete': ('Shower Complete', 'cyan'), 'sleep_complete': ('Sleep Complete', 'green'), 'queue_conflict': ('Queue Conflict', 'magenta')}",
        "annotation": "dict[str, tuple[str, str]]",
        "lineno": 28
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 777
  },
  {
    "path": "src/townlet_ui/telemetry.py",
    "module": "src.townlet_ui.telemetr",
    "docstring": "Schema-aware telemetry client utilities for observer UI components.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "collections.abc.Mapping",
        "dataclasses.dataclass",
        "typing.Any",
        "typing.Iterable",
        "typing.cast"
      ],
      "external": [],
      "internal": [
        "townlet.console.handlers.ConsoleCommand"
      ]
    },
    "classes": [
      {
        "name": "EmploymentMetrics",
        "lineno": 51,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "pending",
            "annotation": "list[str]",
            "value": null,
            "lineno": 52
          },
          {
            "name": "pending_count",
            "annotation": "int",
            "value": null,
            "lineno": 53
          },
          {
            "name": "exits_today",
            "annotation": "int",
            "value": null,
            "lineno": 54
          },
          {
            "name": "daily_exit_cap",
            "annotation": "int",
            "value": null,
            "lineno": 55
          },
          {
            "name": "queue_limit",
            "annotation": "int",
            "value": null,
            "lineno": 56
          },
          {
            "name": "review_window",
            "annotation": "int",
            "value": null,
            "lineno": 57
          }
        ],
        "methods": []
      },
      {
        "name": "QueueHistoryEntry",
        "lineno": 61,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "tick",
            "annotation": "int",
            "value": null,
            "lineno": 62
          },
          {
            "name": "cooldown_delta",
            "annotation": "int",
            "value": null,
            "lineno": 63
          },
          {
            "name": "ghost_step_delta",
            "annotation": "int",
            "value": null,
            "lineno": 64
          },
          {
            "name": "rotation_delta",
            "annotation": "int",
            "value": null,
            "lineno": 65
          },
          {
            "name": "totals",
            "annotation": "Mapping[str, int]",
            "value": null,
            "lineno": 66
          }
        ],
        "methods": []
      },
      {
        "name": "RivalryEventEntry",
        "lineno": 70,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "tick",
            "annotation": "int",
            "value": null,
            "lineno": 71
          },
          {
            "name": "agent_a",
            "annotation": "str",
            "value": null,
            "lineno": 72
          },
          {
            "name": "agent_b",
            "annotation": "str",
            "value": null,
            "lineno": 73
          },
          {
            "name": "intensity",
            "annotation": "float",
            "value": null,
            "lineno": 74
          },
          {
            "name": "reason",
            "annotation": "str",
            "value": null,
            "lineno": 75
          }
        ],
        "methods": []
      },
      {
        "name": "ConflictMetrics",
        "lineno": 79,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "queue_cooldown_events",
            "annotation": "int",
            "value": null,
            "lineno": 80
          },
          {
            "name": "queue_ghost_step_events",
            "annotation": "int",
            "value": null,
            "lineno": 81
          },
          {
            "name": "queue_rotation_events",
            "annotation": "int",
            "value": null,
            "lineno": 82
          },
          {
            "name": "queue_history",
            "annotation": "tuple[QueueHistoryEntry, ...]",
            "value": null,
            "lineno": 83
          },
          {
            "name": "rivalry_agents",
            "annotation": "int",
            "value": null,
            "lineno": 84
          },
          {
            "name": "rivalry_events",
            "annotation": "tuple[RivalryEventEntry, ...]",
            "value": null,
            "lineno": 85
          },
          {
            "name": "raw",
            "annotation": "Mapping[str, Any]",
            "value": null,
            "lineno": 86
          }
        ],
        "methods": []
      },
      {
        "name": "NarrationEntry",
        "lineno": 90,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "tick",
            "annotation": "int",
            "value": null,
            "lineno": 91
          },
          {
            "name": "category",
            "annotation": "str",
            "value": null,
            "lineno": 92
          },
          {
            "name": "message",
            "annotation": "str",
            "value": null,
            "lineno": 93
          },
          {
            "name": "priority",
            "annotation": "bool",
            "value": null,
            "lineno": 94
          },
          {
            "name": "data",
            "annotation": "Mapping[str, Any]",
            "value": null,
            "lineno": 95
          }
        ],
        "methods": []
      },
      {
        "name": "RelationshipChurn",
        "lineno": 99,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "window_start",
            "annotation": "int",
            "value": null,
            "lineno": 100
          },
          {
            "name": "window_end",
            "annotation": "int",
            "value": null,
            "lineno": 101
          },
          {
            "name": "total_evictions",
            "annotation": "int",
            "value": null,
            "lineno": 102
          },
          {
            "name": "per_owner",
            "annotation": "Mapping[str, int]",
            "value": null,
            "lineno": 103
          },
          {
            "name": "per_reason",
            "annotation": "Mapping[str, int]",
            "value": null,
            "lineno": 104
          }
        ],
        "methods": []
      },
      {
        "name": "RelationshipUpdate",
        "lineno": 108,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "owner",
            "annotation": "str",
            "value": null,
            "lineno": 109
          },
          {
            "name": "other",
            "annotation": "str",
            "value": null,
            "lineno": 110
          },
          {
            "name": "status",
            "annotation": "str",
            "value": null,
            "lineno": 111
          },
          {
            "name": "trust",
            "annotation": "float",
            "value": null,
            "lineno": 112
          },
          {
            "name": "familiarity",
            "annotation": "float",
            "value": null,
            "lineno": 113
          },
          {
            "name": "rivalry",
            "annotation": "float",
            "value": null,
            "lineno": 114
          },
          {
            "name": "delta_trust",
            "annotation": "float",
            "value": null,
            "lineno": 115
          },
          {
            "name": "delta_familiarity",
            "annotation": "float",
            "value": null,
            "lineno": 116
          },
          {
            "name": "delta_rivalry",
            "annotation": "float",
            "value": null,
            "lineno": 117
          }
        ],
        "methods": []
      },
      {
        "name": "AgentSummary",
        "lineno": 121,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "agent_id",
            "annotation": "str",
            "value": null,
            "lineno": 122
          },
          {
            "name": "wallet",
            "annotation": "float",
            "value": null,
            "lineno": 123
          },
          {
            "name": "shift_state",
            "annotation": "str",
            "value": null,
            "lineno": 124
          },
          {
            "name": "attendance_ratio",
            "annotation": "float",
            "value": null,
            "lineno": 125
          },
          {
            "name": "wages_withheld",
            "annotation": "float",
            "value": null,
            "lineno": 126
          },
          {
            "name": "lateness_counter",
            "annotation": "int",
            "value": null,
            "lineno": 127
          },
          {
            "name": "on_shift",
            "annotation": "bool",
            "value": null,
            "lineno": 128
          }
        ],
        "methods": []
      },
      {
        "name": "RelationshipOverlayEntry",
        "lineno": 132,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "other",
            "annotation": "str",
            "value": null,
            "lineno": 133
          },
          {
            "name": "trust",
            "annotation": "float",
            "value": null,
            "lineno": 134
          },
          {
            "name": "familiarity",
            "annotation": "float",
            "value": null,
            "lineno": 135
          },
          {
            "name": "rivalry",
            "annotation": "float",
            "value": null,
            "lineno": 136
          },
          {
            "name": "delta_trust",
            "annotation": "float",
            "value": null,
            "lineno": 137
          },
          {
            "name": "delta_familiarity",
            "annotation": "float",
            "value": null,
            "lineno": 138
          },
          {
            "name": "delta_rivalry",
            "annotation": "float",
            "value": null,
            "lineno": 139
          }
        ],
        "methods": []
      },
      {
        "name": "PolicyInspectorAction",
        "lineno": 143,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "action",
            "annotation": "str",
            "value": null,
            "lineno": 144
          },
          {
            "name": "probability",
            "annotation": "float",
            "value": null,
            "lineno": 145
          }
        ],
        "methods": []
      },
      {
        "name": "PolicyInspectorEntry",
        "lineno": 149,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "agent_id",
            "annotation": "str",
            "value": null,
            "lineno": 150
          },
          {
            "name": "tick",
            "annotation": "int",
            "value": null,
            "lineno": 151
          },
          {
            "name": "selected_action",
            "annotation": "str",
            "value": null,
            "lineno": 152
          },
          {
            "name": "log_prob",
            "annotation": "float",
            "value": null,
            "lineno": 153
          },
          {
            "name": "value_pred",
            "annotation": "float",
            "value": null,
            "lineno": 154
          },
          {
            "name": "top_actions",
            "annotation": "list[PolicyInspectorAction]",
            "value": null,
            "lineno": 155
          }
        ],
        "methods": []
      },
      {
        "name": "AnnealStatus",
        "lineno": 159,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "stage",
            "annotation": "str",
            "value": null,
            "lineno": 160
          },
          {
            "name": "cycle",
            "annotation": "float | None",
            "value": null,
            "lineno": 161
          },
          {
            "name": "dataset",
            "annotation": "str",
            "value": null,
            "lineno": 162
          },
          {
            "name": "bc_accuracy",
            "annotation": "float | None",
            "value": null,
            "lineno": 163
          },
          {
            "name": "bc_threshold",
            "annotation": "float | None",
            "value": null,
            "lineno": 164
          },
          {
            "name": "bc_passed",
            "annotation": "bool",
            "value": null,
            "lineno": 165
          },
          {
            "name": "loss_flag",
            "annotation": "bool",
            "value": null,
            "lineno": 166
          },
          {
            "name": "queue_flag",
            "annotation": "bool",
            "value": null,
            "lineno": 167
          },
          {
            "name": "intensity_flag",
            "annotation": "bool",
            "value": null,
            "lineno": 168
          },
          {
            "name": "loss_baseline",
            "annotation": "float | None",
            "value": null,
            "lineno": 169
          },
          {
            "name": "queue_baseline",
            "annotation": "float | None",
            "value": null,
            "lineno": 170
          },
          {
            "name": "intensity_baseline",
            "annotation": "float | None",
            "value": null,
            "lineno": 171
          }
        ],
        "methods": []
      },
      {
        "name": "TransportStatus",
        "lineno": 175,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "connected",
            "annotation": "bool",
            "value": null,
            "lineno": 176
          },
          {
            "name": "dropped_messages",
            "annotation": "int",
            "value": null,
            "lineno": 177
          },
          {
            "name": "last_error",
            "annotation": "str | None",
            "value": null,
            "lineno": 178
          },
          {
            "name": "last_success_tick",
            "annotation": "int | None",
            "value": null,
            "lineno": 179
          },
          {
            "name": "last_failure_tick",
            "annotation": "int | None",
            "value": null,
            "lineno": 180
          },
          {
            "name": "queue_length",
            "annotation": "int",
            "value": null,
            "lineno": 181
          },
          {
            "name": "last_flush_duration_ms",
            "annotation": "float | None",
            "value": null,
            "lineno": 182
          }
        ],
        "methods": []
      },
      {
        "name": "StabilitySnapshot",
        "lineno": 186,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "alerts",
            "annotation": "tuple[str, ...]",
            "value": null,
            "lineno": 187
          },
          {
            "name": "metrics",
            "annotation": "Mapping[str, Any]",
            "value": null,
            "lineno": 188
          }
        ],
        "methods": []
      },
      {
        "name": "HealthStatus",
        "lineno": 192,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "tick",
            "annotation": "int",
            "value": null,
            "lineno": 193
          },
          {
            "name": "tick_duration_ms",
            "annotation": "float",
            "value": null,
            "lineno": 194
          },
          {
            "name": "telemetry_queue",
            "annotation": "int",
            "value": null,
            "lineno": 195
          },
          {
            "name": "telemetry_dropped",
            "annotation": "int",
            "value": null,
            "lineno": 196
          },
          {
            "name": "perturbations_pending",
            "annotation": "int",
            "value": null,
            "lineno": 197
          },
          {
            "name": "perturbations_active",
            "annotation": "int",
            "value": null,
            "lineno": 198
          },
          {
            "name": "employment_exit_queue",
            "annotation": "int",
            "value": null,
            "lineno": 199
          },
          {
            "name": "raw",
            "annotation": "Mapping[str, Any]",
            "value": null,
            "lineno": 200
          }
        ],
        "methods": []
      },
      {
        "name": "PromotionSnapshot",
        "lineno": 204,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "state",
            "annotation": "str | None",
            "value": null,
            "lineno": 205
          },
          {
            "name": "pass_streak",
            "annotation": "int",
            "value": null,
            "lineno": 206
          },
          {
            "name": "required_passes",
            "annotation": "int",
            "value": null,
            "lineno": 207
          },
          {
            "name": "candidate_ready",
            "annotation": "bool",
            "value": null,
            "lineno": 208
          },
          {
            "name": "candidate_ready_tick",
            "annotation": "int | None",
            "value": null,
            "lineno": 209
          },
          {
            "name": "last_result",
            "annotation": "str | None",
            "value": null,
            "lineno": 210
          },
          {
            "name": "last_evaluated_tick",
            "annotation": "int | None",
            "value": null,
            "lineno": 211
          },
          {
            "name": "candidate_metadata",
            "annotation": "Mapping[str, Any] | None",
            "value": null,
            "lineno": 212
          },
          {
            "name": "current_release",
            "annotation": "Mapping[str, Any] | None",
            "value": null,
            "lineno": 213
          },
          {
            "name": "history",
            "annotation": "tuple[Mapping[str, Any], ...]",
            "value": null,
            "lineno": 214
          }
        ],
        "methods": []
      },
      {
        "name": "TelemetrySnapshot",
        "lineno": 218,
        "bases": [],
        "decorators": [
          "dataclass(frozen=True)"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "schema_version",
            "annotation": "str",
            "value": null,
            "lineno": 219
          },
          {
            "name": "schema_warning",
            "annotation": "str | None",
            "value": null,
            "lineno": 220
          },
          {
            "name": "employment",
            "annotation": "EmploymentMetrics",
            "value": null,
            "lineno": 221
          },
          {
            "name": "conflict",
            "annotation": "ConflictMetrics",
            "value": null,
            "lineno": 222
          },
          {
            "name": "narrations",
            "annotation": "list[NarrationEntry]",
            "value": null,
            "lineno": 223
          },
          {
            "name": "narration_state",
            "annotation": "Mapping[str, Any]",
            "value": null,
            "lineno": 224
          },
          {
            "name": "relationships",
            "annotation": "RelationshipChurn | None",
            "value": null,
            "lineno": 225
          },
          {
            "name": "relationship_snapshot",
            "annotation": "Mapping[str, Mapping[str, Mapping[str, float]]]",
            "value": null,
            "lineno": 226
          },
          {
            "name": "relationship_updates",
            "annotation": "list[RelationshipUpdate]",
            "value": null,
            "lineno": 227
          },
          {
            "name": "relationship_overlay",
            "annotation": "Mapping[str, list[RelationshipOverlayEntry]]",
            "value": null,
            "lineno": 228
          },
          {
            "name": "agents",
            "annotation": "list[AgentSummary]",
            "value": null,
            "lineno": 229
          },
          {
            "name": "anneal",
            "annotation": "AnnealStatus | None",
            "value": null,
            "lineno": 230
          },
          {
            "name": "policy_inspector",
            "annotation": "list[PolicyInspectorEntry]",
            "value": null,
            "lineno": 231
          },
          {
            "name": "promotion",
            "annotation": "PromotionSnapshot | None",
            "value": null,
            "lineno": 232
          },
          {
            "name": "stability",
            "annotation": "StabilitySnapshot",
            "value": null,
            "lineno": 233
          },
          {
            "name": "kpis",
            "annotation": "Mapping[str, list[float]]",
            "value": null,
            "lineno": 234
          },
          {
            "name": "transport",
            "annotation": "TransportStatus",
            "value": null,
            "lineno": 235
          },
          {
            "name": "health",
            "annotation": "HealthStatus | None",
            "value": null,
            "lineno": 236
          },
          {
            "name": "raw",
            "annotation": "Mapping[str, Any]",
            "value": null,
            "lineno": 237
          }
        ],
        "methods": []
      },
      {
        "name": "SchemaMismatchError",
        "lineno": 240,
        "bases": [
          "RuntimeError"
        ],
        "decorators": [],
        "docstring": "Raised when telemetry schema is newer than the client supports.",
        "attrs": [],
        "methods": []
      },
      {
        "name": "TelemetryClient",
        "lineno": 244,
        "bases": [],
        "decorators": [],
        "docstring": "Lightweight helper to parse telemetry payloads for the observer UI.",
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, *, expected_schema_prefix: str = SUPPORTED_SCHEMA_PREFIX) -> None",
            "lineno": 247,
            "docstring": null
          },
          {
            "name": "parse_snapshot",
            "signature": "(self, payload: Mapping[str, Any]) -> TelemetrySnapshot",
            "lineno": 250,
            "docstring": "Validate and convert a telemetry payload into dataclasses."
          },
          {
            "name": "from_console",
            "signature": "(self, router: Any) -> TelemetrySnapshot",
            "lineno": 642,
            "docstring": "Fetch snapshot via console router (expects telemetry_snapshot command)."
          },
          {
            "name": "_check_schema",
            "signature": "(self, version: str) -> str | None",
            "lineno": 655,
            "docstring": null
          },
          {
            "name": "_get_section",
            "signature": "(payload: Mapping[str, Any], key: str, expected: type) -> Mapping[str, Any]",
            "lineno": 667,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "_maybe_float",
        "lineno": 10,
        "signature": "(value: object) -> float | None",
        "docstring": null
      },
      {
        "name": "_coerce_float",
        "lineno": 16,
        "signature": "(value: object, default: float = 0.0) -> float",
        "docstring": null
      },
      {
        "name": "_coerce_mapping",
        "lineno": 21,
        "signature": "(value: object) -> Mapping[str, Any] | None",
        "docstring": null
      },
      {
        "name": "_coerce_history_entries",
        "lineno": 27,
        "signature": "(value: object) -> tuple[Mapping[str, Any], ...]",
        "docstring": null
      },
      {
        "name": "_console_command",
        "lineno": 674,
        "signature": "(name: str) -> Any",
        "docstring": "Helper to build console command dataclass without importing CLI package."
      }
    ],
    "constants": [
      {
        "name": "SUPPORTED_SCHEMA_PREFIX",
        "value": "'0.9'",
        "lineno": 47
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 678
  },
  {
    "path": "tests/conftest.py",
    "module": "tests.conftest",
    "docstring": "Pytest configuration ensuring project imports resolve during tests.",
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path",
        "sys"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [],
    "constants": [
      {
        "name": "ROOT",
        "value": "Path(__file__).resolve().parents[1]",
        "lineno": 7
      },
      {
        "name": "SRC",
        "value": "ROOT / 'src'",
        "lineno": 8
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 13
  },
  {
    "path": "tests/test_affordance_hooks.py",
    "module": "tests.test_affordance_hooks",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_world",
        "lineno": 9,
        "signature": "() -> tuple[SimulationLoop, WorldState]",
        "docstring": null
      },
      {
        "name": "request_object",
        "lineno": 17,
        "signature": "(world, object_id: str, agent_id: str) -> None",
        "docstring": null
      },
      {
        "name": "test_affordance_before_after_hooks_fire_once",
        "lineno": 23,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_affordance_fail_hook_runs_once_per_failure",
        "lineno": 58,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_shower_requires_power",
        "lineno": 102,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_shower_completion_emits_event",
        "lineno": 129,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_sleep_slots_cycle_and_completion_event",
        "lineno": 153,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_sleep_attempt_fails_when_no_slots",
        "lineno": 177,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 195
  },
  {
    "path": "tests/test_affordance_manifest.py",
    "module": "tests.test_affordance_manifest",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "hashlib",
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.SimulationConfig",
        "townlet.config.load_config",
        "townlet.telemetry.publisher.TelemetryPublisher",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_configure_with_manifest",
        "lineno": 13,
        "signature": "(manifest_path: Path) -> SimulationConfig",
        "docstring": null
      },
      {
        "name": "test_affordance_manifest_loads_and_exposes_metadata",
        "lineno": 20,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_affordance_manifest_duplicate_ids_fail",
        "lineno": 52,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_affordance_manifest_missing_duration_fails",
        "lineno": 72,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_affordance_manifest_checksum_exposed_in_telemetry",
        "lineno": 87,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 114
  },
  {
    "path": "tests/test_affordance_preconditions.py",
    "module": "tests.test_affordance_preconditions",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.console.handlers.ConsoleCommand",
        "townlet.console.handlers.create_console_router",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.preconditions.PreconditionSyntaxError",
        "townlet.world.preconditions.compile_preconditions",
        "townlet.world.preconditions.evaluate_preconditions"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_make_loop",
        "lineno": 18,
        "signature": "() -> tuple[SimulationLoop, object]",
        "docstring": null
      },
      {
        "name": "_request_object",
        "lineno": 25,
        "signature": "(world, object_id: str, agent_id: str) -> None",
        "docstring": null
      },
      {
        "name": "test_compile_preconditions_normalises_booleans",
        "lineno": 31,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_compile_preconditions_rejects_function_calls",
        "lineno": 38,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_evaluate_preconditions_supports_nested_attributes",
        "lineno": 43,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_precondition_failure_blocks_affordance_and_emits_event",
        "lineno": 51,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_precondition_success_allows_affordance_start",
        "lineno": 101,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 120
  },
  {
    "path": "tests/test_basket_telemetry.py",
    "module": "tests.test_basket_telemetr",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_basket_cost_in_telemetry_snapshot",
        "lineno": 8,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 32
  },
  {
    "path": "tests/test_bc_capture_prototype.py",
    "module": "tests.test_bc_capture_prototype",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "pathlib.Path"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.policy.replay.frames_to_replay_sample",
        "townlet.policy.replay.load_replay_sample"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_synthetic_bc_capture_round_trip",
        "lineno": 11,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 64
  },
  {
    "path": "tests/test_bc_trainer.py",
    "module": "tests.test_bc_trainer",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "numpy",
        "pytest"
      ],
      "internal": [
        "townlet.policy.BCTrainer",
        "townlet.policy.BCTrainingConfig",
        "townlet.policy.BCTrajectoryDataset",
        "townlet.policy.models.ConflictAwarePolicyConfig",
        "townlet.policy.models.torch_available",
        "townlet.policy.replay.frames_to_replay_sample"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_bc_trainer_overfits_toy_dataset",
        "lineno": 14,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_bc_evaluate_accuracy",
        "lineno": 50,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 81
  },
  {
    "path": "tests/test_behavior_rivalry.py",
    "module": "tests.test_behavior_rivalr",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.policy.behavior.ScriptedBehavior",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_make_world",
        "lineno": 10,
        "signature": "() -> WorldState",
        "docstring": null
      },
      {
        "name": "test_scripted_behavior_avoids_queue_with_rival",
        "lineno": 33,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_scripted_behavior_requests_when_no_rival",
        "lineno": 48,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_behavior_retries_after_rival_leaves",
        "lineno": 57,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 69
  },
  {
    "path": "tests/test_capture_scripted_cli.py",
    "module": "tests.test_capture_scripted_cli",
    "docstring": null,
    "imports": {
      "stdlib": [
        "json",
        "pathlib.Path",
        "runpy"
      ],
      "external": [],
      "internal": [
        "townlet.policy.replay.load_replay_sample"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_capture_scripted_idle",
        "lineno": 8,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 39
  },
  {
    "path": "tests/test_cli_validate_affordances.py",
    "module": "tests.test_cli_validate_affordances",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path",
        "subprocess",
        "sys"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "_run",
        "lineno": 10,
        "signature": "(*args: str) -> subprocess.CompletedProcess[str]",
        "docstring": null
      },
      {
        "name": "test_validate_affordances_cli_success",
        "lineno": 15,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_validate_affordances_cli_failure",
        "lineno": 35,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_validate_affordances_cli_bad_precondition",
        "lineno": 50,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_validate_affordances_cli_directory",
        "lineno": 68,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "SCRIPT",
        "value": "Path('scripts/validate_affordances.py').resolve()",
        "lineno": 7
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 95
  },
  {
    "path": "tests/test_config_loader.py",
    "module": "tests.test_config_loader",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path",
        "sys",
        "types"
      ],
      "external": [
        "pytest",
        "yaml"
      ],
      "internal": [
        "townlet.config.SimulationConfig",
        "townlet.config.load_config",
        "townlet.snapshots.migrations.clear_registry",
        "townlet.snapshots.migrations.migration_registry"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "poc_config",
        "lineno": 13,
        "signature": "(tmp_path: Path) -> Path",
        "docstring": null
      },
      {
        "name": "test_load_config",
        "lineno": 20,
        "signature": "(poc_config: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_invalid_queue_cooldown_rejected",
        "lineno": 68,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_invalid_embedding_threshold_rejected",
        "lineno": 79,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_invalid_embedding_slot_count",
        "lineno": 90,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_invalid_affordance_file_absent",
        "lineno": 101,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_observation_variant_guard",
        "lineno": 112,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_ppo_config_defaults_roundtrip",
        "lineno": 123,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_observation_variant_full_supported",
        "lineno": 139,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_observation_variant_compact_supported",
        "lineno": 150,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_snapshot_autosave_cadence_validation",
        "lineno": 161,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_snapshot_identity_overrides_take_precedence",
        "lineno": 174,
        "signature": "(poc_config: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_register_snapshot_migrations_from_config",
        "lineno": 199,
        "signature": "(poc_config: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_telemetry_transport_defaults",
        "lineno": 231,
        "signature": "(poc_config: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_telemetry_file_transport_requires_path",
        "lineno": 240,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_telemetry_tcp_transport_requires_endpoint",
        "lineno": 251,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 259
  },
  {
    "path": "tests/test_conflict_scenarios.py",
    "module": "tests.test_conflict_scenarios",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path",
        "random",
        "types.SimpleNamespace"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.loader.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.policy.scenario_utils.apply_scenario",
        "townlet.world.queue_manager.QueueManager"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_run_scenario",
        "lineno": 15,
        "signature": "(config_path: str, ticks: int) -> SimulationLoop",
        "docstring": null
      },
      {
        "name": "test_queue_conflict_scenario_produces_alerts",
        "lineno": 31,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_rivalry_decay_scenario_tracks_events",
        "lineno": 47,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_queue_manager_randomised_regression",
        "lineno": 59,
        "signature": "(seed: int) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 89
  },
  {
    "path": "tests/test_conflict_telemetry.py",
    "module": "tests.test_conflict_telemetr",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.telemetry.publisher.TelemetryPublisher",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_conflict_snapshot_reports_rivalry_counts",
        "lineno": 10,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_replay_sample_matches_schema",
        "lineno": 73,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_conflict_export_import_preserves_history",
        "lineno": 82,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 125
  },
  {
    "path": "tests/test_console_commands.py",
    "module": "tests.test_console_commands",
    "docstring": null,
    "imports": {
      "stdlib": [
        "dataclasses.replace",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.ArrangedMeetEventConfig",
        "townlet.config.FloatRange",
        "townlet.config.IntRange",
        "townlet.config.PerturbationSchedulerConfig",
        "townlet.config.PriceSpikeEventConfig",
        "townlet.config.load_config",
        "townlet.console.handlers.ConsoleCommand",
        "townlet.console.handlers.create_console_router",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.snapshots.SnapshotManager",
        "townlet.snapshots.migrations.clear_registry",
        "townlet.snapshots.migrations.register_migration",
        "townlet.snapshots.state.SnapshotState",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_console_telemetry_snapshot_returns_payload",
        "lineno": 20,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_console_conflict_status_reports_history",
        "lineno": 55,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_console_queue_inspect_returns_queue_details",
        "lineno": 91,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_console_set_spawn_delay_updates_lifecycle",
        "lineno": 109,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_console_rivalry_dump_reports_pairs",
        "lineno": 133,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_employment_console_commands_manage_queue",
        "lineno": 168,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_console_schema_warning_for_newer_version",
        "lineno": 207,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_console_perturbation_requires_admin_mode",
        "lineno": 220,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_console_perturbation_commands_schedule_and_cancel",
        "lineno": 237,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_console_arrange_meet_schedules_event",
        "lineno": 295,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_console_arrange_meet_unknown_spec_returns_error",
        "lineno": 339,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_console_snapshot_commands",
        "lineno": 365,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_console_snapshot_rejects_outside_roots",
        "lineno": 447,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 463
  },
  {
    "path": "tests/test_console_dispatcher.py",
    "module": "tests.test_console_dispatcher",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.console.handlers.ConsoleCommand",
        "townlet.console.handlers.create_console_router",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "employment_loop",
        "lineno": 14,
        "signature": "() -> SimulationLoop",
        "docstring": null
      },
      {
        "name": "_queue_command",
        "lineno": 28,
        "signature": "(loop: SimulationLoop, payload: dict[str, object]) -> None",
        "docstring": null
      },
      {
        "name": "test_dispatcher_processes_employment_review",
        "lineno": 32,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_dispatcher_idempotency_reuses_history",
        "lineno": 52,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_dispatcher_requires_admin_mode",
        "lineno": 74,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_dispatcher_enforces_cmd_id_for_destructive_ops",
        "lineno": 94,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_spawn_command_creates_agent",
        "lineno": 112,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_spawn_rejects_duplicate_id",
        "lineno": 134,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_teleport_moves_agent",
        "lineno": 151,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_teleport_rejects_blocked_tile",
        "lineno": 166,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_setneed_updates_needs",
        "lineno": 187,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_setneed_rejects_unknown_need",
        "lineno": 210,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_price_updates_economy_and_basket",
        "lineno": 230,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_price_rejects_unknown_key",
        "lineno": 252,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_force_chat_updates_relationship",
        "lineno": 267,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_force_chat_requires_distinct_agents",
        "lineno": 297,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_set_rel_updates_ties",
        "lineno": 312,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_possess_acquire_and_release",
        "lineno": 343,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_possess_errors_on_duplicate_or_missing",
        "lineno": 375,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_kill_command_removes_agent",
        "lineno": 419,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_toggle_mortality_updates_flag",
        "lineno": 441,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_set_exit_cap_updates_config",
        "lineno": 463,
        "signature": "(employment_loop: SimulationLoop) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 482
  },
  {
    "path": "tests/test_console_events.py",
    "module": "tests.test_console_events",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.console.handlers.EventStream",
        "townlet.telemetry.publisher.TelemetryPublisher",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_event_stream_receives_published_events",
        "lineno": 9,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_event_stream_handles_empty_batch",
        "lineno": 32,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 40
  },
  {
    "path": "tests/test_console_promotion.py",
    "module": "tests.test_console_promotion",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.console.handlers.ConsoleCommand",
        "townlet.console.handlers.create_console_router",
        "townlet.core.sim_loop.SimulationLoop"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "admin_router",
        "lineno": 11,
        "signature": "() -> tuple[SimulationLoop, object]",
        "docstring": null
      },
      {
        "name": "make_ready",
        "lineno": 27,
        "signature": "(loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_promotion_status_command",
        "lineno": 42,
        "signature": "(admin_router: tuple[SimulationLoop, object]) -> None",
        "docstring": null
      },
      {
        "name": "test_promote_and_rollback_commands",
        "lineno": 48,
        "signature": "(admin_router: tuple[SimulationLoop, object]) -> None",
        "docstring": null
      },
      {
        "name": "test_policy_swap_command",
        "lineno": 83,
        "signature": "(admin_router: tuple[SimulationLoop, object], tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_policy_swap_missing_file",
        "lineno": 106,
        "signature": "(admin_router: tuple[SimulationLoop, object]) -> None",
        "docstring": null
      },
      {
        "name": "viewer_router",
        "lineno": 119,
        "signature": "() -> object",
        "docstring": null
      },
      {
        "name": "test_viewer_mode_forbidden",
        "lineno": 134,
        "signature": "(viewer_router: object) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 136
  },
  {
    "path": "tests/test_curate_trajectories.py",
    "module": "tests.test_curate_trajectories",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "pathlib.Path",
        "runpy"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.policy.replay.frames_to_replay_sample"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_write_sample",
        "lineno": 12,
        "signature": "(output_dir: Path, stem: str, rewards: np.ndarray, timesteps: int) -> None",
        "docstring": null
      },
      {
        "name": "test_curate_trajectories",
        "lineno": 49,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 81
  },
  {
    "path": "tests/test_embedding_allocator.py",
    "module": "tests.test_embedding_allocator",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.observations.builder.ObservationBuilder",
        "townlet.observations.embedding.EmbeddingAllocator",
        "townlet.stability.monitor.StabilityMonitor",
        "townlet.telemetry.publisher.TelemetryPublisher",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_allocator",
        "lineno": 11,
        "signature": "(*, cooldown: int = 5, max_slots: int = 2) -> EmbeddingAllocator",
        "docstring": null
      },
      {
        "name": "test_allocate_reuses_slot_after_cooldown",
        "lineno": 19,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_allocator_respects_multiple_slots",
        "lineno": 39,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_observation_builder_releases_on_termination",
        "lineno": 59,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_telemetry_exposes_allocator_metrics",
        "lineno": 82,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_stability_monitor_sets_alert_on_warning",
        "lineno": 97,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_telemetry_records_events",
        "lineno": 110,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_stability_alerts_on_affordance_failures",
        "lineno": 129,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 142
  },
  {
    "path": "tests/test_employment_loop.py",
    "module": "tests.test_employment_loo",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_loop_with_employment",
        "lineno": 10,
        "signature": "() -> SimulationLoop",
        "docstring": null
      },
      {
        "name": "advance_ticks",
        "lineno": 41,
        "signature": "(loop: SimulationLoop, ticks: int) -> None",
        "docstring": null
      },
      {
        "name": "test_on_time_shift_records_attendance",
        "lineno": 46,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_late_arrival_accumulates_wages_withheld",
        "lineno": 64,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_employment_exit_queue_respects_cap_and_manual_override",
        "lineno": 82,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 120
  },
  {
    "path": "tests/test_lifecycle_manager.py",
    "module": "tests.test_lifecycle_manager",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.lifecycle.manager.LifecycleManager",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_make_world",
        "lineno": 10,
        "signature": "(respawn_delay: int = 0) -> tuple[LifecycleManager, WorldState]",
        "docstring": null
      },
      {
        "name": "_spawn_agent",
        "lineno": 20,
        "signature": "(world: WorldState, agent_id: str = 'alice') -> AgentSnapshot",
        "docstring": null
      },
      {
        "name": "test_respawn_after_delay",
        "lineno": 33,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_employment_exit_emits_event_and_resets_state",
        "lineno": 53,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_employment_daily_reset",
        "lineno": 70,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_termination_reasons_captured",
        "lineno": 79,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 89
  },
  {
    "path": "tests/test_need_decay.py",
    "module": "tests.test_need_deca",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.lifecycle.manager.LifecycleManager",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_make_world",
        "lineno": 14,
        "signature": "() -> tuple[LifecycleManager, WorldState]",
        "docstring": null
      },
      {
        "name": "_spawn_agent",
        "lineno": 23,
        "signature": "(world: WorldState, *, hunger: float = 0.8, hygiene: float = 0.7, energy: float = 0.6) -> AgentSnapshot",
        "docstring": null
      },
      {
        "name": "test_need_decay_matches_config",
        "lineno": 42,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_need_decay_clamps_at_zero",
        "lineno": 55,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_lifecycle_hunger_threshold_applies",
        "lineno": 66,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_agent_snapshot_clamps_on_init",
        "lineno": 79,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "CONFIG_PATH",
        "value": "Path('configs/examples/poc_hybrid.yaml')",
        "lineno": 11
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 89
  },
  {
    "path": "tests/test_observation_builder.py",
    "module": "tests.test_observation_builder",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.console.command.ConsoleCommandEnvelope",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.observations.builder.ObservationBuilder",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_world",
        "lineno": 12,
        "signature": "(enforce_job_loop: bool = False) -> SimulationLoop",
        "docstring": null
      },
      {
        "name": "test_observation_builder_hybrid_map_and_features",
        "lineno": 40,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_observation_ctx_reset_releases_slot",
        "lineno": 88,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_observation_rivalry_features_reflect_conflict",
        "lineno": 102,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_observation_queue_and_reservation_flags",
        "lineno": 114,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_observation_respawn_resets_features",
        "lineno": 137,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_ctx_reset_flag_on_teleport_and_possession",
        "lineno": 162,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 194
  },
  {
    "path": "tests/test_observation_builder_compact.py",
    "module": "tests.test_observation_builder_compact",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.observations.builder.ObservationBuilder",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_compact_world",
        "lineno": 13,
        "signature": "() -> SimulationLoop",
        "docstring": null
      },
      {
        "name": "test_compact_observation_features_only",
        "lineno": 30,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 63
  },
  {
    "path": "tests/test_observation_builder_full.py",
    "module": "tests.test_observation_builder_full",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.observations.builder.ObservationBuilder",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_full_world",
        "lineno": 13,
        "signature": "() -> SimulationLoop",
        "docstring": null
      },
      {
        "name": "test_full_observation_map_and_features",
        "lineno": 40,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 83
  },
  {
    "path": "tests/test_observations_social_snippet.py",
    "module": "tests.test_observations_social_snippet",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "numpy",
        "pytest"
      ],
      "internal": [
        "townlet.config.SimulationConfig",
        "townlet.config.load_config",
        "townlet.observations.builder.ObservationBuilder",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "base_config",
        "lineno": 14,
        "signature": "() -> SimulationConfig",
        "docstring": null
      },
      {
        "name": "_build_world",
        "lineno": 18,
        "signature": "(config: SimulationConfig) -> WorldState",
        "docstring": null
      },
      {
        "name": "test_social_snippet_vector_length",
        "lineno": 38,
        "signature": "(base_config: SimulationConfig) -> None",
        "docstring": null
      },
      {
        "name": "test_relationship_stage_required",
        "lineno": 58,
        "signature": "(base_config: SimulationConfig) -> None",
        "docstring": null
      },
      {
        "name": "test_disable_aggregates_via_config",
        "lineno": 66,
        "signature": "(base_config: SimulationConfig) -> None",
        "docstring": null
      },
      {
        "name": "test_observation_matches_golden_fixture",
        "lineno": 84,
        "signature": "(base_config: SimulationConfig) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 95
  },
  {
    "path": "tests/test_observer_payload.py",
    "module": "tests.test_observer_payload",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.telemetry.publisher.TelemetryPublisher",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_loop",
        "lineno": 9,
        "signature": "() -> SimulationLoop",
        "docstring": null
      },
      {
        "name": "test_observer_payload_contains_job_and_economy",
        "lineno": 23,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_planning_payload_consistency",
        "lineno": 38,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 53
  },
  {
    "path": "tests/test_observer_ui_dashboard.py",
    "module": "tests.test_observer_ui_dashboard",
    "docstring": null,
    "imports": {
      "stdlib": [
        "dataclasses.replace",
        "pathlib.Path"
      ],
      "external": [
        "pytest",
        "rich.console.Console"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.console.handlers.create_console_router",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.policy.models.torch_available",
        "townlet.world.grid.AgentSnapshot",
        "townlet_ui.dashboard._build_map_panel",
        "townlet_ui.dashboard._derive_promotion_reason",
        "townlet_ui.dashboard._promotion_border_style",
        "townlet_ui.dashboard.render_snapshot",
        "townlet_ui.dashboard.run_dashboard",
        "townlet_ui.telemetry.AnnealStatus",
        "townlet_ui.telemetry.PromotionSnapshot",
        "townlet_ui.telemetry.TelemetryClient"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_loop",
        "lineno": 15,
        "signature": "() -> SimulationLoop",
        "docstring": null
      },
      {
        "name": "test_render_snapshot_produces_panels",
        "lineno": 39,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_run_dashboard_advances_loop",
        "lineno": 73,
        "signature": "(monkeypatch: pytest.MonkeyPatch) -> None",
        "docstring": null
      },
      {
        "name": "test_build_map_panel_produces_table",
        "lineno": 85,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_narration_panel_shows_styled_categories",
        "lineno": 97,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_policy_inspector_snapshot_contains_entries",
        "lineno": 184,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_promotion_reason_logic",
        "lineno": 197,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_promotion_border_styles",
        "lineno": 262,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 280
  },
  {
    "path": "tests/test_observer_ui_executor.py",
    "module": "tests.test_observer_ui_executor",
    "docstring": null,
    "imports": {
      "stdlib": [
        "time"
      ],
      "external": [],
      "internal": [
        "townlet.console.handlers.ConsoleCommand",
        "townlet_ui.commands.ConsoleCommandExecutor"
      ]
    },
    "classes": [
      {
        "name": "DummyRouter",
        "lineno": 7,
        "bases": [],
        "decorators": [],
        "docstring": null,
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self) -> None",
            "lineno": 8,
            "docstring": null
          },
          {
            "name": "dispatch",
            "signature": "(self, command: ConsoleCommand) -> None",
            "lineno": 11,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "test_console_command_executor_dispatches_async",
        "lineno": 16,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_console_command_executor_swallow_errors",
        "lineno": 26,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 33
  },
  {
    "path": "tests/test_observer_ui_script.py",
    "module": "tests.test_observer_ui_script",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path",
        "subprocess",
        "sys"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "test_observer_ui_script_runs_single_tick",
        "lineno": 6,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 22
  },
  {
    "path": "tests/test_perturbation_config.py",
    "module": "tests.test_perturbation_config",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.PerturbationKind",
        "townlet.config.PerturbationSchedulerConfig",
        "townlet.config.PriceSpikeEventConfig",
        "townlet.config.SimulationConfig",
        "townlet.config.load_config"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_simulation_config_exposes_perturbations",
        "lineno": 12,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_price_spike_event_config_parses_ranges",
        "lineno": 22,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 38
  },
  {
    "path": "tests/test_perturbation_scheduler.py",
    "module": "tests.test_perturbation_scheduler",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.ArrangedMeetEventConfig",
        "townlet.config.FloatRange",
        "townlet.config.IntRange",
        "townlet.config.PerturbationSchedulerConfig",
        "townlet.config.PriceSpikeEventConfig",
        "townlet.config.SimulationConfig",
        "townlet.config.load_config",
        "townlet.scheduler.perturbations.PerturbationScheduler",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_base_config",
        "lineno": 16,
        "signature": "() -> SimulationConfig",
        "docstring": null
      },
      {
        "name": "test_manual_event_activation_and_expiry",
        "lineno": 48,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_auto_scheduling_respects_cooldowns",
        "lineno": 75,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_cancel_event_removes_from_active",
        "lineno": 96,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 106
  },
  {
    "path": "tests/test_policy_anneal_blend.py",
    "module": "tests.test_policy_anneal_blend",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.policy.behavior.AgentIntent",
        "townlet.policy.runner.PolicyRuntime",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_make_world",
        "lineno": 9,
        "signature": "(option_commit_ticks: int | None = None) -> tuple[PolicyRuntime, WorldState]",
        "docstring": null
      },
      {
        "name": "test_anneal_ratio_uses_provider_when_enabled",
        "lineno": 24,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_anneal_ratio_mix_respects_probability",
        "lineno": 41,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_blend_disabled_returns_scripted",
        "lineno": 64,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_option_commit_blocks_switch_until_expiry",
        "lineno": 77,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_option_commit_clears_on_termination",
        "lineno": 128,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_option_commit_respects_disabled_setting",
        "lineno": 143,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 155
  },
  {
    "path": "tests/test_policy_models.py",
    "module": "tests.test_policy_models",
    "docstring": null,
    "imports": {
      "stdlib": [],
      "external": [
        "pytest",
        "torch"
      ],
      "internal": [
        "townlet.policy.models.ConflictAwarePolicyConfig",
        "townlet.policy.models.ConflictAwarePolicyNetwork",
        "townlet.policy.models.TorchNotAvailableError",
        "townlet.policy.models.torch_available"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_conflict_policy_network_requires_torch_when_unavailable",
        "lineno": 11,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_conflict_policy_network_forward",
        "lineno": 20,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 32
  },
  {
    "path": "tests/test_policy_rivalry_behavior.py",
    "module": "tests.test_policy_rivalry_behavior",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.loader.load_config",
        "townlet.policy.behavior.ScriptedBehavior",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "base_config",
        "lineno": 13,
        "signature": "()",
        "docstring": null
      },
      {
        "name": "_build_world",
        "lineno": 17,
        "signature": "(base_config)",
        "docstring": null
      },
      {
        "name": "_occupy",
        "lineno": 41,
        "signature": "(world: WorldState, object_id: str, agent_id: str) -> None",
        "docstring": null
      },
      {
        "name": "test_agents_avoid_rivals_when_rivalry_high",
        "lineno": 45,
        "signature": "(base_config)",
        "docstring": null
      },
      {
        "name": "test_agents_request_again_after_rivalry_decay",
        "lineno": 56,
        "signature": "(base_config)",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 67
  },
  {
    "path": "tests/test_ppo_utils.py",
    "module": "tests.test_ppo_utils",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "torch"
      ],
      "internal": [
        "townlet.policy.ppo.utils"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_compute_gae_single_step",
        "lineno": 8,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_value_baseline_from_old_preds_handles_bootstrap",
        "lineno": 23,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_policy_surrogate_clipping_behaviour",
        "lineno": 33,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_clipped_value_loss_respects_clip",
        "lineno": 47,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 65
  },
  {
    "path": "tests/test_promotion_cli.py",
    "module": "tests.test_promotion_cli",
    "docstring": null,
    "imports": {
      "stdlib": [
        "json",
        "pathlib.Path",
        "subprocess",
        "sys"
      ],
      "external": [
        "pytest"
      ],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "write_summary",
        "lineno": 12,
        "signature": "(tmp_path: Path, accuracy: float, threshold: float = 0.9) -> Path",
        "docstring": null
      },
      {
        "name": "test_promotion_cli_pass",
        "lineno": 26,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_promotion_cli_fail",
        "lineno": 34,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_promotion_drill",
        "lineno": 42,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "PYTHON",
        "value": "Path(sys.executable)",
        "lineno": 8
      },
      {
        "name": "SCRIPT",
        "value": "Path('scripts/promotion_evaluate.py')",
        "lineno": 9
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 52
  },
  {
    "path": "tests/test_promotion_evaluate_cli.py",
    "module": "tests.test_promotion_evaluate_cli",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "pathlib.Path",
        "subprocess",
        "sys"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "_run",
        "lineno": 11,
        "signature": "(*args: str) -> subprocess.CompletedProcess[str]",
        "docstring": null
      },
      {
        "name": "test_promotion_evaluate_promote",
        "lineno": 16,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_promotion_evaluate_hold_flags",
        "lineno": 40,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_promotion_evaluate_dry_run",
        "lineno": 64,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "SCRIPT",
        "value": "Path('scripts/promotion_evaluate.py').resolve()",
        "lineno": 8
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 84
  },
  {
    "path": "tests/test_promotion_manager.py",
    "module": "tests.test_promotion_manager",
    "docstring": null,
    "imports": {
      "stdlib": [
        "json",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.stability.promotion.PromotionManager"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_manager",
        "lineno": 8,
        "signature": "(log_path: Path | None = None) -> PromotionManager",
        "docstring": null
      },
      {
        "name": "promotion_metrics",
        "lineno": 15,
        "signature": "(pass_streak: int, required: int, ready: bool, last_result: str | None = None, last_tick: int | None = None) -> dict[str, object]",
        "docstring": null
      },
      {
        "name": "test_promotion_state_transitions",
        "lineno": 34,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_promotion_manager_export_import",
        "lineno": 52,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_mark_promoted_and_rollback",
        "lineno": 73,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_rollback_without_metadata_reverts_to_initial",
        "lineno": 92,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_promotion_log_written",
        "lineno": 100,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 110
  },
  {
    "path": "tests/test_queue_fairness.py",
    "module": "tests.test_queue_fairness",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.world.queue_manager.QueueManager"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_make_queue_manager",
        "lineno": 11,
        "signature": "() -> QueueManager",
        "docstring": null
      },
      {
        "name": "test_cooldown_blocks_repeat_entry_and_tracks_metric",
        "lineno": 16,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_ghost_step_promotes_waiter_after_blockages",
        "lineno": 38,
        "signature": "(ghost_limit: int) -> None",
        "docstring": null
      },
      {
        "name": "test_queue_snapshot_reflects_waiting_order",
        "lineno": 61,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_queue_performance_metrics_accumulate_time",
        "lineno": 79,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 89
  },
  {
    "path": "tests/test_queue_manager.py",
    "module": "tests.test_queue_manager",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.world.queue_manager.QueueManager"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "queue_manager",
        "lineno": 10,
        "signature": "() -> QueueManager",
        "docstring": null
      },
      {
        "name": "test_queue_cooldown_enforced",
        "lineno": 16,
        "signature": "(queue_manager: QueueManager) -> None",
        "docstring": null
      },
      {
        "name": "test_queue_prioritises_wait_time",
        "lineno": 26,
        "signature": "(queue_manager: QueueManager) -> None",
        "docstring": null
      },
      {
        "name": "test_ghost_step_trigger",
        "lineno": 43,
        "signature": "(queue_manager: QueueManager) -> None",
        "docstring": null
      },
      {
        "name": "test_requeue_to_tail_rotates_agent",
        "lineno": 57,
        "signature": "(queue_manager: QueueManager) -> None",
        "docstring": null
      },
      {
        "name": "test_record_blocked_attempt_counts_and_triggers",
        "lineno": 79,
        "signature": "(queue_manager: QueueManager) -> None",
        "docstring": null
      },
      {
        "name": "test_cooldown_expiration_clears_entries",
        "lineno": 86,
        "signature": "(queue_manager: QueueManager) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 92
  },
  {
    "path": "tests/test_queue_metrics.py",
    "module": "tests.test_queue_metrics",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_make_world",
        "lineno": 9,
        "signature": "() -> WorldState",
        "docstring": null
      },
      {
        "name": "test_queue_metrics_capture_ghost_step_and_rotation",
        "lineno": 17,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_nightly_reset_preserves_queue_metrics",
        "lineno": 49,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 63
  },
  {
    "path": "tests/test_queue_resume.py",
    "module": "tests.test_queue_resume",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path",
        "random"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "base_config",
        "lineno": 14,
        "signature": "()",
        "docstring": null
      },
      {
        "name": "_setup_loop",
        "lineno": 21,
        "signature": "(config) -> SimulationLoop",
        "docstring": null
      },
      {
        "name": "test_queue_metrics_resume",
        "lineno": 36,
        "signature": "(tmp_path: Path, base_config) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 55
  },
  {
    "path": "tests/test_relationship_integration.py",
    "module": "tests.test_relationship_integration",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.agents.models.Personality",
        "townlet.config.SimulationConfig",
        "townlet.config.load_config",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "base_config",
        "lineno": 13,
        "signature": "() -> SimulationConfig",
        "docstring": null
      },
      {
        "name": "_with_relationship_modifiers",
        "lineno": 17,
        "signature": "(config: SimulationConfig, enabled: bool) -> SimulationConfig",
        "docstring": null
      },
      {
        "name": "_build_world",
        "lineno": 25,
        "signature": "(config: SimulationConfig) -> WorldState",
        "docstring": null
      },
      {
        "name": "_familiarity",
        "lineno": 44,
        "signature": "(world: WorldState, owner: str, other: str) -> float",
        "docstring": null
      },
      {
        "name": "test_chat_success_personality_bonus_applied",
        "lineno": 49,
        "signature": "(base_config: SimulationConfig) -> None",
        "docstring": null
      },
      {
        "name": "test_chat_success_parity_when_disabled",
        "lineno": 59,
        "signature": "(base_config: SimulationConfig) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 66
  },
  {
    "path": "tests/test_relationship_ledger.py",
    "module": "tests.test_relationship_ledger",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [],
      "internal": [
        "townlet.world.relationships.RelationshipLedger",
        "townlet.world.relationships.RelationshipParameters"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_apply_delta_clamps_and_prunes",
        "lineno": 6,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_decay_removes_zero_ties",
        "lineno": 19,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_eviction_hook_invoked_for_capacity",
        "lineno": 31,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_eviction_hook_invoked_for_decay",
        "lineno": 48,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 64
  },
  {
    "path": "tests/test_relationship_metrics.py",
    "module": "tests.test_relationship_metrics",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.telemetry.relationship_metrics.RelationshipChurnAccumulator",
        "townlet.telemetry.relationship_metrics.RelationshipEvictionSample",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_record_eviction_tracks_counts",
        "lineno": 15,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_window_rolls_and_history_records_samples",
        "lineno": 25,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_latest_payload_round_trips_via_ingest",
        "lineno": 48,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_invalid_configuration_raises",
        "lineno": 65,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_world_relationship_metrics_records_evictions",
        "lineno": 73,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_world_relationship_update_symmetry",
        "lineno": 86,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_queue_events_modify_relationships",
        "lineno": 97,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_shared_meal_updates_relationship",
        "lineno": 136,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_absence_triggers_took_my_shift_relationships",
        "lineno": 170,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_late_help_creates_positive_relationship",
        "lineno": 212,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_chat_outcomes_adjust_relationships",
        "lineno": 254,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_relationship_tie_helper_returns_current_values",
        "lineno": 276,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_consume_chat_events_is_single_use",
        "lineno": 287,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 308
  },
  {
    "path": "tests/test_relationship_personality_modifiers.py",
    "module": "tests.test_relationship_personality_modifiers",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.agents.Personality",
        "townlet.agents.RelationshipDelta",
        "townlet.agents.apply_personality_modifiers"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_modifiers_disabled_returns_baseline",
        "lineno": 8,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_forgiveness_scales_negative_values",
        "lineno": 20,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_extroversion_adds_chat_bonus",
        "lineno": 34,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_ambition_scales_conflict_rivalry",
        "lineno": 46,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_unforgiving_agent_intensifies_negative_hits",
        "lineno": 58,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 67
  },
  {
    "path": "tests/test_reward_engine.py",
    "module": "tests.test_reward_engine",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.rewards.engine.RewardEngine",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [
      {
        "name": "StubSnapshot",
        "lineno": 10,
        "bases": [],
        "decorators": [],
        "docstring": null,
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, needs: dict[str, float], wallet: float) -> None",
            "lineno": 11,
            "docstring": null
          }
        ]
      },
      {
        "name": "StubWorld",
        "lineno": 16,
        "bases": [],
        "decorators": [],
        "docstring": null,
        "attrs": [],
        "methods": [
          {
            "name": "__init__",
            "signature": "(self, config, snapshot: StubSnapshot, context: dict[str, float]) -> None",
            "lineno": 17,
            "docstring": null
          },
          {
            "name": "consume_chat_events",
            "signature": "(self)",
            "lineno": 28,
            "docstring": null
          },
          {
            "name": "agent_context",
            "signature": "(self, agent_id: str) -> dict[str, float]",
            "lineno": 31,
            "docstring": null
          },
          {
            "name": "relationship_tie",
            "signature": "(self, subject: str, target: str)",
            "lineno": 34,
            "docstring": null
          },
          {
            "name": "rivalry_top",
            "signature": "(self, agent_id: str, limit: int)",
            "lineno": 37,
            "docstring": null
          }
        ]
      }
    ],
    "functions": [
      {
        "name": "_make_world",
        "lineno": 41,
        "signature": "(hunger: float = 0.5) -> WorldState",
        "docstring": null
      },
      {
        "name": "test_reward_negative_with_high_deficit",
        "lineno": 53,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_reward_clipped_by_config",
        "lineno": 59,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_survival_tick_positive_when_balanced",
        "lineno": 66,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_chat_reward_applied_for_successful_conversation",
        "lineno": 81,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_chat_reward_skipped_when_needs_override_triggers",
        "lineno": 109,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_chat_reward_blocked_within_termination_window",
        "lineno": 135,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_episode_clip_enforced",
        "lineno": 164,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_wage_and_punctuality_bonus",
        "lineno": 181,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_terminal_penalty_applied_for_faint",
        "lineno": 217,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_terminal_penalty_applied_for_eviction",
        "lineno": 240,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 261
  },
  {
    "path": "tests/test_reward_summary.py",
    "module": "tests.test_reward_summar",
    "docstring": null,
    "imports": {
      "stdlib": [
        "json",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "scripts.reward_summary.ComponentStats",
        "scripts.reward_summary.RewardAggregator",
        "scripts.reward_summary.collect_statistics",
        "scripts.reward_summary.render_text"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_component_stats_mean_and_extremes",
        "lineno": 8,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_reward_aggregator_tracks_components",
        "lineno": 19,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 49
  },
  {
    "path": "tests/test_rivalry_ledger.py",
    "module": "tests.test_rivalry_ledger",
    "docstring": null,
    "imports": {
      "stdlib": [],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.world.rivalry.RivalryLedger",
        "townlet.world.rivalry.RivalryParameters"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_increment_and_clamp_and_eviction",
        "lineno": 6,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_decay_and_eviction_threshold",
        "lineno": 20,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_should_avoid_toggle",
        "lineno": 32,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 38
  },
  {
    "path": "tests/test_rivalry_state.py",
    "module": "tests.test_rivalry_state",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations"
      ],
      "external": [],
      "internal": [
        "townlet.world.rivalry.RivalryLedger",
        "townlet.world.rivalry.RivalryParameters"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_apply_conflict_clamps_to_max",
        "lineno": 6,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_decay_evicts_low_scores",
        "lineno": 17,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_should_avoid_threshold",
        "lineno": 26,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_encode_features_fixed_width",
        "lineno": 35,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 43
  },
  {
    "path": "tests/test_rollout_buffer.py",
    "module": "tests.test_rollout_buffer",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "pathlib.Path"
      ],
      "external": [
        "numpy",
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.policy.rollout.RolloutBuffer",
        "townlet.policy.runner.TrainingHarness"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_dummy_frame",
        "lineno": 14,
        "signature": "(agent_id: str, reward: float = 0.0, done: bool = False) -> dict[str, object]",
        "docstring": null
      },
      {
        "name": "test_rollout_buffer_grouping_to_samples",
        "lineno": 28,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_training_harness_capture_rollout",
        "lineno": 41,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_rollout_buffer_empty_build_dataset_raises",
        "lineno": 67,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_rollout_buffer_single_timestep_metrics",
        "lineno": 73,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 85
  },
  {
    "path": "tests/test_rollout_capture.py",
    "module": "tests.test_rollout_capture",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "pathlib.Path",
        "subprocess",
        "sys"
      ],
      "external": [
        "numpy",
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_capture_rollout_scenarios",
        "lineno": 27,
        "signature": "(tmp_path: Path, config_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "SCENARIO_CONFIGS",
        "value": "[Path('configs/scenarios/kitchen_breakfast.yaml'), Path('configs/scenarios/queue_conflict.yaml'), Path('configs/scenarios/employment_punctuality.yaml'), Path('configs/scenarios/rivalry_decay.yaml'), Path('configs/scenarios/observation_baseline.yaml')]",
        "lineno": 12
      },
      {
        "name": "GOLDEN_STATS_PATH",
        "value": "Path('docs/samples/rollout_scenario_stats.json')",
        "lineno": 20
      },
      {
        "name": "GOLDEN_STATS",
        "value": "json.loads(GOLDEN_STATS_PATH.read_text()) if GOLDEN_STATS_PATH.exists() else {}",
        "lineno": 21
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 109
  },
  {
    "path": "tests/test_run_anneal_rehearsal.py",
    "module": "tests.test_run_anneal_rehearsal",
    "docstring": null,
    "imports": {
      "stdlib": [
        "importlib.util",
        "pathlib.Path",
        "sys"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.policy.models.torch_available"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_run_anneal_rehearsal_pass",
        "lineno": 23,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 33
  },
  {
    "path": "tests/test_scripted_behavior.py",
    "module": "tests.test_scripted_behavior",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "numpy"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.policy.behavior.AgentIntent",
        "townlet.policy.behavior.BehaviorController",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_scripted_behavior_determinism",
        "lineno": 13,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 85
  },
  {
    "path": "tests/test_sim_loop_snapshot.py",
    "module": "tests.test_sim_loop_snapshot",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "pathlib.Path",
        "random"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.SimulationConfig",
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.snapshots.state.snapshot_from_world",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "base_config",
        "lineno": 16,
        "signature": "()",
        "docstring": null
      },
      {
        "name": "test_simulation_loop_snapshot_round_trip",
        "lineno": 23,
        "signature": "(tmp_path: Path, base_config) -> None",
        "docstring": null
      },
      {
        "name": "test_save_snapshot_uses_config_root_and_identity_override",
        "lineno": 70,
        "signature": "(tmp_path: Path, base_config) -> None",
        "docstring": null
      },
      {
        "name": "test_simulation_resume_equivalence",
        "lineno": 98,
        "signature": "(tmp_path: Path, base_config) -> None",
        "docstring": null
      },
      {
        "name": "test_policy_transitions_resume",
        "lineno": 174,
        "signature": "(tmp_path: Path, base_config) -> None",
        "docstring": null
      },
      {
        "name": "_normalise_snapshot",
        "lineno": 201,
        "signature": "(snapshot: dict[str, object]) -> dict[str, object]",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 214
  },
  {
    "path": "tests/test_sim_loop_structure.py",
    "module": "tests.test_sim_loop_structure",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.core.sim_loop.TickArtifacts"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_simulation_loop_runs_one_tick",
        "lineno": 7,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 14
  },
  {
    "path": "tests/test_snapshot_manager.py",
    "module": "tests.test_snapshot_manager",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "pathlib.Path",
        "random"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.PerturbationKind",
        "townlet.config.SimulationConfig",
        "townlet.config.load_config",
        "townlet.scheduler.perturbations.PerturbationScheduler",
        "townlet.scheduler.perturbations.ScheduledPerturbation",
        "townlet.snapshots.state.SNAPSHOT_SCHEMA_VERSION",
        "townlet.snapshots.state.SnapshotManager",
        "townlet.snapshots.state.SnapshotState",
        "townlet.snapshots.state.apply_snapshot_to_telemetry",
        "townlet.snapshots.state.apply_snapshot_to_world",
        "townlet.snapshots.state.snapshot_from_world",
        "townlet.telemetry.publisher.TelemetryPublisher",
        "townlet.utils.encode_rng_state",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "sample_config",
        "lineno": 24,
        "signature": "() -> SimulationConfig",
        "docstring": null
      },
      {
        "name": "test_snapshot_round_trip",
        "lineno": 31,
        "signature": "(tmp_path: Path, sample_config) -> None",
        "docstring": null
      },
      {
        "name": "test_snapshot_config_mismatch_raises",
        "lineno": 120,
        "signature": "(tmp_path: Path, sample_config) -> None",
        "docstring": null
      },
      {
        "name": "test_snapshot_missing_relationships_field_rejected",
        "lineno": 128,
        "signature": "(tmp_path: Path, sample_config) -> None",
        "docstring": null
      },
      {
        "name": "test_snapshot_schema_version_mismatch",
        "lineno": 142,
        "signature": "(tmp_path: Path, sample_config) -> None",
        "docstring": null
      },
      {
        "name": "_config_with_snapshot_updates",
        "lineno": 153,
        "signature": "(config: SimulationConfig, updates: dict[str, object]) -> SimulationConfig",
        "docstring": null
      },
      {
        "name": "test_snapshot_mismatch_allowed_when_guardrail_disabled",
        "lineno": 163,
        "signature": "(tmp_path: Path, sample_config: SimulationConfig) -> None",
        "docstring": null
      },
      {
        "name": "test_snapshot_schema_downgrade_honours_allow_flag",
        "lineno": 179,
        "signature": "(tmp_path: Path, sample_config: SimulationConfig) -> None",
        "docstring": null
      },
      {
        "name": "test_world_relationship_snapshot_round_trip",
        "lineno": 200,
        "signature": "(tmp_path: Path, sample_config: SimulationConfig) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 327
  },
  {
    "path": "tests/test_snapshot_migrations.py",
    "module": "tests.test_snapshot_migrations",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "dataclasses.replace",
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.SimulationConfig",
        "townlet.config.load_config",
        "townlet.snapshots.SnapshotManager",
        "townlet.snapshots.SnapshotState",
        "townlet.snapshots.migrations.clear_registry",
        "townlet.snapshots.migrations.register_migration"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "sample_config",
        "lineno": 14,
        "signature": "() -> SimulationConfig",
        "docstring": null
      },
      {
        "name": "reset_registry",
        "lineno": 22,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "_basic_state",
        "lineno": 28,
        "signature": "(config: SimulationConfig) -> SnapshotState",
        "docstring": null
      },
      {
        "name": "test_snapshot_migration_applied",
        "lineno": 32,
        "signature": "(tmp_path: Path, sample_config: SimulationConfig) -> None",
        "docstring": null
      },
      {
        "name": "test_snapshot_migration_multi_step",
        "lineno": 51,
        "signature": "(tmp_path: Path, sample_config: SimulationConfig) -> None",
        "docstring": null
      },
      {
        "name": "test_snapshot_migration_missing_path_raises",
        "lineno": 74,
        "signature": "(tmp_path: Path, sample_config: SimulationConfig) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 82
  },
  {
    "path": "tests/test_stability_monitor.py",
    "module": "tests.test_stability_monitor",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.stability.monitor.StabilityMonitor"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_monitor",
        "lineno": 7,
        "signature": "() -> StabilityMonitor",
        "docstring": null
      },
      {
        "name": "_track_minimal",
        "lineno": 19,
        "signature": "(monitor: StabilityMonitor, *, tick: int, embedding_warning: bool = False, queue_alert: bool = False) -> None",
        "docstring": null
      },
      {
        "name": "test_starvation_spike_alert_triggers_after_streak",
        "lineno": 42,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_option_thrash_alert_averages_over_window",
        "lineno": 59,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_reward_variance_alert_exports_state",
        "lineno": 76,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_queue_fairness_alerts_include_metrics",
        "lineno": 107,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_rivalry_spike_alert_triggers_on_intensity",
        "lineno": 128,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_promotion_window_tracking",
        "lineno": 147,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_promotion_window_respects_allowed_alerts",
        "lineno": 188,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 212
  },
  {
    "path": "tests/test_stability_telemetry.py",
    "module": "tests.test_stability_telemetr",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.console.handlers.ConsoleCommand",
        "townlet.console.handlers.create_console_router",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_stability_alerts_exposed_via_telemetry_snapshot",
        "lineno": 13,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 47
  },
  {
    "path": "tests/test_telemetry_client.py",
    "module": "tests.test_telemetry_client",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.console.handlers.create_console_router",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot",
        "townlet_ui.telemetry.SchemaMismatchError",
        "townlet_ui.telemetry.TelemetryClient"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_simulation",
        "lineno": 11,
        "signature": "(enforce_job_loop: bool = True) -> SimulationLoop",
        "docstring": null
      },
      {
        "name": "test_telemetry_client_parses_console_snapshot",
        "lineno": 30,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_telemetry_client_warns_on_newer_schema",
        "lineno": 59,
        "signature": "(monkeypatch: pytest.MonkeyPatch) -> None",
        "docstring": null
      },
      {
        "name": "test_telemetry_client_raises_on_major_mismatch",
        "lineno": 74,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 78
  },
  {
    "path": "tests/test_telemetry_jobs.py",
    "module": "tests.test_telemetry_jobs",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.stability.monitor.StabilityMonitor",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_telemetry_captures_job_snapshot",
        "lineno": 11,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_stability_monitor_lateness_alert",
        "lineno": 40,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 55
  },
  {
    "path": "tests/test_telemetry_narration.py",
    "module": "tests.test_telemetry_narration",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.NarrationThrottleConfig",
        "townlet.config.load_config",
        "townlet.telemetry.narration.NarrationRateLimiter",
        "townlet.telemetry.publisher.TelemetryPublisher",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_narration_rate_limiter_enforces_cooldowns",
        "lineno": 11,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_narration_rate_limiter_priority_bypass",
        "lineno": 32,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_telemetry_publisher_emits_queue_conflict_narration",
        "lineno": 49,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 107
  },
  {
    "path": "tests/test_telemetry_new_events.py",
    "module": "tests.test_telemetry_new_events",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_loop",
        "lineno": 10,
        "signature": "() -> SimulationLoop",
        "docstring": null
      },
      {
        "name": "test_shower_events_in_telemetry",
        "lineno": 17,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_shower_complete_narration",
        "lineno": 80,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_sleep_events_in_telemetry",
        "lineno": 139,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_rivalry_events_surface_in_telemetry",
        "lineno": 200,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 236
  },
  {
    "path": "tests/test_telemetry_stream_smoke.py",
    "module": "tests.test_telemetry_stream_smoke",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot",
        "townlet_ui.telemetry.TelemetryClient"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_ensure_agents",
        "lineno": 11,
        "signature": "(loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_file_transport_stream_smoke",
        "lineno": 26,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 51
  },
  {
    "path": "tests/test_telemetry_summary.py",
    "module": "tests.test_telemetry_summar",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "importlib.util",
        "pathlib.Path",
        "sys"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "test_summary_includes_new_events",
        "lineno": 17,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 69
  },
  {
    "path": "tests/test_telemetry_transport.py",
    "module": "tests.test_telemetry_transport",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "pathlib.Path",
        "time"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.telemetry.transport.TransportBuffer",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_ensure_agents",
        "lineno": 14,
        "signature": "(loop: SimulationLoop) -> None",
        "docstring": null
      },
      {
        "name": "test_transport_buffer_drop_until_capacity",
        "lineno": 29,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_telemetry_publisher_flushes_payload",
        "lineno": 40,
        "signature": "(monkeypatch: pytest.MonkeyPatch) -> None",
        "docstring": null
      },
      {
        "name": "test_telemetry_publisher_retries_on_failure",
        "lineno": 71,
        "signature": "(monkeypatch: pytest.MonkeyPatch) -> None",
        "docstring": null
      },
      {
        "name": "test_telemetry_worker_metrics_and_stop",
        "lineno": 120,
        "signature": "(monkeypatch: pytest.MonkeyPatch) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 154
  },
  {
    "path": "tests/test_telemetry_validator.py",
    "module": "tests.test_telemetry_validator",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "scripts.validate_ppo_telemetry.validate_logs"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_write_ndjson",
        "lineno": 42,
        "signature": "(path: Path, record: dict[str, float]) -> None",
        "docstring": null
      },
      {
        "name": "test_validate_ppo_telemetry_accepts_valid_log",
        "lineno": 46,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_validate_ppo_telemetry_raises_for_missing_conflict",
        "lineno": 66,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_validate_ppo_telemetry_accepts_version_1_1",
        "lineno": 81,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_validate_ppo_telemetry_v1_1_missing_field_raises",
        "lineno": 106,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "VALID_RECORD",
        "value": "{'epoch': 1.0, 'updates': 2.0, 'transitions': 4.0, 'loss_policy': 0.1, 'loss_value': 0.2, 'loss_entropy': 0.3, 'loss_total': 0.4, 'clip_fraction': 0.1, 'adv_mean': 0.0, 'adv_std': 0.1, 'adv_zero_std_batches': 0.0, 'adv_min_std': 0.1, 'clip_triggered_minibatches': 0.0, 'clip_fraction_max': 0.1, 'grad_norm': 1.5, 'kl_divergence': 0.01, 'telemetry_version': 1.0, 'lr': 0.0003, 'steps': 4.0, 'baseline_sample_count': 2.0, 'baseline_reward_mean': 0.25, 'baseline_reward_sum': 1.0, 'baseline_reward_sum_mean': 0.5, 'baseline_log_prob_mean': -0.2, 'conflict.rivalry_max_mean_avg': 0.05, 'conflict.rivalry_max_max_avg': 0.1, 'conflict.rivalry_avoid_count_mean_avg': 0.0, 'conflict.rivalry_avoid_count_max_avg': 0.0}",
        "lineno": 10
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 119
  },
  {
    "path": "tests/test_telemetry_watch.py",
    "module": "tests.test_telemetry_watch",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "scripts.telemetry_watch._parse_health_line",
        "scripts.telemetry_watch.check_health_thresholds",
        "scripts.telemetry_watch.stream_health_records"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_parse_health_line",
        "lineno": 14,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_stream_health_records",
        "lineno": 27,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_health_thresholds_raise",
        "lineno": 39,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 64
  },
  {
    "path": "tests/test_training_anneal.py",
    "module": "tests.test_training_anneal",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "pathlib.Path"
      ],
      "external": [
        "numpy",
        "pytest"
      ],
      "internal": [
        "townlet.config.AnnealStage",
        "townlet.config.load_config",
        "townlet.policy.models.torch_available",
        "townlet.policy.replay.ReplayDatasetConfig",
        "townlet.policy.replay.frames_to_replay_sample",
        "townlet.policy.runner.TrainingHarness"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_write_sample",
        "lineno": 15,
        "signature": "(output_dir: Path, stem: str, timesteps: int, action_dim: int = 2) -> tuple[Path, Path]",
        "docstring": null
      },
      {
        "name": "test_run_anneal_bc_then_ppo",
        "lineno": 56,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 108
  },
  {
    "path": "tests/test_training_cli.py",
    "module": "tests.test_training_cli",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "argparse.Namespace",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "scripts.run_training",
        "townlet.config.PPOConfig",
        "townlet.config.load_config"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_make_namespace",
        "lineno": 10,
        "signature": "(**kwargs: object) -> Namespace",
        "docstring": null
      },
      {
        "name": "test_collect_ppo_overrides_handles_values",
        "lineno": 29,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_apply_ppo_overrides_creates_config_when_missing",
        "lineno": 59,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_apply_ppo_overrides_updates_existing_model",
        "lineno": 74,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 81
  },
  {
    "path": "tests/test_training_replay.py",
    "module": "tests.test_training_repla",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "math",
        "pathlib.Path",
        "subprocess",
        "sys"
      ],
      "external": [
        "numpy",
        "pytest",
        "torch"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.observations.builder.ObservationBuilder",
        "townlet.policy.models.torch_available",
        "townlet.policy.replay.ReplayDataset",
        "townlet.policy.replay.ReplayDatasetConfig",
        "townlet.policy.replay.ReplaySample",
        "townlet.policy.replay.frames_to_replay_sample",
        "townlet.policy.replay.load_replay_sample",
        "townlet.policy.replay_buffer.InMemoryReplayDataset",
        "townlet.policy.replay_buffer.InMemoryReplayDatasetConfig",
        "townlet.policy.runner.TrainingHarness",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_validate_numeric",
        "lineno": 97,
        "signature": "(value: object) -> None",
        "docstring": null
      },
      {
        "name": "_assert_ppo_log_schema",
        "lineno": 102,
        "signature": "(summary: dict[str, object], require_baseline: bool) -> None",
        "docstring": null
      },
      {
        "name": "_load_expected_stats",
        "lineno": 138,
        "signature": "(config_path: Path) -> dict[str, dict[str, float]]",
        "docstring": null
      },
      {
        "name": "_aggregate_expected_metrics",
        "lineno": 146,
        "signature": "(sample_stats: dict[str, dict[str, float]]) -> dict[str, float]",
        "docstring": null
      },
      {
        "name": "_make_sample",
        "lineno": 184,
        "signature": "(base_dir: Path, rivalry_increment: float, avoid_threshold: float, suffix: str) -> tuple[Path, Path]",
        "docstring": null
      },
      {
        "name": "_make_social_sample",
        "lineno": 251,
        "signature": "() -> ReplaySample",
        "docstring": null
      },
      {
        "name": "test_training_harness_replay_stats",
        "lineno": 309,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_replay_dataset_batch_iteration",
        "lineno": 318,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_replay_loader_schema_guard",
        "lineno": 348,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_replay_dataset_streaming",
        "lineno": 357,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_replay_loader_missing_training_arrays",
        "lineno": 383,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_replay_loader_value_length_mismatch",
        "lineno": 400,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_training_harness_run_ppo_on_capture",
        "lineno": 423,
        "signature": "(tmp_path: Path, config_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_training_harness_run_ppo",
        "lineno": 539,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_run_ppo_rejects_nan_advantages",
        "lineno": 554,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_training_harness_log_sampling_and_rotation",
        "lineno": 566,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_training_harness_run_rollout_ppo",
        "lineno": 609,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_training_harness_ppo_conflict_telemetry",
        "lineno": 629,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_training_harness_run_rollout_ppo_multiple_cycles",
        "lineno": 685,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_training_harness_rollout_capture_and_train_cycles",
        "lineno": 727,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_training_harness_streaming_log_offsets",
        "lineno": 794,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_training_harness_rollout_queue_conflict_metrics",
        "lineno": 844,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_ppo_social_chat_drift",
        "lineno": 873,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      },
      {
        "name": "test_policy_runtime_collects_frames",
        "lineno": 918,
        "signature": "(tmp_path: Path) -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "SCENARIO_CONFIGS",
        "value": "[Path('configs/scenarios/kitchen_breakfast.yaml'), Path('configs/scenarios/queue_conflict.yaml'), Path('configs/scenarios/employment_punctuality.yaml'), Path('configs/scenarios/rivalry_decay.yaml'), Path('configs/scenarios/observation_baseline.yaml')]",
        "lineno": 29
      },
      {
        "name": "GOLDEN_STATS_PATH",
        "value": "Path('docs/samples/rollout_scenario_stats.json')",
        "lineno": 37
      },
      {
        "name": "GOLDEN_STATS",
        "value": "json.loads(GOLDEN_STATS_PATH.read_text()) if GOLDEN_STATS_PATH.exists() else {}",
        "lineno": 38
      },
      {
        "name": "REQUIRED_PPO_KEYS",
        "value": "{'epoch', 'updates', 'transitions', 'loss_policy', 'loss_value', 'loss_entropy', 'loss_total', 'clip_fraction', 'adv_mean', 'adv_std', 'adv_zero_std_batches', 'adv_min_std', 'clip_triggered_minibatches', 'clip_fraction_max', 'grad_norm', 'kl_divergence', 'telemetry_version', 'lr', 'steps', 'epoch_duration_sec', 'data_mode', 'cycle_id', 'batch_entropy_mean', 'batch_entropy_std', 'grad_norm_max', 'kl_divergence_max', 'reward_advantage_corr', 'rollout_ticks', 'log_stream_offset', 'queue_conflict_events', 'queue_conflict_intensity_sum', 'shared_meal_events', 'late_help_events', 'shift_takeover_events', 'chat_success_events', 'chat_failure_events', 'chat_quality_mean'}",
        "lineno": 43
      },
      {
        "name": "REQUIRED_PPO_NUMERIC_KEYS",
        "value": "REQUIRED_PPO_KEYS - {'data_mode'}",
        "lineno": 83
      },
      {
        "name": "BASELINE_KEYS_REQUIRED",
        "value": "{'baseline_sample_count', 'baseline_reward_sum', 'baseline_reward_sum_mean', 'baseline_reward_mean'}",
        "lineno": 85
      },
      {
        "name": "BASELINE_KEYS_OPTIONAL",
        "value": "{'baseline_log_prob_mean'}",
        "lineno": 92
      },
      {
        "name": "ALLOWED_KEY_PREFIXES",
        "value": "('conflict.',)",
        "lineno": 94
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 955
  },
  {
    "path": "tests/test_utils_rng.py",
    "module": "tests.test_utils_rng",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "random"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.utils.decode_rng_state",
        "townlet.utils.encode_rng_state"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "test_encode_decode_rng_state_round_trip",
        "lineno": 10,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_decode_rng_state_invalid_payload",
        "lineno": 20,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 22
  },
  {
    "path": "tests/test_world_local_view.py",
    "module": "tests.test_world_local_view",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "make_loop",
        "lineno": 10,
        "signature": "() -> SimulationLoop",
        "docstring": null
      },
      {
        "name": "tile_for_position",
        "lineno": 17,
        "signature": "(tiles, position)",
        "docstring": null
      },
      {
        "name": "test_local_view_includes_objects_and_agents",
        "lineno": 25,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_agent_context_defaults",
        "lineno": 55,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_world_snapshot_returns_defensive_copies",
        "lineno": 74,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 90
  },
  {
    "path": "tests/test_world_nightly_reset.py",
    "module": "tests.test_world_nightly_reset",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "pathlib.Path"
      ],
      "external": [],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_setup_world",
        "lineno": 10,
        "signature": "() -> WorldState",
        "docstring": null
      },
      {
        "name": "test_apply_nightly_reset_returns_agents_home",
        "lineno": 18,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_simulation_loop_triggers_nightly_reset",
        "lineno": 50,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 74
  },
  {
    "path": "tests/test_world_queue_integration.py",
    "module": "tests.test_world_queue_integration",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.core.sim_loop.SimulationLoop",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_make_world",
        "lineno": 10,
        "signature": "() -> WorldState",
        "docstring": null
      },
      {
        "name": "test_queue_assignment_flow",
        "lineno": 34,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_queue_ghost_step_promotes_waiter",
        "lineno": 54,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_affordance_completion_applies_effects",
        "lineno": 75,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_eat_meal_adjusts_needs_and_wallet",
        "lineno": 101,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_affordance_failure_skips_effects",
        "lineno": 132,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_affordances_loaded_from_yaml",
        "lineno": 164,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_affordance_events_emitted",
        "lineno": 172,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_need_decay_applied_each_tick",
        "lineno": 199,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_eat_meal_deducts_wallet_and_stock",
        "lineno": 210,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_wage_income_applied_on_shift",
        "lineno": 237,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_stove_restock_event_emitted",
        "lineno": 253,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_scripted_behavior_handles_sleep",
        "lineno": 263,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 280
  },
  {
    "path": "tests/test_world_rivalry.py",
    "module": "tests.test_world_rivalr",
    "docstring": null,
    "imports": {
      "stdlib": [
        "pathlib.Path"
      ],
      "external": [
        "pytest"
      ],
      "internal": [
        "townlet.config.load_config",
        "townlet.world.grid.AgentSnapshot",
        "townlet.world.grid.WorldState"
      ]
    },
    "classes": [],
    "functions": [
      {
        "name": "_make_world",
        "lineno": 9,
        "signature": "() -> WorldState",
        "docstring": null
      },
      {
        "name": "test_register_rivalry_conflict_updates_snapshot",
        "lineno": 28,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_rivalry_events_record_reason",
        "lineno": 35,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_rivalry_decays_over_time",
        "lineno": 51,
        "signature": "() -> None",
        "docstring": null
      },
      {
        "name": "test_queue_conflict_event_emitted_with_intensity",
        "lineno": 73,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [],
    "env_vars": [],
    "todos": [],
    "lines": 94
  },
  {
    "path": "tmp/analyze_modules.py",
    "module": "tmp.analyze_modules",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "ast",
        "collections.defaultdict",
        "dataclasses.dataclass",
        "dataclasses.field",
        "json",
        "os",
        "pathlib.Path",
        "typing.Any",
        "typing.Iterable"
      ],
      "external": [],
      "internal": []
    },
    "classes": [
      {
        "name": "FunctionInfo",
        "lineno": 62,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "name",
            "annotation": "str",
            "value": null,
            "lineno": 63
          },
          {
            "name": "signature",
            "annotation": "str",
            "value": null,
            "lineno": 64
          },
          {
            "name": "lineno",
            "annotation": "int",
            "value": null,
            "lineno": 65
          },
          {
            "name": "docstring",
            "annotation": "str | None",
            "value": null,
            "lineno": 66
          },
          {
            "name": "params",
            "annotation": "list[dict[str, Any]]",
            "value": null,
            "lineno": 67
          },
          {
            "name": "return_type",
            "annotation": "str | None",
            "value": null,
            "lineno": 68
          },
          {
            "name": "is_async",
            "annotation": "bool",
            "value": "False",
            "lineno": 69
          }
        ],
        "methods": []
      },
      {
        "name": "ClassInfo",
        "lineno": 73,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "name",
            "annotation": "str",
            "value": null,
            "lineno": 74
          },
          {
            "name": "bases",
            "annotation": "list[str]",
            "value": "field(default_factory=list)",
            "lineno": 75
          },
          {
            "name": "decorators",
            "annotation": "list[str]",
            "value": "field(default_factory=list)",
            "lineno": 76
          },
          {
            "name": "lineno",
            "annotation": "int",
            "value": "0",
            "lineno": 77
          },
          {
            "name": "docstring",
            "annotation": "str | None",
            "value": "None",
            "lineno": 78
          },
          {
            "name": "methods",
            "annotation": "list[FunctionInfo]",
            "value": "field(default_factory=list)",
            "lineno": 79
          },
          {
            "name": "attributes",
            "annotation": "list[dict[str, Any]]",
            "value": "field(default_factory=list)",
            "lineno": 80
          }
        ],
        "methods": []
      },
      {
        "name": "ModuleInfo",
        "lineno": 84,
        "bases": [],
        "decorators": [
          "dataclass"
        ],
        "docstring": null,
        "attrs": [
          {
            "name": "path",
            "annotation": "Path",
            "value": null,
            "lineno": 85
          },
          {
            "name": "module",
            "annotation": "str",
            "value": null,
            "lineno": 86
          },
          {
            "name": "module_name",
            "annotation": "str",
            "value": null,
            "lineno": 87
          },
          {
            "name": "docstring",
            "annotation": "str | None",
            "value": null,
            "lineno": 88
          },
          {
            "name": "imports",
            "annotation": "dict[str, set[str]]",
            "value": null,
            "lineno": 89
          },
          {
            "name": "classes",
            "annotation": "list[ClassInfo]",
            "value": null,
            "lineno": 90
          },
          {
            "name": "functions",
            "annotation": "list[FunctionInfo]",
            "value": null,
            "lineno": 91
          },
          {
            "name": "constants",
            "annotation": "list[dict[str, Any]]",
            "value": null,
            "lineno": 92
          },
          {
            "name": "env_vars",
            "annotation": "list[str]",
            "value": null,
            "lineno": 93
          },
          {
            "name": "todos",
            "annotation": "list[int]",
            "value": null,
            "lineno": 94
          },
          {
            "name": "has_logging",
            "annotation": "bool",
            "value": null,
            "lineno": 95
          },
          {
            "name": "has_type_hints",
            "annotation": "bool",
            "value": null,
            "lineno": 96
          },
          {
            "name": "has_dataclasses",
            "annotation": "bool",
            "value": null,
            "lineno": 97
          },
          {
            "name": "lines",
            "annotation": "int",
            "value": null,
            "lineno": 98
          }
        ],
        "methods": []
      }
    ],
    "functions": [
      {
        "name": "unparse",
        "lineno": 101,
        "signature": "(node: ast.AST | None) -> str | None",
        "docstring": null
      },
      {
        "name": "_format_param_entry",
        "lineno": 110,
        "signature": "(name: str, annotation: str | None, default: str | None) -> str",
        "docstring": null
      },
      {
        "name": "build_signature",
        "lineno": 119,
        "signature": "(arguments: ast.arguments) -> tuple[str, list[dict[str, Any]]]",
        "docstring": null
      },
      {
        "name": "format_return",
        "lineno": 210,
        "signature": "(annotation: ast.expr | None) -> str",
        "docstring": null
      },
      {
        "name": "module_name_from_path",
        "lineno": 216,
        "signature": "(path: Path) -> str",
        "docstring": null
      },
      {
        "name": "classify_import",
        "lineno": 233,
        "signature": "(module: str) -> str",
        "docstring": null
      },
      {
        "name": "collect_imports",
        "lineno": 244,
        "signature": "(tree: ast.AST, package_parts: list[str]) -> dict[str, set[str]]",
        "docstring": null
      },
      {
        "name": "gather_class_attributes",
        "lineno": 273,
        "signature": "(body: list[ast.stmt]) -> list[dict[str, Any]]",
        "docstring": null
      },
      {
        "name": "gather_constants",
        "lineno": 318,
        "signature": "(body: list[ast.stmt]) -> list[dict[str, Any]]",
        "docstring": null
      },
      {
        "name": "detect_env_usage",
        "lineno": 345,
        "signature": "(tree: ast.AST) -> list[str]",
        "docstring": null
      },
      {
        "name": "gather_functions",
        "lineno": 358,
        "signature": "(body: Iterable[ast.stmt]) -> list[FunctionInfo]",
        "docstring": null
      },
      {
        "name": "analyze_module",
        "lineno": 383,
        "signature": "(path: Path) -> ModuleInfo",
        "docstring": null
      },
      {
        "name": "find_python_files",
        "lineno": 451,
        "signature": "(root: Path) -> list[Path]",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 462,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "PROJECT_ROOT",
        "value": "Path(__file__).resolve().parents[1]",
        "lineno": 11
      },
      {
        "name": "PACKAGE_PREFIXES",
        "value": "{'townlet', 'townlet_ui', 'scripts'}",
        "lineno": 13
      },
      {
        "name": "STD_LIB_MODULES",
        "value": "{'__future__', 'abc', 'argparse', 'asyncio', 'base64', 'bisect', 'collections', 'collections.abc', 'contextlib', 'copy', 'dataclasses', 'datetime', 'decimal', 'enum', 'functools', 'hashlib', 'heapq', 'itertools', 'json', 'logging', 'math', 'os', 'pathlib', 'random', 'statistics', 'textwrap', 'time', 'typing', 'typing_extensions', 'uuid', 'weakref'}",
        "lineno": 19
      },
      {
        "name": "NON_STANDARD_PREFIXES",
        "value": "('townlet', 'townlet_ui', 'scripts')",
        "lineno": 54
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 535
  },
  {
    "path": "tmp/render_module_docs.py",
    "module": "tmp.render_module_docs",
    "docstring": null,
    "imports": {
      "stdlib": [
        "__future__.annotations",
        "json",
        "pathlib.Path",
        "typing.Any"
      ],
      "external": [],
      "internal": []
    },
    "classes": [],
    "functions": [
      {
        "name": "summarise_docstring",
        "lineno": 12,
        "signature": "(text: str | None, fallback: str) -> str",
        "docstring": null
      },
      {
        "name": "format_list",
        "lineno": 24,
        "signature": "(values: list[str]) -> str",
        "docstring": null
      },
      {
        "name": "indent",
        "lineno": 30,
        "signature": "(text: str, level: int = 1) -> str",
        "docstring": null
      },
      {
        "name": "build_class_section",
        "lineno": 35,
        "signature": "(cls: dict[str, Any]) -> str",
        "docstring": null
      },
      {
        "name": "build_function_section",
        "lineno": 67,
        "signature": "(fn: dict[str, Any]) -> str",
        "docstring": null
      },
      {
        "name": "collect_inputs",
        "lineno": 73,
        "signature": "(module: dict[str, Any]) -> list[str]",
        "docstring": null
      },
      {
        "name": "collect_outputs",
        "lineno": 91,
        "signature": "(module: dict[str, Any]) -> list[str]",
        "docstring": null
      },
      {
        "name": "build_code_quality_notes",
        "lineno": 105,
        "signature": "(module: dict[str, Any]) -> list[str]",
        "docstring": null
      },
      {
        "name": "main",
        "lineno": 139,
        "signature": "() -> None",
        "docstring": null
      }
    ],
    "constants": [
      {
        "name": "PROJECT_ROOT",
        "value": "Path(__file__).resolve().parents[1]",
        "lineno": 7
      },
      {
        "name": "METADATA_PATH",
        "value": "PROJECT_ROOT / 'audit' / 'module_metadata.json'",
        "lineno": 8
      },
      {
        "name": "OUTPUT_PATH",
        "value": "PROJECT_ROOT / 'audit' / 'MODULE_DOCUMENTATION.md'",
        "lineno": 9
      }
    ],
    "env_vars": [],
    "todos": [],
    "lines": 232
  }
]