name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .[dev]
      - name: Affordance manifest validation
        run: python scripts/validate_affordances.py --strict
      - name: Lint
        run: |
          ruff check src tests
          mypy src
      - name: Unit tests
        run: pytest -k "not rollout_capture"

      - name: Observation variant regressions
        run: pytest tests/test_observation_builder_full.py tests/test_observation_builder_compact.py

      - name: Social telemetry & UI tests
        run: pytest tests/test_telemetry_narration.py tests/test_observer_ui_dashboard.py tests/test_telemetry_client.py

      - name: Telemetry schema tests
        run: pytest tests/test_training_replay.py::test_training_harness_ppo_conflict_telemetry

      - name: PPO telemetry validator
        run: |
          python scripts/validate_ppo_telemetry.py docs/samples/ppo_conflict_telemetry.jsonl

      - name: BC dataset checksum guard
        run: |
          python - <<'PY'
          import hashlib, json, pathlib
          checksums = json.loads(pathlib.Path('data/bc_datasets/checksums/idle_v1.json').read_text())
          failures = []
          for name, info in checksums.items():
              sample = pathlib.Path(info['sample'])
              meta = pathlib.Path(info['meta'])
              digest = hashlib.sha256(sample.read_bytes() + meta.read_bytes()).hexdigest()
              if digest != info['sha256']:
                  failures.append(f"{name}: expected {info['sha256']} got {digest}")
          if failures:
              raise SystemExit('Checksum mismatch\n' + "\n".join(failures))
          PY

      - name: BC & anneal regression tests
        run: pytest tests/test_bc_trainer.py tests/test_training_anneal.py tests/test_curate_trajectories.py tests/test_capture_scripted_cli.py tests/test_bc_capture_prototype.py

      - name: Anneal acceptance smoke
        run: |
          python - <<'PY'
          import json
          from pathlib import Path
          from townlet.config import load_config
          from townlet.policy.runner import TrainingHarness
          from townlet.policy.replay import ReplayDatasetConfig

          log_dir = Path('tmp/ci_phase5')
          log_dir.mkdir(parents=True, exist_ok=True)

          config = load_config(Path('artifacts/m5/acceptance/config_idle_v1.yaml'))
          manifest = Path('data/bc_datasets/manifests/idle_v1.json')

          harness = TrainingHarness(config)
          dataset = ReplayDatasetConfig.from_manifest(manifest)
          results = harness.run_anneal(dataset_config=dataset, log_dir=log_dir, bc_manifest=manifest)
          summary = {
              'bc_accuracy': results[0].get('accuracy'),
              'bc_threshold': results[0].get('threshold'),
              'bc_passed': results[0].get('passed'),
              'ppo_loss_total': results[-1].get('loss_total'),
              'ppo_updates': results[-1].get('updates'),
              'dataset': 'idle_v1_production',
          }
          (log_dir / 'summary.json').write_text(json.dumps(summary, indent=2))
          print(summary)
          PY

      - name: Promotion gate evaluation
        run: |
          python scripts/promotion_evaluate.py --summary tmp/ci_phase5/summary.json

      - name: Upload BC/anneal artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bc-anneal-acceptance
          path: |
            tmp/ci_phase5/anneal_results.json
            tmp/ci_phase5/summary.json
          if-no-files-found: error

      - name: Mixed-mode rollout validation
        run: |
          python scripts/capture_rollout.py configs/scenarios/queue_conflict.yaml --output tmp/ci_phase4
          python scripts/run_training.py configs/scenarios/queue_conflict.yaml --mode mixed --replay-manifest tmp/ci_phase4/rollout_sample_manifest.json --rollout-ticks 40 --epochs 1 --ppo-log tmp/ci_phase4/ppo_mixed.jsonl
          python scripts/validate_ppo_telemetry.py tmp/ci_phase4/ppo_mixed.jsonl
          python scripts/validate_ppo_telemetry.py tmp/ci_phase4/ppo_mixed.jsonl --baseline <(head -n 1 tmp/ci_phase4/ppo_mixed.jsonl)
          python scripts/telemetry_watch.py tmp/ci_phase4/ppo_mixed.jsonl --kl-threshold 0.5 --grad-threshold 5 --entropy-threshold -0.2 --reward-corr-threshold -0.5 --json > tmp/ci_phase4/watch.jsonl
          python scripts/telemetry_summary.py tmp/ci_phase4/ppo_mixed.jsonl --format markdown > tmp/ci_phase4/summary.md
      - name: Upload PPO telemetry artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ppo-mixed-telemetry
          path: |
            tmp/ci_phase4/ppo_mixed.jsonl
            tmp/ci_phase4/summary.md
            tmp/ci_phase4/watch.jsonl
          if-no-files-found: error

      - name: Rollout scenario tests
        run: pytest tests/test_rollout_capture.py
