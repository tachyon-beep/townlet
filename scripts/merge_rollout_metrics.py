"""Merge captured rollout metrics into the golden stats JSON."""
from __future__ import annotations

import argparse
import json
from pathlib import Path

DEFAULT_GOLDEN_PATH = Path("docs/samples/rollout_scenario_stats.json")
METRICS_FILENAME = "rollout_sample_metrics.json"


def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Merge captured rollout metrics into the golden stats JSON.",
    )
    parser.add_argument(
        "input_root",
        type=Path,
        help=(
            "Directory containing per-scenario capture folders (as generated by "
            "capture_rollout_suite.py)."
        ),
    )
    parser.add_argument(
        "--golden",
        type=Path,
        default=DEFAULT_GOLDEN_PATH,
        help="Path to the existing golden stats JSON file.",
    )
    parser.add_argument(
        "--output",
        type=Path,
        default=None,
        help="Optional output path. Defaults to overwriting the --golden file.",
    )
    parser.add_argument(
        "--include",
        nargs="*",
        default=None,
        help="Optional list of scenario names to include (defaults to all directories).",
    )
    parser.add_argument(
        "--allow-template",
        action="store_true",
        help="Include scenarios whose directory name starts with '_'.",
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Print the scenarios that would be merged without writing output.",
    )
    return parser.parse_args()


def _load_metrics_from_dir(scenario_dir: Path) -> dict[str, dict[str, float]] | None:
    metrics_path = scenario_dir / METRICS_FILENAME
    if not metrics_path.exists():
        return None
    data = json.loads(metrics_path.read_text())
    if not isinstance(data, dict):  # defensive, schema should be mapping
        raise ValueError(f"Metrics file {metrics_path} must contain an object")
    samples = data.get("samples") if isinstance(data, dict) else None
    if isinstance(samples, dict):
        return samples
    return data


def _collect_input_metrics(
    root: Path,
    allow_template: bool,
) -> dict[str, dict[str, dict[str, float]]]:
    merged: dict[str, dict[str, dict[str, float]]] = {}
    for scenario_dir in sorted(root.iterdir()):
        if not scenario_dir.is_dir():
            continue
        scenario_name = scenario_dir.name
        if not allow_template and scenario_name.startswith("_"):
            continue
        metrics = _load_metrics_from_dir(scenario_dir)
        if metrics:
            merged[scenario_name] = metrics
    return merged


def main() -> None:
    args = parse_args()

    if not args.input_root.exists():
        raise FileNotFoundError(args.input_root)

    capture_metrics = _collect_input_metrics(args.input_root, args.allow_template)
    if not capture_metrics:
        print("No metrics found to merge.")
        return

    include_filter = set(args.include) if args.include else None
    if include_filter:
        capture_metrics = {k: v for k, v in capture_metrics.items() if k in include_filter}
        if not capture_metrics:
            print("Include filter removed all scenarios; nothing to merge.")
            return

    golden_path = args.golden
    if golden_path.exists():
        golden_data = json.loads(golden_path.read_text())
        if not isinstance(golden_data, dict):
            raise ValueError(f"Golden stats file {golden_path} must contain an object")
    else:
        golden_data = {}

    updated_scenarios: dict[str, dict[str, dict[str, float]]] = {}
    for scenario, metrics in capture_metrics.items():
        golden_data[scenario] = metrics
        updated_scenarios[scenario] = metrics

    if args.dry_run:
        print("Scenarios that would be merged:")
        for scenario, metrics in updated_scenarios.items():
            print(f"- {scenario}: {len(metrics)} samples")
        return

    output_path = args.output or golden_path
    output_path.parent.mkdir(parents=True, exist_ok=True)
    output_path.write_text(json.dumps(golden_data, indent=2, sort_keys=True))

    print("Merged scenarios:")
    for scenario, metrics in updated_scenarios.items():
        print(f"- {scenario}: {len(metrics)} samples -> {output_path}")


if __name__ == "__main__":
    main()
